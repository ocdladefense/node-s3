/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@aws-crypto/crc32/build/aws_crc32.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32/build/aws_crc32.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AwsCrc32 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */ "./node_modules/@aws-crypto/util/build/index.js");
var index_1 = __webpack_require__(/*! ./index */ "./node_modules/@aws-crypto/crc32/build/index.js");
var AwsCrc32 = /** @class */ (function () {
    function AwsCrc32() {
        this.crc32 = new index_1.Crc32();
    }
    AwsCrc32.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash))
            return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32.prototype.digest = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, (0, util_1.numToUint8)(this.crc32.digest())];
            });
        });
    };
    return AwsCrc32;
}());
exports.AwsCrc32 = AwsCrc32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzX2NyYzMyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2F3c19jcmMzMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7OztBQUd0Qyx5Q0FBNEU7QUFDNUUsaUNBQWdDO0FBRWhDO0lBQUE7UUFDbUIsVUFBSyxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7SUFXdkMsQ0FBQztJQVRDLHlCQUFNLEdBQU4sVUFBTyxNQUFrQjtRQUN2QixJQUFJLElBQUEsa0JBQVcsRUFBQyxNQUFNLENBQUM7WUFBRSxPQUFPO1FBRWhDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUEsc0JBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFSyx5QkFBTSxHQUFaOzs7Z0JBQ0Usc0JBQU8sSUFBQSxpQkFBVSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQzs7O0tBQ3hDO0lBQ0gsZUFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgY29udmVydFRvQnVmZmVyLCBpc0VtcHR5RGF0YSwgbnVtVG9VaW50OCB9IGZyb20gXCJAYXdzLWNyeXB0by91dGlsXCI7XG5pbXBvcnQgeyBDcmMzMiB9IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBBd3NDcmMzMiBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGNyYzMyID0gbmV3IENyYzMyKCk7XG5cbiAgdXBkYXRlKHRvSGFzaDogU291cmNlRGF0YSkge1xuICAgIGlmIChpc0VtcHR5RGF0YSh0b0hhc2gpKSByZXR1cm47XG5cbiAgICB0aGlzLmNyYzMyLnVwZGF0ZShjb252ZXJ0VG9CdWZmZXIodG9IYXNoKSk7XG4gIH1cblxuICBhc3luYyBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIG51bVRvVWludDgodGhpcy5jcmMzMi5kaWdlc3QoKSk7XG4gIH1cbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32/build/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32/build/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */ "./node_modules/@aws-crypto/util/build/index.js");
function crc32(data) {
    return new Crc32().update(data).digest();
}
exports.crc32 = crc32;
var Crc32 = /** @class */ (function () {
    function Crc32() {
        this.checksum = 0xffffffff;
    }
    Crc32.prototype.update = function (data) {
        var e_1, _a;
        try {
            for (var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                var byte = data_1_1.value;
                this.checksum =
                    (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    Crc32.prototype.digest = function () {
        return (this.checksum ^ 0xffffffff) >>> 0;
    };
    return Crc32;
}());
exports.Crc32 = Crc32;
// prettier-ignore
var a_lookUpTable = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
];
var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
var aws_crc32_1 = __webpack_require__(/*! ./aws_crc32 */ "./node_modules/@aws-crypto/crc32/build/aws_crc32.js");
Object.defineProperty(exports, "AwsCrc32", ({ enumerable: true, get: function () { return aws_crc32_1.AwsCrc32; } }));
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AwsCrc32c = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */ "./node_modules/@aws-crypto/util/build/index.js");
var index_1 = __webpack_require__(/*! ./index */ "./node_modules/@aws-crypto/crc32c/build/index.js");
var AwsCrc32c = /** @class */ (function () {
    function AwsCrc32c() {
        this.crc32c = new index_1.Crc32c();
    }
    AwsCrc32c.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash))
            return;
        this.crc32c.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32c.prototype.digest = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, (0, util_1.numToUint8)(this.crc32c.digest())];
            });
        });
    };
    return AwsCrc32c;
}());
exports.AwsCrc32c = AwsCrc32c;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzX2NyYzMyYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hd3NfY3JjMzJjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7O0FBR3RDLHlDQUE0RTtBQUM1RSxpQ0FBaUM7QUFFakM7SUFBQTtRQUNtQixXQUFNLEdBQUcsSUFBSSxjQUFNLEVBQUUsQ0FBQztJQVd6QyxDQUFDO0lBVEMsMEJBQU0sR0FBTixVQUFPLE1BQWtCO1FBQ3ZCLElBQUksSUFBQSxrQkFBVyxFQUFDLE1BQU0sQ0FBQztZQUFFLE9BQU87UUFFaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVLLDBCQUFNLEdBQVo7OztnQkFDRSxzQkFBTyxJQUFBLGlCQUFVLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFDOzs7S0FDekM7SUFDSCxnQkFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksOEJBQVMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgY29udmVydFRvQnVmZmVyLCBpc0VtcHR5RGF0YSwgbnVtVG9VaW50OCB9IGZyb20gXCJAYXdzLWNyeXB0by91dGlsXCI7XG5pbXBvcnQgeyBDcmMzMmMgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgQXdzQ3JjMzJjIGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JjMzJjID0gbmV3IENyYzMyYygpO1xuXG4gIHVwZGF0ZSh0b0hhc2g6IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoaXNFbXB0eURhdGEodG9IYXNoKSkgcmV0dXJuO1xuXG4gICAgdGhpcy5jcmMzMmMudXBkYXRlKGNvbnZlcnRUb0J1ZmZlcih0b0hhc2gpKTtcbiAgfVxuXG4gIGFzeW5jIGRpZ2VzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICByZXR1cm4gbnVtVG9VaW50OCh0aGlzLmNyYzMyYy5kaWdlc3QoKSk7XG4gIH1cbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32c/build/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32c/build/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AwsCrc32c = exports.Crc32c = exports.crc32c = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */ "./node_modules/@aws-crypto/util/build/index.js");
function crc32c(data) {
    return new Crc32c().update(data).digest();
}
exports.crc32c = crc32c;
var Crc32c = /** @class */ (function () {
    function Crc32c() {
        this.checksum = 0xffffffff;
    }
    Crc32c.prototype.update = function (data) {
        var e_1, _a;
        try {
            for (var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                var byte = data_1_1.value;
                this.checksum =
                    (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    Crc32c.prototype.digest = function () {
        return (this.checksum ^ 0xffffffff) >>> 0;
    };
    return Crc32c;
}());
exports.Crc32c = Crc32c;
// prettier-ignore
var a_lookupTable = [
    0x00000000, 0xF26B8303, 0xE13B70F7, 0x1350F3F4, 0xC79A971F, 0x35F1141C, 0x26A1E7E8, 0xD4CA64EB,
    0x8AD958CF, 0x78B2DBCC, 0x6BE22838, 0x9989AB3B, 0x4D43CFD0, 0xBF284CD3, 0xAC78BF27, 0x5E133C24,
    0x105EC76F, 0xE235446C, 0xF165B798, 0x030E349B, 0xD7C45070, 0x25AFD373, 0x36FF2087, 0xC494A384,
    0x9A879FA0, 0x68EC1CA3, 0x7BBCEF57, 0x89D76C54, 0x5D1D08BF, 0xAF768BBC, 0xBC267848, 0x4E4DFB4B,
    0x20BD8EDE, 0xD2D60DDD, 0xC186FE29, 0x33ED7D2A, 0xE72719C1, 0x154C9AC2, 0x061C6936, 0xF477EA35,
    0xAA64D611, 0x580F5512, 0x4B5FA6E6, 0xB93425E5, 0x6DFE410E, 0x9F95C20D, 0x8CC531F9, 0x7EAEB2FA,
    0x30E349B1, 0xC288CAB2, 0xD1D83946, 0x23B3BA45, 0xF779DEAE, 0x05125DAD, 0x1642AE59, 0xE4292D5A,
    0xBA3A117E, 0x4851927D, 0x5B016189, 0xA96AE28A, 0x7DA08661, 0x8FCB0562, 0x9C9BF696, 0x6EF07595,
    0x417B1DBC, 0xB3109EBF, 0xA0406D4B, 0x522BEE48, 0x86E18AA3, 0x748A09A0, 0x67DAFA54, 0x95B17957,
    0xCBA24573, 0x39C9C670, 0x2A993584, 0xD8F2B687, 0x0C38D26C, 0xFE53516F, 0xED03A29B, 0x1F682198,
    0x5125DAD3, 0xA34E59D0, 0xB01EAA24, 0x42752927, 0x96BF4DCC, 0x64D4CECF, 0x77843D3B, 0x85EFBE38,
    0xDBFC821C, 0x2997011F, 0x3AC7F2EB, 0xC8AC71E8, 0x1C661503, 0xEE0D9600, 0xFD5D65F4, 0x0F36E6F7,
    0x61C69362, 0x93AD1061, 0x80FDE395, 0x72966096, 0xA65C047D, 0x5437877E, 0x4767748A, 0xB50CF789,
    0xEB1FCBAD, 0x197448AE, 0x0A24BB5A, 0xF84F3859, 0x2C855CB2, 0xDEEEDFB1, 0xCDBE2C45, 0x3FD5AF46,
    0x7198540D, 0x83F3D70E, 0x90A324FA, 0x62C8A7F9, 0xB602C312, 0x44694011, 0x5739B3E5, 0xA55230E6,
    0xFB410CC2, 0x092A8FC1, 0x1A7A7C35, 0xE811FF36, 0x3CDB9BDD, 0xCEB018DE, 0xDDE0EB2A, 0x2F8B6829,
    0x82F63B78, 0x709DB87B, 0x63CD4B8F, 0x91A6C88C, 0x456CAC67, 0xB7072F64, 0xA457DC90, 0x563C5F93,
    0x082F63B7, 0xFA44E0B4, 0xE9141340, 0x1B7F9043, 0xCFB5F4A8, 0x3DDE77AB, 0x2E8E845F, 0xDCE5075C,
    0x92A8FC17, 0x60C37F14, 0x73938CE0, 0x81F80FE3, 0x55326B08, 0xA759E80B, 0xB4091BFF, 0x466298FC,
    0x1871A4D8, 0xEA1A27DB, 0xF94AD42F, 0x0B21572C, 0xDFEB33C7, 0x2D80B0C4, 0x3ED04330, 0xCCBBC033,
    0xA24BB5A6, 0x502036A5, 0x4370C551, 0xB11B4652, 0x65D122B9, 0x97BAA1BA, 0x84EA524E, 0x7681D14D,
    0x2892ED69, 0xDAF96E6A, 0xC9A99D9E, 0x3BC21E9D, 0xEF087A76, 0x1D63F975, 0x0E330A81, 0xFC588982,
    0xB21572C9, 0x407EF1CA, 0x532E023E, 0xA145813D, 0x758FE5D6, 0x87E466D5, 0x94B49521, 0x66DF1622,
    0x38CC2A06, 0xCAA7A905, 0xD9F75AF1, 0x2B9CD9F2, 0xFF56BD19, 0x0D3D3E1A, 0x1E6DCDEE, 0xEC064EED,
    0xC38D26C4, 0x31E6A5C7, 0x22B65633, 0xD0DDD530, 0x0417B1DB, 0xF67C32D8, 0xE52CC12C, 0x1747422F,
    0x49547E0B, 0xBB3FFD08, 0xA86F0EFC, 0x5A048DFF, 0x8ECEE914, 0x7CA56A17, 0x6FF599E3, 0x9D9E1AE0,
    0xD3D3E1AB, 0x21B862A8, 0x32E8915C, 0xC083125F, 0x144976B4, 0xE622F5B7, 0xF5720643, 0x07198540,
    0x590AB964, 0xAB613A67, 0xB831C993, 0x4A5A4A90, 0x9E902E7B, 0x6CFBAD78, 0x7FAB5E8C, 0x8DC0DD8F,
    0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
    0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
    0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
    0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351,
];
var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
var aws_crc32c_1 = __webpack_require__(/*! ./aws_crc32c */ "./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js");
Object.defineProperty(exports, "AwsCrc32c", ({ enumerable: true, get: function () { return aws_crc32c_1.AwsCrc32c; } }));
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=CryptoOperation.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/Key.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/Key.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=Key.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=KeyOperation.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=MsSubtleCrypto.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isMsWindow = void 0;
var msSubtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function quacksLikeAnMsWindow(window) {
    return "MSInputMethodContext" in window && "msCrypto" in window;
}
/**
 * Determines if the provided window is (or is like) the window object one would
 * expect to encounter in Internet Explorer 11.
 */
function isMsWindow(window) {
    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods
            .map(function (methodName) { return subtle_1[methodName]; })
            .concat(getRandomValues)
            .every(function (method) { return typeof method === "function"; });
    }
    return false;
}
exports.isMsWindow = isMsWindow;
//# sourceMappingURL=MsWindow.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./CryptoOperation */ "./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./Key */ "./node_modules/@aws-crypto/ie11-detection/build/Key.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./KeyOperation */ "./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./MsSubtleCrypto */ "./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./MsWindow */ "./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EMPTY_DATA_SHA_1 = exports.SHA_1_HMAC_ALGO = exports.SHA_1_HASH = void 0;
exports.SHA_1_HASH = { name: "SHA-1" };
exports.SHA_1_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_1_HASH,
};
exports.EMPTY_DATA_SHA_1 = new Uint8Array([
    218,
    57,
    163,
    238,
    94,
    107,
    75,
    13,
    50,
    85,
    191,
    239,
    149,
    96,
    24,
    144,
    175,
    216,
    7,
    9,
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLFVBQVUsR0FBc0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFFbEQsUUFBQSxlQUFlLEdBQThDO0lBQ3hFLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLGtCQUFVO0NBQ2pCLENBQUM7QUFFVyxRQUFBLGdCQUFnQixHQUFHLElBQUksVUFBVSxDQUFDO0lBQzdDLEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEVBQUU7SUFDRixFQUFFO0lBQ0YsRUFBRTtJQUNGLEVBQUU7SUFDRixHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxFQUFFO0lBQ0YsRUFBRTtJQUNGLEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILENBQUM7SUFDRCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNIQV8xX0hBU0g6IHsgbmFtZTogXCJTSEEtMVwiIH0gPSB7IG5hbWU6IFwiU0hBLTFcIiB9O1xuXG5leHBvcnQgY29uc3QgU0hBXzFfSE1BQ19BTEdPOiB7IG5hbWU6IFwiSE1BQ1wiOyBoYXNoOiB7IG5hbWU6IFwiU0hBLTFcIiB9IH0gPSB7XG4gIG5hbWU6IFwiSE1BQ1wiLFxuICBoYXNoOiBTSEFfMV9IQVNILFxufTtcblxuZXhwb3J0IGNvbnN0IEVNUFRZX0RBVEFfU0hBXzEgPSBuZXcgVWludDhBcnJheShbXG4gIDIxOCxcbiAgNTcsXG4gIDE2MyxcbiAgMjM4LFxuICA5NCxcbiAgMTA3LFxuICA3NSxcbiAgMTMsXG4gIDUwLFxuICA4NSxcbiAgMTkxLFxuICAyMzksXG4gIDE0OSxcbiAgOTYsXG4gIDI0LFxuICAxNDQsXG4gIDE3NSxcbiAgMjE2LFxuICA3LFxuICA5LFxuXSk7XG4iXX0=

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha1 = void 0;
var ie11Sha1_1 = __webpack_require__(/*! ./ie11Sha1 */ "./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js");
var webCryptoSha1_1 = __webpack_require__(/*! ./webCryptoSha1 */ "./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js");
var supports_web_crypto_1 = __webpack_require__(/*! @aws-crypto/supports-web-crypto */ "./node_modules/@aws-crypto/supports-web-crypto/build/index.js");
var ie11_detection_1 = __webpack_require__(/*! @aws-crypto/ie11-detection */ "./node_modules/@aws-crypto/ie11-detection/build/index.js");
var util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js");
var Sha1 = /** @class */ (function () {
    function Sha1(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new webCryptoSha1_1.Sha1(secret);
        }
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new ie11Sha1_1.Sha1(secret);
        }
        else {
            throw new Error("SHA1 not supported");
        }
    }
    Sha1.prototype.update = function (data, encoding) {
        this.hash.update(data, encoding);
    };
    Sha1.prototype.digest = function () {
        return this.hash.digest();
    };
    return Sha1;
}());
exports.Sha1 = Sha1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3NQbGF0Zm9ybVNoYTEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY3Jvc3NQbGF0Zm9ybVNoYTEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQThDO0FBQzlDLGlEQUF3RDtBQUV4RCx1RUFBb0U7QUFDcEUsNkRBQXdEO0FBQ3hELGtFQUEyRDtBQUUzRDtJQUdFLGNBQVksTUFBbUI7UUFDN0IsSUFBSSxJQUFBLHVDQUFpQixFQUFDLElBQUEsaUNBQVksR0FBRSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLG9CQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkM7YUFBTSxJQUFJLElBQUEsMkJBQVUsRUFBQyxJQUFBLGlDQUFZLEdBQUUsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxlQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCxxQkFBTSxHQUFOLFVBQU8sSUFBZ0IsRUFBRSxRQUFzQztRQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHFCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNILFdBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBcEJZLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhMSBhcyBJZTExU2hhMSB9IGZyb20gXCIuL2llMTFTaGExXCI7XG5pbXBvcnQgeyBTaGExIGFzIFdlYkNyeXB0b1NoYTEgfSBmcm9tIFwiLi93ZWJDcnlwdG9TaGExXCI7XG5pbXBvcnQgeyBIYXNoLCBTb3VyY2VEYXRhIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBzdXBwb3J0c1dlYkNyeXB0byB9IGZyb20gXCJAYXdzLWNyeXB0by9zdXBwb3J0cy13ZWItY3J5cHRvXCI7XG5pbXBvcnQgeyBpc01zV2luZG93IH0gZnJvbSBcIkBhd3MtY3J5cHRvL2llMTEtZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGVXaW5kb3cgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1sb2NhdGUtd2luZG93XCI7XG5cbmV4cG9ydCBjbGFzcyBTaGExIGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFzaDogSGFzaDtcblxuICBjb25zdHJ1Y3RvcihzZWNyZXQ/OiBTb3VyY2VEYXRhKSB7XG4gICAgaWYgKHN1cHBvcnRzV2ViQ3J5cHRvKGxvY2F0ZVdpbmRvdygpKSkge1xuICAgICAgdGhpcy5oYXNoID0gbmV3IFdlYkNyeXB0b1NoYTEoc2VjcmV0KTtcbiAgICB9IGVsc2UgaWYgKGlzTXNXaW5kb3cobG9jYXRlV2luZG93KCkpKSB7XG4gICAgICB0aGlzLmhhc2ggPSBuZXcgSWUxMVNoYTEoc2VjcmV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU0hBMSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShkYXRhOiBTb3VyY2VEYXRhLCBlbmNvZGluZz86IFwidXRmOFwiIHwgXCJhc2NpaVwiIHwgXCJsYXRpbjFcIik6IHZvaWQge1xuICAgIHRoaXMuaGFzaC51cGRhdGUoZGF0YSwgZW5jb2RpbmcpO1xuICB9XG5cbiAgZGlnZXN0KCk6IFByb21pc2U8VWludDhBcnJheT4ge1xuICAgIHJldHVybiB0aGlzLmhhc2guZGlnZXN0KCk7XG4gIH1cbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha1 = void 0;
var isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ "./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js");
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@aws-crypto/sha1-browser/build/constants.js");
var util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
var util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js");
var Sha1 = /** @class */ (function () {
    function Sha1(secret) {
        if (secret) {
            this.operation = getKeyPromise(secret).then(function (keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, keyData);
            });
            this.operation.catch(function () { });
        }
        else {
            this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-1"));
        }
    }
    Sha1.prototype.update = function (toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
            return;
        }
        this.operation = this.operation.then(function (operation) {
            operation.onerror = function () {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function () { });
    };
    Sha1.prototype.digest = function () {
        return this.operation.then(function (operation) {
            return new Promise(function (resolve, reject) {
                operation.onerror = function () {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function () {
                    if (operation.result) {
                        resolve(new Uint8Array(operation.result));
                    }
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    return Sha1;
}());
exports.Sha1 = Sha1;
function getKeyPromise(secret) {
    return new Promise(function (resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_1_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function () {
            if (keyOperation.result) {
                resolve(keyOperation.result);
            }
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function () {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWUxMVNoYTEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWUxMVNoYTEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTRDO0FBQzVDLHlDQUE4QztBQUU5QyxnRUFBc0Q7QUFFdEQsa0VBQTJEO0FBRTNEO0lBR0UsY0FBWSxNQUFtQjtRQUM3QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE9BQU87Z0JBQ2xELE9BQUMsSUFBQSxpQ0FBWSxHQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQy9DLDJCQUFlLEVBQ2YsT0FBTyxDQUNSO1lBSEQsQ0FHQyxDQUNGLENBQUM7WUFDRixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQzdCLElBQUEsaUNBQVksR0FBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUM3RCxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQscUJBQU0sR0FBTixVQUFPLE1BQWtCO1FBQXpCLGlCQWdCQztRQWZDLElBQUksSUFBQSx5QkFBVyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBQyxTQUFTO1lBQzdDLFNBQVMsQ0FBQyxPQUFPLEdBQUc7Z0JBQ2xCLEtBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDN0IsSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FDN0MsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUNGLFNBQVMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUU3QyxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELHFCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN4QixVQUFDLFNBQVM7WUFDUixPQUFBLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0JBQzFCLFNBQVMsQ0FBQyxPQUFPLEdBQUc7b0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQztnQkFDRixTQUFTLENBQUMsVUFBVSxHQUFHO29CQUNyQixJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7d0JBQ3BCLE9BQU8sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztxQkFDM0M7b0JBQ0QsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDO2dCQUVGLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNyQixDQUFDLENBQUM7UUFaRixDQVlFLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFDSCxXQUFDO0FBQUQsQ0FBQyxBQXZERCxJQXVEQztBQXZEWSxvQkFBSTtBQXlEakIsU0FBUyxhQUFhLENBQUMsTUFBa0I7SUFDdkMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLElBQU0sWUFBWSxHQUFJLElBQUEsaUNBQVksR0FBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUN6RSxLQUFLLEVBQ0wsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQ3pCLDJCQUFlLEVBQ2YsS0FBSyxFQUNMLENBQUMsTUFBTSxDQUFDLENBQ1QsQ0FBQztRQUVGLFlBQVksQ0FBQyxVQUFVLEdBQUc7WUFDeEIsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO2dCQUN2QixPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO1lBRUQsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUM7UUFDRixZQUFZLENBQUMsT0FBTyxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFnQjtJQUN6QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLElBQUEsNEJBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQy9DLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHlEYXRhIH0gZnJvbSBcIi4vaXNFbXB0eURhdGFcIjtcbmltcG9ydCB7IFNIQV8xX0hNQUNfQUxHTyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11dGY4LWJyb3dzZXJcIjtcbmltcG9ydCB7IENyeXB0b09wZXJhdGlvbiwgS2V5LCBNc1dpbmRvdyB9IGZyb20gXCJAYXdzLWNyeXB0by9pZTExLWRldGVjdGlvblwiO1xuaW1wb3J0IHsgbG9jYXRlV2luZG93IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtbG9jYXRlLXdpbmRvd1wiO1xuXG5leHBvcnQgY2xhc3MgU2hhMSBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIG9wZXJhdGlvbjogUHJvbWlzZTxDcnlwdG9PcGVyYXRpb24+O1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0KSB7XG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IGdldEtleVByb21pc2Uoc2VjcmV0KS50aGVuKChrZXlEYXRhKSA9PlxuICAgICAgICAobG9jYXRlV2luZG93KCkgYXMgTXNXaW5kb3cpLm1zQ3J5cHRvLnN1YnRsZS5zaWduKFxuICAgICAgICAgIFNIQV8xX0hNQUNfQUxHTyxcbiAgICAgICAgICBrZXlEYXRhXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICB0aGlzLm9wZXJhdGlvbi5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlcmF0aW9uID0gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAobG9jYXRlV2luZG93KCkgYXMgTXNXaW5kb3cpLm1zQ3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMVwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdGlvbiA9IHRoaXMub3BlcmF0aW9uLnRoZW4oKG9wZXJhdGlvbikgPT4ge1xuICAgICAgb3BlcmF0aW9uLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEVycm9yKFwiRXJyb3IgZW5jb3VudGVyZWQgdXBkYXRpbmcgaGFzaFwiKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICAgIG9wZXJhdGlvbi5wcm9jZXNzKHRvQXJyYXlCdWZmZXJWaWV3KHRvSGFzaCkpO1xuXG4gICAgICByZXR1cm4gb3BlcmF0aW9uO1xuICAgIH0pO1xuICAgIHRoaXMub3BlcmF0aW9uLmNhdGNoKCgpID0+IHt9KTtcbiAgfVxuXG4gIGRpZ2VzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb24udGhlbjxVaW50OEFycmF5PihcbiAgICAgIChvcGVyYXRpb24pID0+XG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBvcGVyYXRpb24ub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvciBlbmNvdW50ZXJlZCBmaW5hbGl6aW5nIGhhc2hcIikpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgb3BlcmF0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uLnJlc3VsdCkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KG9wZXJhdGlvbi5yZXN1bHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvciBlbmNvdW50ZXJlZCBmaW5hbGl6aW5nIGhhc2hcIikpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBvcGVyYXRpb24uZmluaXNoKCk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRLZXlQcm9taXNlKHNlY3JldDogU291cmNlRGF0YSk6IFByb21pc2U8S2V5PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qga2V5T3BlcmF0aW9uID0gKGxvY2F0ZVdpbmRvdygpIGFzIE1zV2luZG93KS5tc0NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgXCJyYXdcIixcbiAgICAgIHRvQXJyYXlCdWZmZXJWaWV3KHNlY3JldCksXG4gICAgICBTSEFfMV9ITUFDX0FMR08sXG4gICAgICBmYWxzZSxcbiAgICAgIFtcInNpZ25cIl1cbiAgICApO1xuXG4gICAga2V5T3BlcmF0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAoa2V5T3BlcmF0aW9uLnJlc3VsdCkge1xuICAgICAgICByZXNvbHZlKGtleU9wZXJhdGlvbi5yZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEVycm9yKFwiSW1wb3J0S2V5IGNvbXBsZXRlZCB3aXRob3V0IGltcG9ydGluZyBrZXkuXCIpKTtcbiAgICB9O1xuICAgIGtleU9wZXJhdGlvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkltcG9ydEtleSBmYWlsZWQgdG8gaW1wb3J0IGtleS5cIikpO1xuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5QnVmZmVyVmlldyhkYXRhOiBTb3VyY2VEYXRhKTogVWludDhBcnJheSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmcm9tVXRmOChkYXRhKTtcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICBkYXRhLmJ1ZmZlcixcbiAgICAgIGRhdGEuYnl0ZU9mZnNldCxcbiAgICAgIGRhdGEuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlRcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufVxuIl19

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebCryptoSha1 = exports.Ie11Sha1 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./crossPlatformSha1 */ "./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js"), exports);
var ie11Sha1_1 = __webpack_require__(/*! ./ie11Sha1 */ "./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js");
Object.defineProperty(exports, "Ie11Sha1", ({ enumerable: true, get: function () { return ie11Sha1_1.Sha1; } }));
var webCryptoSha1_1 = __webpack_require__(/*! ./webCryptoSha1 */ "./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js");
Object.defineProperty(exports, "WebCryptoSha1", ({ enumerable: true, get: function () { return webCryptoSha1_1.Sha1; } }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG1FQUFvQztBQUNwQyx1Q0FBOEM7QUFBckMsb0dBQUEsSUFBSSxPQUFZO0FBQ3pCLGlEQUF3RDtBQUEvQyw4R0FBQSxJQUFJLE9BQWlCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY3Jvc3NQbGF0Zm9ybVNoYTFcIjtcbmV4cG9ydCB7IFNoYTEgYXMgSWUxMVNoYTEgfSBmcm9tIFwiLi9pZTExU2hhMVwiO1xuZXhwb3J0IHsgU2hhMSBhcyBXZWJDcnlwdG9TaGExIH0gZnJvbSBcIi4vd2ViQ3J5cHRvU2hhMVwiO1xuIl19

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") {
        return data.length === 0;
    }
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbXB0eURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaXNFbXB0eURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsV0FBVyxDQUFDLElBQWdCO0lBQzFDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7S0FDMUI7SUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFORCxrQ0FNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGE6IFNvdXJjZURhdGEpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha1 = void 0;
var util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
var isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ "./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js");
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@aws-crypto/sha1-browser/build/constants.js");
var util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js");
var Sha1 = /** @class */ (function () {
    function Sha1(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
            this.key = new Promise(function (resolve, reject) {
                (0, util_locate_window_1.locateWindow)()
                    .crypto.subtle.importKey("raw", convertToBuffer(secret), constants_1.SHA_1_HMAC_ALGO, false, ["sign"])
                    .then(resolve, reject);
            });
            this.key.catch(function () { });
        }
    }
    Sha1.prototype.update = function (data) {
        if ((0, isEmptyData_1.isEmptyData)(data)) {
            return;
        }
        var update = convertToBuffer(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha1.prototype.digest = function () {
        var _this = this;
        if (this.key) {
            return this.key.then(function (key) {
                return (0, util_locate_window_1.locateWindow)()
                    .crypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, key, _this.toHash)
                    .then(function (data) { return new Uint8Array(data); });
            });
        }
        if ((0, isEmptyData_1.isEmptyData)(this.toHash)) {
            return Promise.resolve(constants_1.EMPTY_DATA_SHA_1);
        }
        return Promise.resolve()
            .then(function () { return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_1_HASH, _this.toHash); })
            .then(function (data) { return Promise.resolve(new Uint8Array(data)); });
    };
    return Sha1;
}());
exports.Sha1 = Sha1;
function convertToBuffer(data) {
    if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViQ3J5cHRvU2hhMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93ZWJDcnlwdG9TaGExLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGdFQUFzRDtBQUN0RCw2Q0FBNEM7QUFDNUMseUNBQTRFO0FBQzVFLGtFQUEyRDtBQUUzRDtJQUlFLGNBQVksTUFBbUI7UUFGdkIsV0FBTSxHQUFlLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRzdDLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQkFDckMsSUFBQSxpQ0FBWSxHQUFFO3FCQUNYLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUN0QixLQUFLLEVBQ0wsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUN2QiwyQkFBZSxFQUNmLEtBQUssRUFDTCxDQUFDLE1BQU0sQ0FBQyxDQUNUO3FCQUNBLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELHFCQUFNLEdBQU4sVUFBTyxJQUFnQjtRQUNyQixJQUFJLElBQUEseUJBQVcsRUFBQyxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQzNDLENBQUM7UUFDRixVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQscUJBQU0sR0FBTjtRQUFBLGlCQWdCQztRQWZDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHO2dCQUN2QixPQUFBLElBQUEsaUNBQVksR0FBRTtxQkFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBZSxFQUFFLEdBQUcsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDO3FCQUNyRCxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQztZQUZ2QyxDQUV1QyxDQUN4QyxDQUFDO1NBQ0g7UUFFRCxJQUFJLElBQUEseUJBQVcsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLDRCQUFnQixDQUFDLENBQUM7U0FDMUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUU7YUFDckIsSUFBSSxDQUFDLGNBQU0sT0FBQSxJQUFBLGlDQUFZLEdBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBVSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsRUFBNUQsQ0FBNEQsQ0FBQzthQUN4RSxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQXJDLENBQXFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ0gsV0FBQztBQUFELENBQUMsQUFwREQsSUFvREM7QUFwRFksb0JBQUk7QUFzRGpCLFNBQVMsZUFBZSxDQUFDLElBQWdCO0lBQ3ZDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sSUFBQSw0QkFBUSxFQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxVQUFVLENBQ25CLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FDL0MsQ0FBQztLQUNIO0lBRUQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11dGY4LWJyb3dzZXJcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhIH0gZnJvbSBcIi4vaXNFbXB0eURhdGFcIjtcbmltcG9ydCB7IEVNUFRZX0RBVEFfU0hBXzEsIFNIQV8xX0hBU0gsIFNIQV8xX0hNQUNfQUxHTyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgbG9jYXRlV2luZG93IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtbG9jYXRlLXdpbmRvd1wiO1xuXG5leHBvcnQgY2xhc3MgU2hhMSBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGtleTogUHJvbWlzZTxDcnlwdG9LZXk+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHRvSGFzaDogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMua2V5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsb2NhdGVXaW5kb3coKVxuICAgICAgICAgIC5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAgIFwicmF3XCIsXG4gICAgICAgICAgICBjb252ZXJ0VG9CdWZmZXIoc2VjcmV0KSxcbiAgICAgICAgICAgIFNIQV8xX0hNQUNfQUxHTyxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgW1wic2lnblwiXVxuICAgICAgICAgIClcbiAgICAgICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmtleS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGRhdGE6IFNvdXJjZURhdGEpOiB2b2lkIHtcbiAgICBpZiAoaXNFbXB0eURhdGEoZGF0YSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGUgPSBjb252ZXJ0VG9CdWZmZXIoZGF0YSk7XG4gICAgY29uc3QgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgdGhpcy50b0hhc2guYnl0ZUxlbmd0aCArIHVwZGF0ZS5ieXRlTGVuZ3RoXG4gICAgKTtcbiAgICB0eXBlZEFycmF5LnNldCh0aGlzLnRvSGFzaCwgMCk7XG4gICAgdHlwZWRBcnJheS5zZXQodXBkYXRlLCB0aGlzLnRvSGFzaC5ieXRlTGVuZ3RoKTtcbiAgICB0aGlzLnRvSGFzaCA9IHR5cGVkQXJyYXk7XG4gIH1cblxuICBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgaWYgKHRoaXMua2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXkudGhlbigoa2V5KSA9PlxuICAgICAgICBsb2NhdGVXaW5kb3coKVxuICAgICAgICAgIC5jcnlwdG8uc3VidGxlLnNpZ24oU0hBXzFfSE1BQ19BTEdPLCBrZXksIHRoaXMudG9IYXNoKVxuICAgICAgICAgIC50aGVuKChkYXRhKSA9PiBuZXcgVWludDhBcnJheShkYXRhKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzRW1wdHlEYXRhKHRoaXMudG9IYXNoKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShFTVBUWV9EQVRBX1NIQV8xKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IGxvY2F0ZVdpbmRvdygpLmNyeXB0by5zdWJ0bGUuZGlnZXN0KFNIQV8xX0hBU0gsIHRoaXMudG9IYXNoKSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiBQcm9taXNlLnJlc29sdmUobmV3IFVpbnQ4QXJyYXkoZGF0YSkpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0VG9CdWZmZXIoZGF0YTogU291cmNlRGF0YSk6IFVpbnQ4QXJyYXkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgZGF0YS5idWZmZXIsXG4gICAgICBkYXRhLmJ5dGVPZmZzZXQsXG4gICAgICBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/constants.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/constants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
exports.SHA_256_HASH = { name: "SHA-256" };
exports.SHA_256_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_256_HASH
};
exports.EMPTY_DATA_SHA_256 = new Uint8Array([
    227,
    176,
    196,
    66,
    152,
    252,
    28,
    20,
    154,
    251,
    244,
    200,
    153,
    111,
    185,
    36,
    39,
    174,
    65,
    228,
    100,
    155,
    147,
    76,
    164,
    149,
    153,
    27,
    120,
    82,
    184,
    85
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLFlBQVksR0FBd0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFFeEQsUUFBQSxpQkFBaUIsR0FBZ0Q7SUFDNUUsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsb0JBQVk7Q0FDbkIsQ0FBQztBQUVXLFFBQUEsa0JBQWtCLEdBQUcsSUFBSSxVQUFVLENBQUM7SUFDL0MsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEVBQUU7SUFDRixHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEVBQUU7SUFDRixHQUFHO0lBQ0gsRUFBRTtJQUNGLEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEVBQUU7Q0FDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgU0hBXzI1Nl9IQVNIOiB7IG5hbWU6IFwiU0hBLTI1NlwiIH0gPSB7IG5hbWU6IFwiU0hBLTI1NlwiIH07XG5cbmV4cG9ydCBjb25zdCBTSEFfMjU2X0hNQUNfQUxHTzogeyBuYW1lOiBcIkhNQUNcIjsgaGFzaDogeyBuYW1lOiBcIlNIQS0yNTZcIiB9IH0gPSB7XG4gIG5hbWU6IFwiSE1BQ1wiLFxuICBoYXNoOiBTSEFfMjU2X0hBU0hcbn07XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9EQVRBX1NIQV8yNTYgPSBuZXcgVWludDhBcnJheShbXG4gIDIyNyxcbiAgMTc2LFxuICAxOTYsXG4gIDY2LFxuICAxNTIsXG4gIDI1MixcbiAgMjgsXG4gIDIwLFxuICAxNTQsXG4gIDI1MSxcbiAgMjQ0LFxuICAyMDAsXG4gIDE1MyxcbiAgMTExLFxuICAxODUsXG4gIDM2LFxuICAzOSxcbiAgMTc0LFxuICA2NSxcbiAgMjI4LFxuICAxMDAsXG4gIDE1NSxcbiAgMTQ3LFxuICA3NixcbiAgMTY0LFxuICAxNDksXG4gIDE1MyxcbiAgMjcsXG4gIDEyMCxcbiAgODIsXG4gIDE4NCxcbiAgODVcbl0pO1xuIl19

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha256 = void 0;
var ie11Sha256_1 = __webpack_require__(/*! ./ie11Sha256 */ "./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js");
var webCryptoSha256_1 = __webpack_require__(/*! ./webCryptoSha256 */ "./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js");
var sha256_js_1 = __webpack_require__(/*! @aws-crypto/sha256-js */ "./node_modules/@aws-crypto/sha256-js/build/index.js");
var supports_web_crypto_1 = __webpack_require__(/*! @aws-crypto/supports-web-crypto */ "./node_modules/@aws-crypto/supports-web-crypto/build/index.js");
var ie11_detection_1 = __webpack_require__(/*! @aws-crypto/ie11-detection */ "./node_modules/@aws-crypto/ie11-detection/build/index.js");
var util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js");
var Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new webCryptoSha256_1.Sha256(secret);
        }
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new ie11Sha256_1.Sha256(secret);
        }
        else {
            this.hash = new sha256_js_1.Sha256(secret);
        }
    }
    Sha256.prototype.update = function (data, encoding) {
        this.hash.update(data, encoding);
    };
    Sha256.prototype.digest = function () {
        return this.hash.digest();
    };
    return Sha256;
}());
exports.Sha256 = Sha256;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3NQbGF0Zm9ybVNoYTI1Ni5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jcm9zc1BsYXRmb3JtU2hhMjU2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFvRDtBQUNwRCxxREFBOEQ7QUFDOUQsbURBQTJEO0FBRTNELHVFQUFvRTtBQUNwRSw2REFBd0Q7QUFDeEQsa0VBQTJEO0FBRTNEO0lBR0UsZ0JBQVksTUFBbUI7UUFDN0IsSUFBSSxJQUFBLHVDQUFpQixFQUFDLElBQUEsaUNBQVksR0FBRSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLHdCQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUEsMkJBQVUsRUFBQyxJQUFBLGlDQUFZLEdBQUUsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxtQkFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksa0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFRCx1QkFBTSxHQUFOLFVBQU8sSUFBZ0IsRUFBRSxRQUFzQztRQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBcEJZLHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhMjU2IGFzIEllMTFTaGEyNTYgfSBmcm9tIFwiLi9pZTExU2hhMjU2XCI7XG5pbXBvcnQgeyBTaGEyNTYgYXMgV2ViQ3J5cHRvU2hhMjU2IH0gZnJvbSBcIi4vd2ViQ3J5cHRvU2hhMjU2XCI7XG5pbXBvcnQgeyBTaGEyNTYgYXMgSnNTaGEyNTYgfSBmcm9tIFwiQGF3cy1jcnlwdG8vc2hhMjU2LWpzXCI7XG5pbXBvcnQgeyBIYXNoLCBTb3VyY2VEYXRhIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBzdXBwb3J0c1dlYkNyeXB0byB9IGZyb20gXCJAYXdzLWNyeXB0by9zdXBwb3J0cy13ZWItY3J5cHRvXCI7XG5pbXBvcnQgeyBpc01zV2luZG93IH0gZnJvbSBcIkBhd3MtY3J5cHRvL2llMTEtZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGVXaW5kb3cgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1sb2NhdGUtd2luZG93XCI7XG5cbmV4cG9ydCBjbGFzcyBTaGEyNTYgaW1wbGVtZW50cyBIYXNoIHtcbiAgcHJpdmF0ZSByZWFkb25seSBoYXNoOiBIYXNoO1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc3VwcG9ydHNXZWJDcnlwdG8obG9jYXRlV2luZG93KCkpKSB7XG4gICAgICB0aGlzLmhhc2ggPSBuZXcgV2ViQ3J5cHRvU2hhMjU2KHNlY3JldCk7XG4gICAgfSBlbHNlIGlmIChpc01zV2luZG93KGxvY2F0ZVdpbmRvdygpKSkge1xuICAgICAgdGhpcy5oYXNoID0gbmV3IEllMTFTaGEyNTYoc2VjcmV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYXNoID0gbmV3IEpzU2hhMjU2KHNlY3JldCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGRhdGE6IFNvdXJjZURhdGEsIGVuY29kaW5nPzogXCJ1dGY4XCIgfCBcImFzY2lpXCIgfCBcImxhdGluMVwiKTogdm9pZCB7XG4gICAgdGhpcy5oYXNoLnVwZGF0ZShkYXRhLCBlbmNvZGluZyk7XG4gIH1cblxuICBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaC5kaWdlc3QoKTtcbiAgfVxufVxuIl19

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha256 = void 0;
var isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ "./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js");
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@aws-crypto/sha256-browser/build/constants.js");
var util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
var util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js");
var Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        if (secret) {
            this.operation = getKeyPromise(secret).then(function (keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function () { });
        }
        else {
            this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
    }
    Sha256.prototype.update = function (toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
            return;
        }
        this.operation = this.operation.then(function (operation) {
            operation.onerror = function () {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function () { });
    };
    Sha256.prototype.digest = function () {
        return this.operation.then(function (operation) {
            return new Promise(function (resolve, reject) {
                operation.onerror = function () {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function () {
                    if (operation.result) {
                        resolve(new Uint8Array(operation.result));
                    }
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    return Sha256;
}());
exports.Sha256 = Sha256;
function getKeyPromise(secret) {
    return new Promise(function (resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function () {
            if (keyOperation.result) {
                resolve(keyOperation.result);
            }
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function () {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWUxMVNoYTI1Ni5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZTExU2hhMjU2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUE0QztBQUM1Qyx5Q0FBZ0Q7QUFFaEQsZ0VBQXNEO0FBRXRELGtFQUEyRDtBQUUzRDtJQUdFLGdCQUFZLE1BQW1CO1FBQzdCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztnQkFDakQsT0FBQyxJQUFBLGlDQUFZLEdBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDL0MsNkJBQWlCLEVBQ2pCLE9BQU8sQ0FDUjtZQUhELENBR0MsQ0FDRixDQUFDO1lBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUM3QixJQUFBLGlDQUFZLEdBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FDL0QsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELHVCQUFNLEdBQU4sVUFBTyxNQUFrQjtRQUF6QixpQkFnQkM7UUFmQyxJQUFJLElBQUEseUJBQVcsRUFBQyxNQUFNLENBQUMsRUFBRTtZQUN2QixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQUEsU0FBUztZQUM1QyxTQUFTLENBQUMsT0FBTyxHQUFHO2dCQUNsQixLQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQzdCLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQzdDLENBQUM7WUFDSixDQUFDLENBQUM7WUFDRixTQUFTLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFN0MsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCx1QkFBTSxHQUFOO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDeEIsVUFBQSxTQUFTO1lBQ1AsT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO2dCQUMxQixTQUFTLENBQUMsT0FBTyxHQUFHO29CQUNsQixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDLENBQUM7Z0JBQ0YsU0FBUyxDQUFDLFVBQVUsR0FBRztvQkFDckIsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO3dCQUNwQixPQUFPLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQzNDO29CQUNELE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQztnQkFFRixTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDckIsQ0FBQyxDQUFDO1FBWkYsQ0FZRSxDQUNMLENBQUM7SUFDSixDQUFDO0lBQ0gsYUFBQztBQUFELENBQUMsQUF2REQsSUF1REM7QUF2RFksd0JBQU07QUF5RG5CLFNBQVMsYUFBYSxDQUFDLE1BQWtCO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxJQUFNLFlBQVksR0FBSSxJQUFBLGlDQUFZLEdBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FDekUsS0FBSyxFQUNMLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUN6Qiw2QkFBaUIsRUFDakIsS0FBSyxFQUNMLENBQUMsTUFBTSxDQUFDLENBQ1QsQ0FBQztRQUVGLFlBQVksQ0FBQyxVQUFVLEdBQUc7WUFDeEIsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO2dCQUN2QixPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO1lBRUQsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUM7UUFDRixZQUFZLENBQUMsT0FBTyxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFnQjtJQUN6QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLElBQUEsNEJBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQy9DLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHlEYXRhIH0gZnJvbSBcIi4vaXNFbXB0eURhdGFcIjtcbmltcG9ydCB7IFNIQV8yNTZfSE1BQ19BTEdPIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBIYXNoLCBTb3VyY2VEYXRhIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBmcm9tVXRmOCB9IGZyb20gXCJAYXdzLXNkay91dGlsLXV0ZjgtYnJvd3NlclwiO1xuaW1wb3J0IHsgQ3J5cHRvT3BlcmF0aW9uLCBLZXksIE1zV2luZG93IH0gZnJvbSBcIkBhd3MtY3J5cHRvL2llMTEtZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGVXaW5kb3cgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1sb2NhdGUtd2luZG93XCI7XG5cbmV4cG9ydCBjbGFzcyBTaGEyNTYgaW1wbGVtZW50cyBIYXNoIHtcbiAgcHJpdmF0ZSBvcGVyYXRpb246IFByb21pc2U8Q3J5cHRvT3BlcmF0aW9uPjtcblxuICBjb25zdHJ1Y3RvcihzZWNyZXQ/OiBTb3VyY2VEYXRhKSB7XG4gICAgaWYgKHNlY3JldCkge1xuICAgICAgdGhpcy5vcGVyYXRpb24gPSBnZXRLZXlQcm9taXNlKHNlY3JldCkudGhlbihrZXlEYXRhID0+XG4gICAgICAgIChsb2NhdGVXaW5kb3coKSBhcyBNc1dpbmRvdykubXNDcnlwdG8uc3VidGxlLnNpZ24oXG4gICAgICAgICAgU0hBXzI1Nl9ITUFDX0FMR08sXG4gICAgICAgICAga2V5RGF0YVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgdGhpcy5vcGVyYXRpb24uY2F0Y2goKCkgPT4ge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgKGxvY2F0ZVdpbmRvdygpIGFzIE1zV2luZG93KS5tc0NyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdGlvbiA9IHRoaXMub3BlcmF0aW9uLnRoZW4ob3BlcmF0aW9uID0+IHtcbiAgICAgIG9wZXJhdGlvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBFcnJvcihcIkVycm9yIGVuY291bnRlcmVkIHVwZGF0aW5nIGhhc2hcIilcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICBvcGVyYXRpb24ucHJvY2Vzcyh0b0FycmF5QnVmZmVyVmlldyh0b0hhc2gpKTtcblxuICAgICAgcmV0dXJuIG9wZXJhdGlvbjtcbiAgICB9KTtcbiAgICB0aGlzLm9wZXJhdGlvbi5jYXRjaCgoKSA9PiB7fSk7XG4gIH1cblxuICBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uLnRoZW48VWludDhBcnJheT4oXG4gICAgICBvcGVyYXRpb24gPT5cbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIG9wZXJhdGlvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkVycm9yIGVuY291bnRlcmVkIGZpbmFsaXppbmcgaGFzaFwiKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBvcGVyYXRpb24ub25jb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcGVyYXRpb24ucmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkob3BlcmF0aW9uLnJlc3VsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkVycm9yIGVuY291bnRlcmVkIGZpbmFsaXppbmcgaGFzaFwiKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIG9wZXJhdGlvbi5maW5pc2goKTtcbiAgICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEtleVByb21pc2Uoc2VjcmV0OiBTb3VyY2VEYXRhKTogUHJvbWlzZTxLZXk+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBrZXlPcGVyYXRpb24gPSAobG9jYXRlV2luZG93KCkgYXMgTXNXaW5kb3cpLm1zQ3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICBcInJhd1wiLFxuICAgICAgdG9BcnJheUJ1ZmZlclZpZXcoc2VjcmV0KSxcbiAgICAgIFNIQV8yNTZfSE1BQ19BTEdPLFxuICAgICAgZmFsc2UsXG4gICAgICBbXCJzaWduXCJdXG4gICAgKTtcblxuICAgIGtleU9wZXJhdGlvbi5vbmNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKGtleU9wZXJhdGlvbi5yZXN1bHQpIHtcbiAgICAgICAgcmVzb2x2ZShrZXlPcGVyYXRpb24ucmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkltcG9ydEtleSBjb21wbGV0ZWQgd2l0aG91dCBpbXBvcnRpbmcga2V5LlwiKSk7XG4gICAgfTtcbiAgICBrZXlPcGVyYXRpb24ub25lcnJvciA9ICgpID0+IHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJbXBvcnRLZXkgZmFpbGVkIHRvIGltcG9ydCBrZXkuXCIpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheUJ1ZmZlclZpZXcoZGF0YTogU291cmNlRGF0YSk6IFVpbnQ4QXJyYXkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgZGF0YS5idWZmZXIsXG4gICAgICBkYXRhLmJ5dGVPZmZzZXQsXG4gICAgICBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./crossPlatformSha256 */ "./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"), exports);
var ie11Sha256_1 = __webpack_require__(/*! ./ie11Sha256 */ "./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js");
Object.defineProperty(exports, "Ie11Sha256", ({ enumerable: true, get: function () { return ie11Sha256_1.Sha256; } }));
var webCryptoSha256_1 = __webpack_require__(/*! ./webCryptoSha256 */ "./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js");
Object.defineProperty(exports, "WebCryptoSha256", ({ enumerable: true, get: function () { return webCryptoSha256_1.Sha256; } }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFFQUFzQztBQUN0QywyQ0FBb0Q7QUFBM0Msd0dBQUEsTUFBTSxPQUFjO0FBQzdCLHFEQUE4RDtBQUFyRCxrSEFBQSxNQUFNLE9BQW1CIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY3Jvc3NQbGF0Zm9ybVNoYTI1NlwiO1xuZXhwb3J0IHsgU2hhMjU2IGFzIEllMTFTaGEyNTYgfSBmcm9tIFwiLi9pZTExU2hhMjU2XCI7XG5leHBvcnQgeyBTaGEyNTYgYXMgV2ViQ3J5cHRvU2hhMjU2IH0gZnJvbSBcIi4vd2ViQ3J5cHRvU2hhMjU2XCI7XG4iXX0=

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") {
        return data.length === 0;
    }
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbXB0eURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaXNFbXB0eURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsV0FBVyxDQUFDLElBQWdCO0lBQzFDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7S0FDMUI7SUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFORCxrQ0FNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGE6IFNvdXJjZURhdGEpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha256 = void 0;
var util_1 = __webpack_require__(/*! @aws-crypto/util */ "./node_modules/@aws-crypto/util/build/index.js");
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@aws-crypto/sha256-browser/build/constants.js");
var util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js");
var Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
            this.key = new Promise(function (resolve, reject) {
                (0, util_locate_window_1.locateWindow)()
                    .crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"])
                    .then(resolve, reject);
            });
            this.key.catch(function () { });
        }
    }
    Sha256.prototype.update = function (data) {
        if ((0, util_1.isEmptyData)(data)) {
            return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha256.prototype.digest = function () {
        var _this = this;
        if (this.key) {
            return this.key.then(function (key) {
                return (0, util_locate_window_1.locateWindow)()
                    .crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash)
                    .then(function (data) { return new Uint8Array(data); });
            });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
            return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve()
            .then(function () {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        })
            .then(function (data) { return Promise.resolve(new Uint8Array(data)); });
    };
    return Sha256;
}());
exports.Sha256 = Sha256;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViQ3J5cHRvU2hhMjU2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYkNyeXB0b1NoYTI1Ni50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5Q0FBZ0U7QUFDaEUseUNBSXFCO0FBQ3JCLGtFQUEyRDtBQUUzRDtJQUlFLGdCQUFZLE1BQW1CO1FBRnZCLFdBQU0sR0FBZSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUc3QyxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0JBQ3JDLElBQUEsaUNBQVksR0FBRTtxQkFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FDdEIsS0FBSyxFQUNMLElBQUEsc0JBQWUsRUFBQyxNQUFNLENBQUMsRUFDdkIsNkJBQWlCLEVBQ2pCLEtBQUssRUFDTCxDQUFDLE1BQU0sQ0FBQyxDQUNUO3FCQUNBLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELHVCQUFNLEdBQU4sVUFBTyxJQUFnQjtRQUNyQixJQUFJLElBQUEsa0JBQVcsRUFBQyxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFNLE1BQU0sR0FBRyxJQUFBLHNCQUFlLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQzNDLENBQUM7UUFDRixVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQsdUJBQU0sR0FBTjtRQUFBLGlCQWtCQztRQWpCQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztnQkFDdkIsT0FBQSxJQUFBLGlDQUFZLEdBQUU7cUJBQ1gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkJBQWlCLEVBQUUsR0FBRyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUM7cUJBQ3ZELElBQUksQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFwQixDQUFvQixDQUFDO1lBRnZDLENBRXVDLENBQ3hDLENBQUM7U0FDSDtRQUVELElBQUksSUFBQSxrQkFBVyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM1QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsOEJBQWtCLENBQUMsQ0FBQztTQUM1QztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRTthQUNyQixJQUFJLENBQUM7WUFDSixPQUFBLElBQUEsaUNBQVksR0FBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUFZLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQztRQUE5RCxDQUE4RCxDQUMvRDthQUNBLElBQUksQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBckMsQ0FBcUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFDSCxhQUFDO0FBQUQsQ0FBQyxBQXRERCxJQXNEQztBQXREWSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc2gsIFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhLCBjb252ZXJ0VG9CdWZmZXIgfSBmcm9tIFwiQGF3cy1jcnlwdG8vdXRpbFwiO1xuaW1wb3J0IHtcbiAgRU1QVFlfREFUQV9TSEFfMjU2LFxuICBTSEFfMjU2X0hBU0gsXG4gIFNIQV8yNTZfSE1BQ19BTEdPLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGxvY2F0ZVdpbmRvdyB9IGZyb20gXCJAYXdzLXNkay91dGlsLWxvY2F0ZS13aW5kb3dcIjtcblxuZXhwb3J0IGNsYXNzIFNoYTI1NiBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGtleTogUHJvbWlzZTxDcnlwdG9LZXk+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHRvSGFzaDogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMua2V5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsb2NhdGVXaW5kb3coKVxuICAgICAgICAgIC5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAgIFwicmF3XCIsXG4gICAgICAgICAgICBjb252ZXJ0VG9CdWZmZXIoc2VjcmV0KSxcbiAgICAgICAgICAgIFNIQV8yNTZfSE1BQ19BTEdPLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBbXCJzaWduXCJdXG4gICAgICAgICAgKVxuICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMua2V5LmNhdGNoKCgpID0+IHt9KTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoZGF0YTogU291cmNlRGF0YSk6IHZvaWQge1xuICAgIGlmIChpc0VtcHR5RGF0YShkYXRhKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZSA9IGNvbnZlcnRUb0J1ZmZlcihkYXRhKTtcbiAgICBjb25zdCB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICB0aGlzLnRvSGFzaC5ieXRlTGVuZ3RoICsgdXBkYXRlLmJ5dGVMZW5ndGhcbiAgICApO1xuICAgIHR5cGVkQXJyYXkuc2V0KHRoaXMudG9IYXNoLCAwKTtcbiAgICB0eXBlZEFycmF5LnNldCh1cGRhdGUsIHRoaXMudG9IYXNoLmJ5dGVMZW5ndGgpO1xuICAgIHRoaXMudG9IYXNoID0gdHlwZWRBcnJheTtcbiAgfVxuXG4gIGRpZ2VzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICBpZiAodGhpcy5rZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleS50aGVuKChrZXkpID0+XG4gICAgICAgIGxvY2F0ZVdpbmRvdygpXG4gICAgICAgICAgLmNyeXB0by5zdWJ0bGUuc2lnbihTSEFfMjU2X0hNQUNfQUxHTywga2V5LCB0aGlzLnRvSGFzaClcbiAgICAgICAgICAudGhlbigoZGF0YSkgPT4gbmV3IFVpbnQ4QXJyYXkoZGF0YSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChpc0VtcHR5RGF0YSh0aGlzLnRvSGFzaCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoRU1QVFlfREFUQV9TSEFfMjU2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+XG4gICAgICAgIGxvY2F0ZVdpbmRvdygpLmNyeXB0by5zdWJ0bGUuZGlnZXN0KFNIQV8yNTZfSEFTSCwgdGhpcy50b0hhc2gpXG4gICAgICApXG4gICAgICAudGhlbigoZGF0YSkgPT4gUHJvbWlzZS5yZXNvbHZlKG5ldyBVaW50OEFycmF5KGRhdGEpKSk7XG4gIH1cbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/RawSha256.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/RawSha256.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawSha256 = void 0;
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@aws-crypto/sha256-js/build/constants.js");
/**
 * @internal
 */
var RawSha256 = /** @class */ (function () {
    function RawSha256() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */
        this.finished = false;
    }
    RawSha256.prototype.update = function (data) {
        if (this.finished) {
            throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
            throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function () {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
                for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
                    bufferView.setUint8(i, 0);
                }
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
                bufferView.setUint8(i, 0);
            }
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
            out[i * 4] = (this.state[i] >>> 24) & 0xff;
            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function () {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            if (i < 16) {
                this.temp[i] =
                    ((buffer[i * 4] & 0xff) << 24) |
                        ((buffer[i * 4 + 1] & 0xff) << 16) |
                        ((buffer[i * 4 + 2] & 0xff) << 8) |
                        (buffer[i * 4 + 3] & 0xff);
            }
            else {
                var u = this.temp[i - 2];
                var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);
                u = this.temp[i - 15];
                var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);
                this.temp[i] =
                    ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);
            }
            var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^
                ((state4 >>> 11) | (state4 << 21)) ^
                ((state4 >>> 25) | (state4 << 7))) +
                ((state4 & state5) ^ (~state4 & state6))) |
                0) +
                ((state7 + ((constants_1.KEY[i] + this.temp[i]) | 0)) | 0)) |
                0;
            var t2 = ((((state0 >>> 2) | (state0 << 30)) ^
                ((state0 >>> 13) | (state0 << 19)) ^
                ((state0 >>> 22) | (state0 << 10))) +
                ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |
                0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = (state3 + t1) | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = (t1 + t2) | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}());
exports.RawSha256 = RawSha256;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
/**
 * @internal
 */
exports.BLOCK_SIZE = 64;
/**
 * @internal
 */
exports.DIGEST_LENGTH = 32;
/**
 * @internal
 */
exports.KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/**
 * @internal
 */
exports.INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
/**
 * @internal
 */
exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNVLFFBQUEsVUFBVSxHQUFXLEVBQUUsQ0FBQztBQUVyQzs7R0FFRztBQUNVLFFBQUEsYUFBYSxHQUFXLEVBQUUsQ0FBQztBQUV4Qzs7R0FFRztBQUNVLFFBQUEsR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDO0lBQ2pDLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7Q0FDWCxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNVLFFBQUEsSUFBSSxHQUFHO0lBQ2xCLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0NBQ1gsQ0FBQztBQUVGOztHQUVHO0FBQ1UsUUFBQSxtQkFBbUIsR0FBRyxTQUFBLENBQUMsRUFBSSxFQUFFLENBQUEsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQkxPQ0tfU0laRTogbnVtYmVyID0gNjQ7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBESUdFU1RfTEVOR1RIOiBudW1iZXIgPSAzMjtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFWSA9IG5ldyBVaW50MzJBcnJheShbXG4gIDB4NDI4YTJmOTgsXG4gIDB4NzEzNzQ0OTEsXG4gIDB4YjVjMGZiY2YsXG4gIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsXG4gIDB4NTlmMTExZjEsXG4gIDB4OTIzZjgyYTQsXG4gIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsXG4gIDB4MTI4MzViMDEsXG4gIDB4MjQzMTg1YmUsXG4gIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsXG4gIDB4ODBkZWIxZmUsXG4gIDB4OWJkYzA2YTcsXG4gIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsXG4gIDB4ZWZiZTQ3ODYsXG4gIDB4MGZjMTlkYzYsXG4gIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsXG4gIDB4NGE3NDg0YWEsXG4gIDB4NWNiMGE5ZGMsXG4gIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsXG4gIDB4YTgzMWM2NmQsXG4gIDB4YjAwMzI3YzgsXG4gIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsXG4gIDB4ZDVhNzkxNDcsXG4gIDB4MDZjYTYzNTEsXG4gIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsXG4gIDB4MmUxYjIxMzgsXG4gIDB4NGQyYzZkZmMsXG4gIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsXG4gIDB4NzY2YTBhYmIsXG4gIDB4ODFjMmM5MmUsXG4gIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsXG4gIDB4YTgxYTY2NGIsXG4gIDB4YzI0YjhiNzAsXG4gIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksXG4gIDB4ZDY5OTA2MjQsXG4gIDB4ZjQwZTM1ODUsXG4gIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsXG4gIDB4MWUzNzZjMDgsXG4gIDB4Mjc0ODc3NGMsXG4gIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsXG4gIDB4NGVkOGFhNGEsXG4gIDB4NWI5Y2NhNGYsXG4gIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsXG4gIDB4NzhhNTYzNmYsXG4gIDB4ODRjODc4MTQsXG4gIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsXG4gIDB4YTQ1MDZjZWIsXG4gIDB4YmVmOWEzZjcsXG4gIDB4YzY3MTc4ZjJcbl0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgSU5JVCA9IFtcbiAgMHg2YTA5ZTY2NyxcbiAgMHhiYjY3YWU4NSxcbiAgMHgzYzZlZjM3MixcbiAgMHhhNTRmZjUzYSxcbiAgMHg1MTBlNTI3ZixcbiAgMHg5YjA1Njg4YyxcbiAgMHgxZjgzZDlhYixcbiAgMHg1YmUwY2QxOVxuXTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9IQVNIQUJMRV9MRU5HVEggPSAyICoqIDUzIC0gMTtcbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js");
(0, tslib_1.__exportStar)(__webpack_require__(/*! ./jsSha256 */ "./node_modules/@aws-crypto/sha256-js/build/jsSha256.js"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vanNTaGEyNTZcIjtcbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/jsSha256.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/jsSha256.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Sha256 = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js");
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@aws-crypto/sha256-js/build/constants.js");
var RawSha256_1 = __webpack_require__(/*! ./RawSha256 */ "./node_modules/@aws-crypto/sha256-js/build/RawSha256.js");
var util_1 = __webpack_require__(/*! @aws-crypto/util */ "./node_modules/@aws-crypto/util/build/index.js");
var Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for (var i = 0; i < inner.byteLength; i++) {
                inner[i] = 0;
            }
        }
    }
    Sha256.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
            return;
        }
        try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
        }
        catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */
    Sha256.prototype.digestSync = function () {
        if (this.error) {
            throw this.error;
        }
        if (this.outer) {
            if (!this.outer.finished) {
                this.outer.update(this.hash.digest());
            }
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */
    Sha256.prototype.digest = function () {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, this.digestSync()];
            });
        });
    };
    return Sha256;
}());
exports.Sha256 = Sha256;
function bufferFromSecret(secret) {
    var input = (0, util_1.convertToBuffer)(secret);
    if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNTaGEyNTYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvanNTaGEyNTYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHlDQUF5QztBQUN6Qyx5Q0FBd0M7QUFFeEMseUNBQWdFO0FBRWhFO0lBS0UsZ0JBQVksTUFBbUI7UUFKZCxTQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7UUFLdEMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1lBQzdCLElBQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLElBQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLHNCQUFVLENBQUMsQ0FBQztZQUN6QyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxzQkFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2dCQUNqQixLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2FBQ2xCO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFekIscUNBQXFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7U0FDRjtJQUNILENBQUM7SUFFRCx1QkFBTSxHQUFOLFVBQU8sTUFBa0I7UUFDdkIsSUFBSSxJQUFBLGtCQUFXLEVBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQVUsR0FBVjtRQUNFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNsQjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO1lBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzVCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0csdUJBQU0sR0FBWjs7O2dCQUNFLHNCQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBQzs7O0tBQzFCO0lBQ0gsYUFBQztBQUFELENBQUMsQUFsRUQsSUFrRUM7QUFsRVksd0JBQU07QUFvRW5CLFNBQVMsZ0JBQWdCLENBQUMsTUFBa0I7SUFDMUMsSUFBSSxLQUFLLEdBQUcsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBDLElBQUksS0FBSyxDQUFDLFVBQVUsR0FBRyxzQkFBVSxFQUFFO1FBQ2pDLElBQU0sVUFBVSxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1FBQ25DLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUM3QjtJQUVELElBQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLHNCQUFVLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTE9DS19TSVpFIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBSYXdTaGEyNTYgfSBmcm9tIFwiLi9SYXdTaGEyNTZcIjtcbmltcG9ydCB7IEhhc2gsIFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhLCBjb252ZXJ0VG9CdWZmZXIgfSBmcm9tIFwiQGF3cy1jcnlwdG8vdXRpbFwiO1xuXG5leHBvcnQgY2xhc3MgU2hhMjU2IGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFzaCA9IG5ldyBSYXdTaGEyNTYoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRlcj86IFJhd1NoYTI1NjtcbiAgcHJpdmF0ZSBlcnJvcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0KSB7XG4gICAgICB0aGlzLm91dGVyID0gbmV3IFJhd1NoYTI1NigpO1xuICAgICAgY29uc3QgaW5uZXIgPSBidWZmZXJGcm9tU2VjcmV0KHNlY3JldCk7XG4gICAgICBjb25zdCBvdXRlciA9IG5ldyBVaW50OEFycmF5KEJMT0NLX1NJWkUpO1xuICAgICAgb3V0ZXIuc2V0KGlubmVyKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBCTE9DS19TSVpFOyBpKyspIHtcbiAgICAgICAgaW5uZXJbaV0gXj0gMHgzNjtcbiAgICAgICAgb3V0ZXJbaV0gXj0gMHg1YztcbiAgICAgIH1cblxuICAgICAgdGhpcy5oYXNoLnVwZGF0ZShpbm5lcik7XG4gICAgICB0aGlzLm91dGVyLnVwZGF0ZShvdXRlcik7XG5cbiAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgY29waWVkIGtleSBpbiBtZW1vcnlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlubmVyW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkgfHwgdGhpcy5lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmhhc2gudXBkYXRlKGNvbnZlcnRUb0J1ZmZlcih0b0hhc2gpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yID0gZTtcbiAgICB9XG4gIH1cblxuICAvKiBUaGlzIHN5bmNocm9ub3VzIG1ldGhvZCBrZWVwcyBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggdGhlIHYyIGF3cy1zZGsuXG4gICAqL1xuICBkaWdlc3RTeW5jKCk6IFVpbnQ4QXJyYXkge1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLmVycm9yO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm91dGVyKSB7XG4gICAgICBpZiAoIXRoaXMub3V0ZXIuZmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5oYXNoLmRpZ2VzdCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaGFzaC5kaWdlc3QoKTtcbiAgfVxuXG4gIC8qIFRoZSB1bmRlcmx5aW5nIGRpZ2VzdCBtZXRob2QgaGVyZSBpcyBzeW5jaHJvbm91cy5cbiAgICogVG8ga2VlcCB0aGUgc2FtZSBpbnRlcmZhY2Ugd2l0aCB0aGUgb3RoZXIgaGFzaCBmdW5jdGlvbnNcbiAgICogdGhlIGRlZmF1bHQgaXMgdG8gZXhwb3NlIHRoaXMgYXMgYW4gYXN5bmMgbWV0aG9kLlxuICAgKiBIb3dldmVyLCBpdCBjYW4gc29tZXRpbWVzIGJlIHVzZWZ1bCB0byBoYXZlIGEgc3luYyBtZXRob2QuXG4gICAqL1xuICBhc3luYyBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMuZGlnZXN0U3luYygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckZyb21TZWNyZXQoc2VjcmV0OiBTb3VyY2VEYXRhKTogVWludDhBcnJheSB7XG4gIGxldCBpbnB1dCA9IGNvbnZlcnRUb0J1ZmZlcihzZWNyZXQpO1xuXG4gIGlmIChpbnB1dC5ieXRlTGVuZ3RoID4gQkxPQ0tfU0laRSkge1xuICAgIGNvbnN0IGJ1ZmZlckhhc2ggPSBuZXcgUmF3U2hhMjU2KCk7XG4gICAgYnVmZmVySGFzaC51cGRhdGUoaW5wdXQpO1xuICAgIGlucHV0ID0gYnVmZmVySGFzaC5kaWdlc3QoKTtcbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KEJMT0NLX1NJWkUpO1xuICBidWZmZXIuc2V0KGlucHV0KTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/supports-web-crypto/build/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-crypto/supports-web-crypto/build/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./supportsWebCrypto */ "./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3VwcG9ydHNXZWJDcnlwdG9cIjtcbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js");
var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) &&
        typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return (subtle &&
        subtleCryptoMethods.every(function (methodName) { return typeof subtle[methodName] === "function"; }));
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!supportsSubtleCrypto(subtle))
                        return [2 /*return*/, false];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
                case 2:
                    key = _b.sent();
                    return [4 /*yield*/, subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [2 /*return*/, zeroByteAuthTag.byteLength === 16];
                case 4:
                    _a = _b.sent();
                    return [2 /*return*/, false];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydHNXZWJDcnlwdG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3VwcG9ydHNXZWJDcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQVVBLElBQU0sbUJBQW1CLEdBQThCO0lBQ3JELFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxhQUFhO0lBQ2IsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0NBQ1QsQ0FBQztBQUVGLFNBQWdCLGlCQUFpQixDQUFDLE1BQWM7SUFDOUMsSUFDRSxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7UUFDNUIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQ3hDO1FBQ1EsSUFBQSxNQUFNLEdBQUssTUFBTSxDQUFDLE1BQU0sT0FBbEIsQ0FBbUI7UUFFakMsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVhELDhDQVdDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBYztJQUNqRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzNELElBQUEsZUFBZSxHQUFLLE1BQU0sQ0FBQyxNQUFNLGdCQUFsQixDQUFtQjtRQUUxQyxPQUFPLE9BQU8sZUFBZSxLQUFLLFVBQVUsQ0FBQztLQUM5QztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVJELG9EQVFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBb0I7SUFDdkQsT0FBTyxDQUNMLE1BQU07UUFDTixtQkFBbUIsQ0FBQyxLQUFLLENBQ3ZCLFVBQUEsVUFBVSxJQUFJLE9BQUEsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssVUFBVSxFQUF4QyxDQUF3QyxDQUN2RCxDQUNGLENBQUM7QUFDSixDQUFDO0FBUEQsb0RBT0M7QUFFRCxTQUFzQixtQkFBbUIsQ0FBQyxNQUFvQjs7Ozs7O29CQUM1RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO3dCQUFFLHNCQUFPLEtBQUssRUFBQzs7OztvQkFFbEMscUJBQU0sTUFBTSxDQUFDLFdBQVcsQ0FDbEMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFDaEMsS0FBSyxFQUNMLENBQUMsU0FBUyxDQUFDLENBQ1osRUFBQTs7b0JBSkssR0FBRyxHQUFHLFNBSVg7b0JBQ3VCLHFCQUFNLE1BQU0sQ0FBQyxPQUFPLENBQzFDOzRCQUNFLElBQUksRUFBRSxTQUFTOzRCQUNmLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzdCLGNBQWMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3pDLFNBQVMsRUFBRSxHQUFHO3lCQUNmLEVBQ0QsR0FBRyxFQUNILElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUNsQixFQUFBOztvQkFUSyxlQUFlLEdBQUcsU0FTdkI7b0JBQ0Qsc0JBQU8sZUFBZSxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUM7OztvQkFFekMsc0JBQU8sS0FBSyxFQUFDOzs7OztDQUVoQjtBQXRCRCxrREFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFN1YnRsZUNyeXB0b01ldGhvZCA9XG4gIHwgXCJkZWNyeXB0XCJcbiAgfCBcImRpZ2VzdFwiXG4gIHwgXCJlbmNyeXB0XCJcbiAgfCBcImV4cG9ydEtleVwiXG4gIHwgXCJnZW5lcmF0ZUtleVwiXG4gIHwgXCJpbXBvcnRLZXlcIlxuICB8IFwic2lnblwiXG4gIHwgXCJ2ZXJpZnlcIjtcblxuY29uc3Qgc3VidGxlQ3J5cHRvTWV0aG9kczogQXJyYXk8U3VidGxlQ3J5cHRvTWV0aG9kPiA9IFtcbiAgXCJkZWNyeXB0XCIsXG4gIFwiZGlnZXN0XCIsXG4gIFwiZW5jcnlwdFwiLFxuICBcImV4cG9ydEtleVwiLFxuICBcImdlbmVyYXRlS2V5XCIsXG4gIFwiaW1wb3J0S2V5XCIsXG4gIFwic2lnblwiLFxuICBcInZlcmlmeVwiXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNXZWJDcnlwdG8od2luZG93OiBXaW5kb3cpOiBib29sZWFuIHtcbiAgaWYgKFxuICAgIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdykgJiZcbiAgICB0eXBlb2Ygd2luZG93LmNyeXB0by5zdWJ0bGUgPT09IFwib2JqZWN0XCJcbiAgKSB7XG4gICAgY29uc3QgeyBzdWJ0bGUgfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdzogV2luZG93KTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB3aW5kb3cuY3J5cHRvID09PSBcIm9iamVjdFwiKSB7XG4gICAgY29uc3QgeyBnZXRSYW5kb21WYWx1ZXMgfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gdHlwZW9mIGdldFJhbmRvbVZhbHVlcyA9PT0gXCJmdW5jdGlvblwiO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlOiBTdWJ0bGVDcnlwdG8pIHtcbiAgcmV0dXJuIChcbiAgICBzdWJ0bGUgJiZcbiAgICBzdWJ0bGVDcnlwdG9NZXRob2RzLmV2ZXJ5KFxuICAgICAgbWV0aG9kTmFtZSA9PiB0eXBlb2Ygc3VidGxlW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCJcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdXBwb3J0c1plcm9CeXRlR0NNKHN1YnRsZTogU3VidGxlQ3J5cHRvKSB7XG4gIGlmICghc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlKSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IHN1YnRsZS5nZW5lcmF0ZUtleShcbiAgICAgIHsgbmFtZTogXCJBRVMtR0NNXCIsIGxlbmd0aDogMTI4IH0sXG4gICAgICBmYWxzZSxcbiAgICAgIFtcImVuY3J5cHRcIl1cbiAgICApO1xuICAgIGNvbnN0IHplcm9CeXRlQXV0aFRhZyA9IGF3YWl0IHN1YnRsZS5lbmNyeXB0KFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkFFUy1HQ01cIixcbiAgICAgICAgaXY6IG5ldyBVaW50OEFycmF5KEFycmF5KDEyKSksXG4gICAgICAgIGFkZGl0aW9uYWxEYXRhOiBuZXcgVWludDhBcnJheShBcnJheSgxNikpLFxuICAgICAgICB0YWdMZW5ndGg6IDEyOFxuICAgICAgfSxcbiAgICAgIGtleSxcbiAgICAgIG5ldyBVaW50OEFycmF5KDApXG4gICAgKTtcbiAgICByZXR1cm4gemVyb0J5dGVBdXRoVGFnLmJ5dGVMZW5ndGggPT09IDE2O1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/convertToBuffer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/convertToBuffer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convertToBuffer = void 0;
var util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from
    ? function (input) { return Buffer.from(input, "utf8"); }
    : util_utf8_browser_1.fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array)
        return data;
    if (typeof data === "string") {
        return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
}
exports.convertToBuffer = convertToBuffer;
//# sourceMappingURL=convertToBuffer.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
var convertToBuffer_1 = __webpack_require__(/*! ./convertToBuffer */ "./node_modules/@aws-crypto/util/build/convertToBuffer.js");
Object.defineProperty(exports, "convertToBuffer", ({ enumerable: true, get: function () { return convertToBuffer_1.convertToBuffer; } }));
var isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ "./node_modules/@aws-crypto/util/build/isEmptyData.js");
Object.defineProperty(exports, "isEmptyData", ({ enumerable: true, get: function () { return isEmptyData_1.isEmptyData; } }));
var numToUint8_1 = __webpack_require__(/*! ./numToUint8 */ "./node_modules/@aws-crypto/util/build/numToUint8.js");
Object.defineProperty(exports, "numToUint8", ({ enumerable: true, get: function () { return numToUint8_1.numToUint8; } }));
var uint32ArrayFrom_1 = __webpack_require__(/*! ./uint32ArrayFrom */ "./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js");
Object.defineProperty(exports, "uint32ArrayFrom", ({ enumerable: true, get: function () { return uint32ArrayFrom_1.uint32ArrayFrom; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/isEmptyData.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/isEmptyData.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") {
        return data.length === 0;
    }
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;
//# sourceMappingURL=isEmptyData.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/numToUint8.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/numToUint8.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.numToUint8 = void 0;
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff,
    ]);
}
exports.numToUint8 = numToUint8;
//# sourceMappingURL=numToUint8.js.map

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.uint32ArrayFrom = void 0;
// IE 11 does not support Array.from, so we do it manually
function uint32ArrayFrom(a_lookUpTable) {
    if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
            return_array[a_index] = a_lookUpTable[a_index];
            a_index += 1;
        }
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}
exports.uint32ArrayFrom = uint32ArrayFrom;
//# sourceMappingURL=uint32ArrayFrom.js.map

/***/ }),

/***/ "./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blobReader": () => (/* binding */ blobReader)
/* harmony export */ });
function blobReader(blob, onChunk, chunkSize = 1024 * 1024) {
    return new Promise((resolve, reject) => {
        const fileReader = new FileReader();
        fileReader.addEventListener("error", reject);
        fileReader.addEventListener("abort", reject);
        const size = blob.size;
        let totalBytesRead = 0;
        function read() {
            if (totalBytesRead >= size) {
                resolve();
                return;
            }
            fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
        }
        fileReader.addEventListener("load", (event) => {
            const result = event.target.result;
            onChunk(new Uint8Array(result));
            totalBytesRead += result.byteLength;
            read();
        });
        read();
    });
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CognitoIdentity": () => (/* binding */ CognitoIdentity)
/* harmony export */ });
/* harmony import */ var _CognitoIdentityClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitoIdentityClient */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js");
/* harmony import */ var _commands_CreateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands/CreateIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js");
/* harmony import */ var _commands_DeleteIdentitiesCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands/DeleteIdentitiesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js");
/* harmony import */ var _commands_DeleteIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commands/DeleteIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js");
/* harmony import */ var _commands_DescribeIdentityCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands/DescribeIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js");
/* harmony import */ var _commands_DescribeIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/DescribeIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js");
/* harmony import */ var _commands_GetCredentialsForIdentityCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/GetCredentialsForIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js");
/* harmony import */ var _commands_GetIdCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/GetIdCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js");
/* harmony import */ var _commands_GetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/GetIdentityPoolRolesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js");
/* harmony import */ var _commands_GetOpenIdTokenCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/GetOpenIdTokenCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js");
/* harmony import */ var _commands_GetOpenIdTokenForDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/GetOpenIdTokenForDeveloperIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js");
/* harmony import */ var _commands_GetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commands/GetPrincipalTagAttributeMapCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js");
/* harmony import */ var _commands_ListIdentitiesCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commands/ListIdentitiesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js");
/* harmony import */ var _commands_ListIdentityPoolsCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./commands/ListIdentityPoolsCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js");
/* harmony import */ var _commands_ListTagsForResourceCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./commands/ListTagsForResourceCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js");
/* harmony import */ var _commands_LookupDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./commands/LookupDeveloperIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js");
/* harmony import */ var _commands_MergeDeveloperIdentitiesCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./commands/MergeDeveloperIdentitiesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js");
/* harmony import */ var _commands_SetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./commands/SetIdentityPoolRolesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js");
/* harmony import */ var _commands_SetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./commands/SetPrincipalTagAttributeMapCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js");
/* harmony import */ var _commands_TagResourceCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./commands/TagResourceCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js");
/* harmony import */ var _commands_UnlinkDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./commands/UnlinkDeveloperIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js");
/* harmony import */ var _commands_UnlinkIdentityCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./commands/UnlinkIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js");
/* harmony import */ var _commands_UntagResourceCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./commands/UntagResourceCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js");
/* harmony import */ var _commands_UpdateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./commands/UpdateIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js");
























class CognitoIdentity extends _CognitoIdentityClient__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityClient {
    createIdentityPool(args, optionsOrCb, cb) {
        const command = new _commands_CreateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_1__.CreateIdentityPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteIdentities(args, optionsOrCb, cb) {
        const command = new _commands_DeleteIdentitiesCommand__WEBPACK_IMPORTED_MODULE_2__.DeleteIdentitiesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteIdentityPool(args, optionsOrCb, cb) {
        const command = new _commands_DeleteIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_3__.DeleteIdentityPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIdentity(args, optionsOrCb, cb) {
        const command = new _commands_DescribeIdentityCommand__WEBPACK_IMPORTED_MODULE_4__.DescribeIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIdentityPool(args, optionsOrCb, cb) {
        const command = new _commands_DescribeIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_5__.DescribeIdentityPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCredentialsForIdentity(args, optionsOrCb, cb) {
        const command = new _commands_GetCredentialsForIdentityCommand__WEBPACK_IMPORTED_MODULE_6__.GetCredentialsForIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getId(args, optionsOrCb, cb) {
        const command = new _commands_GetIdCommand__WEBPACK_IMPORTED_MODULE_7__.GetIdCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIdentityPoolRoles(args, optionsOrCb, cb) {
        const command = new _commands_GetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_8__.GetIdentityPoolRolesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getOpenIdToken(args, optionsOrCb, cb) {
        const command = new _commands_GetOpenIdTokenCommand__WEBPACK_IMPORTED_MODULE_9__.GetOpenIdTokenCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getOpenIdTokenForDeveloperIdentity(args, optionsOrCb, cb) {
        const command = new _commands_GetOpenIdTokenForDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_10__.GetOpenIdTokenForDeveloperIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPrincipalTagAttributeMap(args, optionsOrCb, cb) {
        const command = new _commands_GetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_11__.GetPrincipalTagAttributeMapCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listIdentities(args, optionsOrCb, cb) {
        const command = new _commands_ListIdentitiesCommand__WEBPACK_IMPORTED_MODULE_12__.ListIdentitiesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listIdentityPools(args, optionsOrCb, cb) {
        const command = new _commands_ListIdentityPoolsCommand__WEBPACK_IMPORTED_MODULE_13__.ListIdentityPoolsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listTagsForResource(args, optionsOrCb, cb) {
        const command = new _commands_ListTagsForResourceCommand__WEBPACK_IMPORTED_MODULE_14__.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    lookupDeveloperIdentity(args, optionsOrCb, cb) {
        const command = new _commands_LookupDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_15__.LookupDeveloperIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    mergeDeveloperIdentities(args, optionsOrCb, cb) {
        const command = new _commands_MergeDeveloperIdentitiesCommand__WEBPACK_IMPORTED_MODULE_16__.MergeDeveloperIdentitiesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    setIdentityPoolRoles(args, optionsOrCb, cb) {
        const command = new _commands_SetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_17__.SetIdentityPoolRolesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    setPrincipalTagAttributeMap(args, optionsOrCb, cb) {
        const command = new _commands_SetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_18__.SetPrincipalTagAttributeMapCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    tagResource(args, optionsOrCb, cb) {
        const command = new _commands_TagResourceCommand__WEBPACK_IMPORTED_MODULE_19__.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    unlinkDeveloperIdentity(args, optionsOrCb, cb) {
        const command = new _commands_UnlinkDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_20__.UnlinkDeveloperIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    unlinkIdentity(args, optionsOrCb, cb) {
        const command = new _commands_UnlinkIdentityCommand__WEBPACK_IMPORTED_MODULE_21__.UnlinkIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    untagResource(args, optionsOrCb, cb) {
        const command = new _commands_UntagResourceCommand__WEBPACK_IMPORTED_MODULE_22__.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateIdentityPool(args, optionsOrCb, cb) {
        const command = new _commands_UpdateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_23__.UpdateIdentityPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CognitoIdentityClient": () => (/* binding */ CognitoIdentityClient)
/* harmony export */ });
/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/config-resolver */ "./node_modules/@aws-sdk/config-resolver/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-content-length */ "./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */ "./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-logger */ "./node_modules/@aws-sdk/middleware-logger/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */ "./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ "./node_modules/@aws-sdk/middleware-retry/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./endpoint/EndpointParameters */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/EndpointParameters.js");
/* harmony import */ var _runtimeConfig__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./runtimeConfig */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.browser.js");












class CognitoIdentityClient extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_9__.Client {
    constructor(configuration) {
        const _config_0 = (0,_runtimeConfig__WEBPACK_IMPORTED_MODULE_10__.getRuntimeConfig)(configuration);
        const _config_1 = (0,_endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_11__.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0,_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__.resolveRegionConfig)(_config_1);
        const _config_3 = (0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_2__.resolveEndpointConfig)(_config_2);
        const _config_4 = (0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.resolveRetryConfig)(_config_3);
        const _config_5 = (0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_3__.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_7__.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_8__.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_6__.getRetryPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_1__.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_3__.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_4__.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_5__.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_8__.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateIdentityPoolCommand": () => (/* binding */ CreateIdentityPoolCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class CreateIdentityPoolCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CreateIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "CreateIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateIdentityPoolInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.IdentityPoolFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1CreateIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1CreateIdentityPoolCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteIdentitiesCommand": () => (/* binding */ DeleteIdentitiesCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class DeleteIdentitiesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteIdentitiesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DeleteIdentitiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteIdentitiesInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteIdentitiesResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1DeleteIdentitiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1DeleteIdentitiesCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteIdentityPoolCommand": () => (/* binding */ DeleteIdentityPoolCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class DeleteIdentityPoolCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DeleteIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteIdentityPoolInputFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1DeleteIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1DeleteIdentityPoolCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DescribeIdentityCommand": () => (/* binding */ DescribeIdentityCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class DescribeIdentityCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DescribeIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DescribeIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DescribeIdentityInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.IdentityDescriptionFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1DescribeIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1DescribeIdentityCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DescribeIdentityPoolCommand": () => (/* binding */ DescribeIdentityPoolCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class DescribeIdentityPoolCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DescribeIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DescribeIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DescribeIdentityPoolInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.IdentityPoolFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1DescribeIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1DescribeIdentityPoolCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetCredentialsForIdentityCommand": () => (/* binding */ GetCredentialsForIdentityCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");





class GetCredentialsForIdentityCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetCredentialsForIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetCredentialsForIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetCredentialsForIdentityInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetCredentialsForIdentityResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.serializeAws_json1_1GetCredentialsForIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_json1_1GetCredentialsForIdentityCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetIdCommand": () => (/* binding */ GetIdCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");





class GetIdCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetIdCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetIdCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetIdInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetIdResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.serializeAws_json1_1GetIdCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_json1_1GetIdCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetIdentityPoolRolesCommand": () => (/* binding */ GetIdentityPoolRolesCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class GetIdentityPoolRolesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetIdentityPoolRolesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetIdentityPoolRolesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetIdentityPoolRolesInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetIdentityPoolRolesResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1GetIdentityPoolRolesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1GetIdentityPoolRolesCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetOpenIdTokenCommand": () => (/* binding */ GetOpenIdTokenCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");





class GetOpenIdTokenCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetOpenIdTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetOpenIdTokenCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetOpenIdTokenInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetOpenIdTokenResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.serializeAws_json1_1GetOpenIdTokenCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_json1_1GetOpenIdTokenCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityCommand": () => (/* binding */ GetOpenIdTokenForDeveloperIdentityCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class GetOpenIdTokenForDeveloperIdentityCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetOpenIdTokenForDeveloperIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetPrincipalTagAttributeMapCommand": () => (/* binding */ GetPrincipalTagAttributeMapCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class GetPrincipalTagAttributeMapCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetPrincipalTagAttributeMapCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetPrincipalTagAttributeMapCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetPrincipalTagAttributeMapInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetPrincipalTagAttributeMapResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1GetPrincipalTagAttributeMapCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1GetPrincipalTagAttributeMapCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListIdentitiesCommand": () => (/* binding */ ListIdentitiesCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class ListIdentitiesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListIdentitiesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "ListIdentitiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListIdentitiesInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListIdentitiesResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1ListIdentitiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1ListIdentitiesCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListIdentityPoolsCommand": () => (/* binding */ ListIdentityPoolsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class ListIdentityPoolsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListIdentityPoolsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "ListIdentityPoolsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListIdentityPoolsInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListIdentityPoolsResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1ListIdentityPoolsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1ListIdentityPoolsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListTagsForResourceCommand": () => (/* binding */ ListTagsForResourceCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class ListTagsForResourceCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListTagsForResourceInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListTagsForResourceResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LookupDeveloperIdentityCommand": () => (/* binding */ LookupDeveloperIdentityCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class LookupDeveloperIdentityCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, LookupDeveloperIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "LookupDeveloperIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.LookupDeveloperIdentityInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.LookupDeveloperIdentityResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1LookupDeveloperIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1LookupDeveloperIdentityCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MergeDeveloperIdentitiesCommand": () => (/* binding */ MergeDeveloperIdentitiesCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class MergeDeveloperIdentitiesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, MergeDeveloperIdentitiesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "MergeDeveloperIdentitiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.MergeDeveloperIdentitiesInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.MergeDeveloperIdentitiesResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1MergeDeveloperIdentitiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1MergeDeveloperIdentitiesCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetIdentityPoolRolesCommand": () => (/* binding */ SetIdentityPoolRolesCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class SetIdentityPoolRolesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, SetIdentityPoolRolesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "SetIdentityPoolRolesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.SetIdentityPoolRolesInputFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1SetIdentityPoolRolesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1SetIdentityPoolRolesCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetPrincipalTagAttributeMapCommand": () => (/* binding */ SetPrincipalTagAttributeMapCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class SetPrincipalTagAttributeMapCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, SetPrincipalTagAttributeMapCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "SetPrincipalTagAttributeMapCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.SetPrincipalTagAttributeMapInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.SetPrincipalTagAttributeMapResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1SetPrincipalTagAttributeMapCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1SetPrincipalTagAttributeMapCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TagResourceCommand": () => (/* binding */ TagResourceCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class TagResourceCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.TagResourceInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.TagResourceResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1TagResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1TagResourceCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnlinkDeveloperIdentityCommand": () => (/* binding */ UnlinkDeveloperIdentityCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class UnlinkDeveloperIdentityCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UnlinkDeveloperIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UnlinkDeveloperIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.UnlinkDeveloperIdentityInputFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1UnlinkDeveloperIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1UnlinkDeveloperIdentityCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnlinkIdentityCommand": () => (/* binding */ UnlinkIdentityCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");





class UnlinkIdentityCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UnlinkIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UnlinkIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.UnlinkIdentityInputFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.serializeAws_json1_1UnlinkIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_json1_1UnlinkIdentityCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UntagResourceCommand": () => (/* binding */ UntagResourceCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class UntagResourceCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.UntagResourceInputFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.UntagResourceResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1UntagResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1UntagResourceCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UpdateIdentityPoolCommand": () => (/* binding */ UpdateIdentityPoolCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_json1_1 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js");






class UpdateIdentityPoolCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UpdateIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_2__.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UpdateIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.IdentityPoolFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.IdentityPoolFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.serializeAws_json1_1UpdateIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_json1_1__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_json1_1UpdateIdentityPoolCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateIdentityPoolCommand": () => (/* reexport safe */ _CreateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_0__.CreateIdentityPoolCommand),
/* harmony export */   "DeleteIdentitiesCommand": () => (/* reexport safe */ _DeleteIdentitiesCommand__WEBPACK_IMPORTED_MODULE_1__.DeleteIdentitiesCommand),
/* harmony export */   "DeleteIdentityPoolCommand": () => (/* reexport safe */ _DeleteIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_2__.DeleteIdentityPoolCommand),
/* harmony export */   "DescribeIdentityCommand": () => (/* reexport safe */ _DescribeIdentityCommand__WEBPACK_IMPORTED_MODULE_3__.DescribeIdentityCommand),
/* harmony export */   "DescribeIdentityPoolCommand": () => (/* reexport safe */ _DescribeIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_4__.DescribeIdentityPoolCommand),
/* harmony export */   "GetCredentialsForIdentityCommand": () => (/* reexport safe */ _GetCredentialsForIdentityCommand__WEBPACK_IMPORTED_MODULE_5__.GetCredentialsForIdentityCommand),
/* harmony export */   "GetIdCommand": () => (/* reexport safe */ _GetIdCommand__WEBPACK_IMPORTED_MODULE_6__.GetIdCommand),
/* harmony export */   "GetIdentityPoolRolesCommand": () => (/* reexport safe */ _GetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_7__.GetIdentityPoolRolesCommand),
/* harmony export */   "GetOpenIdTokenCommand": () => (/* reexport safe */ _GetOpenIdTokenCommand__WEBPACK_IMPORTED_MODULE_8__.GetOpenIdTokenCommand),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityCommand": () => (/* reexport safe */ _GetOpenIdTokenForDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_9__.GetOpenIdTokenForDeveloperIdentityCommand),
/* harmony export */   "GetPrincipalTagAttributeMapCommand": () => (/* reexport safe */ _GetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_10__.GetPrincipalTagAttributeMapCommand),
/* harmony export */   "ListIdentitiesCommand": () => (/* reexport safe */ _ListIdentitiesCommand__WEBPACK_IMPORTED_MODULE_11__.ListIdentitiesCommand),
/* harmony export */   "ListIdentityPoolsCommand": () => (/* reexport safe */ _ListIdentityPoolsCommand__WEBPACK_IMPORTED_MODULE_12__.ListIdentityPoolsCommand),
/* harmony export */   "ListTagsForResourceCommand": () => (/* reexport safe */ _ListTagsForResourceCommand__WEBPACK_IMPORTED_MODULE_13__.ListTagsForResourceCommand),
/* harmony export */   "LookupDeveloperIdentityCommand": () => (/* reexport safe */ _LookupDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_14__.LookupDeveloperIdentityCommand),
/* harmony export */   "MergeDeveloperIdentitiesCommand": () => (/* reexport safe */ _MergeDeveloperIdentitiesCommand__WEBPACK_IMPORTED_MODULE_15__.MergeDeveloperIdentitiesCommand),
/* harmony export */   "SetIdentityPoolRolesCommand": () => (/* reexport safe */ _SetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_16__.SetIdentityPoolRolesCommand),
/* harmony export */   "SetPrincipalTagAttributeMapCommand": () => (/* reexport safe */ _SetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_17__.SetPrincipalTagAttributeMapCommand),
/* harmony export */   "TagResourceCommand": () => (/* reexport safe */ _TagResourceCommand__WEBPACK_IMPORTED_MODULE_18__.TagResourceCommand),
/* harmony export */   "UnlinkDeveloperIdentityCommand": () => (/* reexport safe */ _UnlinkDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_19__.UnlinkDeveloperIdentityCommand),
/* harmony export */   "UnlinkIdentityCommand": () => (/* reexport safe */ _UnlinkIdentityCommand__WEBPACK_IMPORTED_MODULE_20__.UnlinkIdentityCommand),
/* harmony export */   "UntagResourceCommand": () => (/* reexport safe */ _UntagResourceCommand__WEBPACK_IMPORTED_MODULE_21__.UntagResourceCommand),
/* harmony export */   "UpdateIdentityPoolCommand": () => (/* reexport safe */ _UpdateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_22__.UpdateIdentityPoolCommand)
/* harmony export */ });
/* harmony import */ var _CreateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CreateIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js");
/* harmony import */ var _DeleteIdentitiesCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DeleteIdentitiesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js");
/* harmony import */ var _DeleteIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DeleteIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js");
/* harmony import */ var _DescribeIdentityCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DescribeIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js");
/* harmony import */ var _DescribeIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DescribeIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js");
/* harmony import */ var _GetCredentialsForIdentityCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GetCredentialsForIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js");
/* harmony import */ var _GetIdCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GetIdCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js");
/* harmony import */ var _GetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./GetIdentityPoolRolesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js");
/* harmony import */ var _GetOpenIdTokenCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GetOpenIdTokenCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js");
/* harmony import */ var _GetOpenIdTokenForDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./GetOpenIdTokenForDeveloperIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js");
/* harmony import */ var _GetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./GetPrincipalTagAttributeMapCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js");
/* harmony import */ var _ListIdentitiesCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ListIdentitiesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js");
/* harmony import */ var _ListIdentityPoolsCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ListIdentityPoolsCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js");
/* harmony import */ var _ListTagsForResourceCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ListTagsForResourceCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js");
/* harmony import */ var _LookupDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./LookupDeveloperIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js");
/* harmony import */ var _MergeDeveloperIdentitiesCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./MergeDeveloperIdentitiesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js");
/* harmony import */ var _SetIdentityPoolRolesCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SetIdentityPoolRolesCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js");
/* harmony import */ var _SetPrincipalTagAttributeMapCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SetPrincipalTagAttributeMapCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js");
/* harmony import */ var _TagResourceCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./TagResourceCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js");
/* harmony import */ var _UnlinkDeveloperIdentityCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./UnlinkDeveloperIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js");
/* harmony import */ var _UnlinkIdentityCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./UnlinkIdentityCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js");
/* harmony import */ var _UntagResourceCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./UntagResourceCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js");
/* harmony import */ var _UpdateIdentityPoolCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./UpdateIdentityPoolCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js");

























/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/EndpointParameters.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/EndpointParameters.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveClientEndpointParameters": () => (/* binding */ resolveClientEndpointParameters)
/* harmony export */ });
const resolveClientEndpointParameters = (options) => {
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cognito-identity",
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/endpointResolver.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/endpointResolver.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultEndpointResolver": () => (/* binding */ defaultEndpointResolver)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-endpoints */ "./node_modules/@aws-sdk/util-endpoints/dist-es/index.js");
/* harmony import */ var _ruleset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ruleset */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/ruleset.js");


const defaultEndpointResolver = (endpointParams, context = {}) => {
    return (0,_aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.resolveEndpoint)(_ruleset__WEBPACK_IMPORTED_MODULE_1__.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger,
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/ruleset.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/ruleset.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ruleSet": () => (/* binding */ ruleSet)
/* harmony export */ });
const ruleSet = {
    version: "1.0",
    parameters: {
        Region: {
            builtIn: "AWS::Region",
            required: false,
            documentation: "The AWS region used to dispatch the request.",
            type: "String",
        },
        UseDualStack: {
            builtIn: "AWS::UseDualStack",
            required: true,
            default: false,
            documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
            type: "Boolean",
        },
        UseFIPS: {
            builtIn: "AWS::UseFIPS",
            required: true,
            default: false,
            documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
            type: "Boolean",
        },
        Endpoint: {
            builtIn: "SDK::Endpoint",
            required: false,
            documentation: "Override the endpoint used to send this request",
            type: "String",
        },
    },
    rules: [
        {
            conditions: [
                {
                    fn: "aws.partition",
                    argv: [
                        {
                            ref: "Region",
                        },
                    ],
                    assign: "PartitionResult",
                },
            ],
            type: "tree",
            rules: [
                {
                    conditions: [
                        {
                            fn: "isSet",
                            argv: [
                                {
                                    ref: "Endpoint",
                                },
                            ],
                        },
                        {
                            fn: "parseURL",
                            argv: [
                                {
                                    ref: "Endpoint",
                                },
                            ],
                            assign: "url",
                        },
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        {
                                            ref: "UseFIPS",
                                        },
                                        true,
                                    ],
                                },
                            ],
                            error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                            type: "error",
                        },
                        {
                            conditions: [],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [
                                        {
                                            fn: "booleanEquals",
                                            argv: [
                                                {
                                                    ref: "UseDualStack",
                                                },
                                                true,
                                            ],
                                        },
                                    ],
                                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    type: "error",
                                },
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: {
                                            ref: "Endpoint",
                                        },
                                        properties: {},
                                        headers: {},
                                    },
                                    type: "endpoint",
                                },
                            ],
                        },
                    ],
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseFIPS",
                                },
                                true,
                            ],
                        },
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseDualStack",
                                },
                                true,
                            ],
                        },
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult",
                                                },
                                                "supportsFIPS",
                                            ],
                                        },
                                    ],
                                },
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult",
                                                },
                                                "supportsDualStack",
                                            ],
                                        },
                                    ],
                                },
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: "https://cognito-identity-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: {},
                                        headers: {},
                                    },
                                    type: "endpoint",
                                },
                            ],
                        },
                        {
                            conditions: [],
                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                            type: "error",
                        },
                    ],
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseFIPS",
                                },
                                true,
                            ],
                        },
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult",
                                                },
                                                "supportsFIPS",
                                            ],
                                        },
                                    ],
                                },
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [],
                                            endpoint: {
                                                url: "https://cognito-identity-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: {},
                                                headers: {},
                                            },
                                            type: "endpoint",
                                        },
                                    ],
                                },
                            ],
                        },
                        {
                            conditions: [],
                            error: "FIPS is enabled but this partition does not support FIPS",
                            type: "error",
                        },
                    ],
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseDualStack",
                                },
                                true,
                            ],
                        },
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult",
                                                },
                                                "supportsDualStack",
                                            ],
                                        },
                                    ],
                                },
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: "https://cognito-identity.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: {},
                                        headers: {},
                                    },
                                    type: "endpoint",
                                },
                            ],
                        },
                        {
                            conditions: [],
                            error: "DualStack is enabled but this partition does not support DualStack",
                            type: "error",
                        },
                    ],
                },
                {
                    conditions: [],
                    endpoint: {
                        url: "https://cognito-identity.{Region}.{PartitionResult#dnsSuffix}",
                        properties: {},
                        headers: {},
                    },
                    type: "endpoint",
                },
            ],
        },
    ],
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AmbiguousRoleResolutionType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AmbiguousRoleResolutionType),
/* harmony export */   "CognitoIdentity": () => (/* reexport safe */ _CognitoIdentity__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentity),
/* harmony export */   "CognitoIdentityClient": () => (/* reexport safe */ _CognitoIdentityClient__WEBPACK_IMPORTED_MODULE_1__.CognitoIdentityClient),
/* harmony export */   "CognitoIdentityProviderFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CognitoIdentityProviderFilterSensitiveLog),
/* harmony export */   "CognitoIdentityServiceException": () => (/* reexport safe */ _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_5__.CognitoIdentityServiceException),
/* harmony export */   "ConcurrentModificationException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ConcurrentModificationException),
/* harmony export */   "CreateIdentityPoolCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CreateIdentityPoolCommand),
/* harmony export */   "CreateIdentityPoolInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "CredentialsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CredentialsFilterSensitiveLog),
/* harmony export */   "DeleteIdentitiesCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteIdentitiesCommand),
/* harmony export */   "DeleteIdentitiesInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteIdentitiesInputFilterSensitiveLog),
/* harmony export */   "DeleteIdentitiesResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "DeleteIdentityPoolCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteIdentityPoolCommand),
/* harmony export */   "DeleteIdentityPoolInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "DescribeIdentityCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DescribeIdentityCommand),
/* harmony export */   "DescribeIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DescribeIdentityInputFilterSensitiveLog),
/* harmony export */   "DescribeIdentityPoolCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DescribeIdentityPoolCommand),
/* harmony export */   "DescribeIdentityPoolInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DescribeIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "DeveloperUserAlreadyRegisteredException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeveloperUserAlreadyRegisteredException),
/* harmony export */   "ErrorCode": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ErrorCode),
/* harmony export */   "ExternalServiceException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExternalServiceException),
/* harmony export */   "GetCredentialsForIdentityCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetCredentialsForIdentityCommand),
/* harmony export */   "GetCredentialsForIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetCredentialsForIdentityInputFilterSensitiveLog),
/* harmony export */   "GetCredentialsForIdentityResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetCredentialsForIdentityResponseFilterSensitiveLog),
/* harmony export */   "GetIdCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetIdCommand),
/* harmony export */   "GetIdInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetIdInputFilterSensitiveLog),
/* harmony export */   "GetIdResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetIdResponseFilterSensitiveLog),
/* harmony export */   "GetIdentityPoolRolesCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetIdentityPoolRolesCommand),
/* harmony export */   "GetIdentityPoolRolesInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetIdentityPoolRolesInputFilterSensitiveLog),
/* harmony export */   "GetIdentityPoolRolesResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetIdentityPoolRolesResponseFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetOpenIdTokenCommand),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetOpenIdTokenForDeveloperIdentityCommand),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetOpenIdTokenInputFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetOpenIdTokenResponseFilterSensitiveLog),
/* harmony export */   "GetPrincipalTagAttributeMapCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetPrincipalTagAttributeMapCommand),
/* harmony export */   "GetPrincipalTagAttributeMapInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetPrincipalTagAttributeMapInputFilterSensitiveLog),
/* harmony export */   "GetPrincipalTagAttributeMapResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetPrincipalTagAttributeMapResponseFilterSensitiveLog),
/* harmony export */   "IdentityDescriptionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IdentityDescriptionFilterSensitiveLog),
/* harmony export */   "IdentityPoolFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IdentityPoolFilterSensitiveLog),
/* harmony export */   "IdentityPoolShortDescriptionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IdentityPoolShortDescriptionFilterSensitiveLog),
/* harmony export */   "InternalErrorException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InternalErrorException),
/* harmony export */   "InvalidIdentityPoolConfigurationException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InvalidIdentityPoolConfigurationException),
/* harmony export */   "InvalidParameterException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InvalidParameterException),
/* harmony export */   "LimitExceededException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LimitExceededException),
/* harmony export */   "ListIdentitiesCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListIdentitiesCommand),
/* harmony export */   "ListIdentitiesInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListIdentitiesInputFilterSensitiveLog),
/* harmony export */   "ListIdentitiesResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "ListIdentityPoolsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListIdentityPoolsCommand),
/* harmony export */   "ListIdentityPoolsInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListIdentityPoolsInputFilterSensitiveLog),
/* harmony export */   "ListIdentityPoolsResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListIdentityPoolsResponseFilterSensitiveLog),
/* harmony export */   "ListTagsForResourceCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListTagsForResourceCommand),
/* harmony export */   "ListTagsForResourceInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListTagsForResourceInputFilterSensitiveLog),
/* harmony export */   "ListTagsForResourceResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListTagsForResourceResponseFilterSensitiveLog),
/* harmony export */   "LookupDeveloperIdentityCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.LookupDeveloperIdentityCommand),
/* harmony export */   "LookupDeveloperIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LookupDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "LookupDeveloperIdentityResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LookupDeveloperIdentityResponseFilterSensitiveLog),
/* harmony export */   "MappingRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MappingRuleFilterSensitiveLog),
/* harmony export */   "MappingRuleMatchType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MappingRuleMatchType),
/* harmony export */   "MergeDeveloperIdentitiesCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.MergeDeveloperIdentitiesCommand),
/* harmony export */   "MergeDeveloperIdentitiesInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MergeDeveloperIdentitiesInputFilterSensitiveLog),
/* harmony export */   "MergeDeveloperIdentitiesResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MergeDeveloperIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "NotAuthorizedException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotAuthorizedException),
/* harmony export */   "ResourceConflictException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ResourceConflictException),
/* harmony export */   "ResourceNotFoundException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ResourceNotFoundException),
/* harmony export */   "RoleMappingFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RoleMappingFilterSensitiveLog),
/* harmony export */   "RoleMappingType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RoleMappingType),
/* harmony export */   "RulesConfigurationTypeFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RulesConfigurationTypeFilterSensitiveLog),
/* harmony export */   "SetIdentityPoolRolesCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.SetIdentityPoolRolesCommand),
/* harmony export */   "SetIdentityPoolRolesInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SetIdentityPoolRolesInputFilterSensitiveLog),
/* harmony export */   "SetPrincipalTagAttributeMapCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.SetPrincipalTagAttributeMapCommand),
/* harmony export */   "SetPrincipalTagAttributeMapInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SetPrincipalTagAttributeMapInputFilterSensitiveLog),
/* harmony export */   "SetPrincipalTagAttributeMapResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SetPrincipalTagAttributeMapResponseFilterSensitiveLog),
/* harmony export */   "TagResourceCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.TagResourceCommand),
/* harmony export */   "TagResourceInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TagResourceInputFilterSensitiveLog),
/* harmony export */   "TagResourceResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TagResourceResponseFilterSensitiveLog),
/* harmony export */   "TooManyRequestsException": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TooManyRequestsException),
/* harmony export */   "UnlinkDeveloperIdentityCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UnlinkDeveloperIdentityCommand),
/* harmony export */   "UnlinkDeveloperIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UnlinkDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "UnlinkIdentityCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UnlinkIdentityCommand),
/* harmony export */   "UnlinkIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UnlinkIdentityInputFilterSensitiveLog),
/* harmony export */   "UnprocessedIdentityIdFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UnprocessedIdentityIdFilterSensitiveLog),
/* harmony export */   "UntagResourceCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UntagResourceCommand),
/* harmony export */   "UntagResourceInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UntagResourceInputFilterSensitiveLog),
/* harmony export */   "UntagResourceResponseFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UntagResourceResponseFilterSensitiveLog),
/* harmony export */   "UpdateIdentityPoolCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UpdateIdentityPoolCommand),
/* harmony export */   "paginateListIdentityPools": () => (/* reexport safe */ _pagination__WEBPACK_IMPORTED_MODULE_4__.paginateListIdentityPools)
/* harmony export */ });
/* harmony import */ var _CognitoIdentity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitoIdentity */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js");
/* harmony import */ var _CognitoIdentityClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CognitoIdentityClient */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js");
/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/index.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/index.js");
/* harmony import */ var _pagination__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/index.js");
/* harmony import */ var _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./models/CognitoIdentityServiceException */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js");








/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CognitoIdentityServiceException": () => (/* binding */ CognitoIdentityServiceException)
/* harmony export */ });
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");

class CognitoIdentityServiceException extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CognitoIdentityServiceException.prototype);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AmbiguousRoleResolutionType": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AmbiguousRoleResolutionType),
/* harmony export */   "CognitoIdentityProviderFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityProviderFilterSensitiveLog),
/* harmony export */   "ConcurrentModificationException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ConcurrentModificationException),
/* harmony export */   "CreateIdentityPoolInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "CredentialsFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CredentialsFilterSensitiveLog),
/* harmony export */   "DeleteIdentitiesInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteIdentitiesInputFilterSensitiveLog),
/* harmony export */   "DeleteIdentitiesResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "DeleteIdentityPoolInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "DescribeIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DescribeIdentityInputFilterSensitiveLog),
/* harmony export */   "DescribeIdentityPoolInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DescribeIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "DeveloperUserAlreadyRegisteredException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeveloperUserAlreadyRegisteredException),
/* harmony export */   "ErrorCode": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ErrorCode),
/* harmony export */   "ExternalServiceException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExternalServiceException),
/* harmony export */   "GetCredentialsForIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetCredentialsForIdentityInputFilterSensitiveLog),
/* harmony export */   "GetCredentialsForIdentityResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetCredentialsForIdentityResponseFilterSensitiveLog),
/* harmony export */   "GetIdInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetIdInputFilterSensitiveLog),
/* harmony export */   "GetIdResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetIdResponseFilterSensitiveLog),
/* harmony export */   "GetIdentityPoolRolesInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetIdentityPoolRolesInputFilterSensitiveLog),
/* harmony export */   "GetIdentityPoolRolesResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetIdentityPoolRolesResponseFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetOpenIdTokenInputFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetOpenIdTokenResponseFilterSensitiveLog),
/* harmony export */   "GetPrincipalTagAttributeMapInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetPrincipalTagAttributeMapInputFilterSensitiveLog),
/* harmony export */   "GetPrincipalTagAttributeMapResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetPrincipalTagAttributeMapResponseFilterSensitiveLog),
/* harmony export */   "IdentityDescriptionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IdentityDescriptionFilterSensitiveLog),
/* harmony export */   "IdentityPoolFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IdentityPoolFilterSensitiveLog),
/* harmony export */   "IdentityPoolShortDescriptionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IdentityPoolShortDescriptionFilterSensitiveLog),
/* harmony export */   "InternalErrorException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InternalErrorException),
/* harmony export */   "InvalidIdentityPoolConfigurationException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InvalidIdentityPoolConfigurationException),
/* harmony export */   "InvalidParameterException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InvalidParameterException),
/* harmony export */   "LimitExceededException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LimitExceededException),
/* harmony export */   "ListIdentitiesInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListIdentitiesInputFilterSensitiveLog),
/* harmony export */   "ListIdentitiesResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "ListIdentityPoolsInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListIdentityPoolsInputFilterSensitiveLog),
/* harmony export */   "ListIdentityPoolsResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListIdentityPoolsResponseFilterSensitiveLog),
/* harmony export */   "ListTagsForResourceInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListTagsForResourceInputFilterSensitiveLog),
/* harmony export */   "ListTagsForResourceResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListTagsForResourceResponseFilterSensitiveLog),
/* harmony export */   "LookupDeveloperIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LookupDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "LookupDeveloperIdentityResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LookupDeveloperIdentityResponseFilterSensitiveLog),
/* harmony export */   "MappingRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MappingRuleFilterSensitiveLog),
/* harmony export */   "MappingRuleMatchType": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MappingRuleMatchType),
/* harmony export */   "MergeDeveloperIdentitiesInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MergeDeveloperIdentitiesInputFilterSensitiveLog),
/* harmony export */   "MergeDeveloperIdentitiesResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MergeDeveloperIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "NotAuthorizedException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotAuthorizedException),
/* harmony export */   "ResourceConflictException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ResourceConflictException),
/* harmony export */   "ResourceNotFoundException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ResourceNotFoundException),
/* harmony export */   "RoleMappingFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RoleMappingFilterSensitiveLog),
/* harmony export */   "RoleMappingType": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RoleMappingType),
/* harmony export */   "RulesConfigurationTypeFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RulesConfigurationTypeFilterSensitiveLog),
/* harmony export */   "SetIdentityPoolRolesInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SetIdentityPoolRolesInputFilterSensitiveLog),
/* harmony export */   "SetPrincipalTagAttributeMapInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SetPrincipalTagAttributeMapInputFilterSensitiveLog),
/* harmony export */   "SetPrincipalTagAttributeMapResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SetPrincipalTagAttributeMapResponseFilterSensitiveLog),
/* harmony export */   "TagResourceInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TagResourceInputFilterSensitiveLog),
/* harmony export */   "TagResourceResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TagResourceResponseFilterSensitiveLog),
/* harmony export */   "TooManyRequestsException": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TooManyRequestsException),
/* harmony export */   "UnlinkDeveloperIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.UnlinkDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "UnlinkIdentityInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.UnlinkIdentityInputFilterSensitiveLog),
/* harmony export */   "UnprocessedIdentityIdFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.UnprocessedIdentityIdFilterSensitiveLog),
/* harmony export */   "UntagResourceInputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.UntagResourceInputFilterSensitiveLog),
/* harmony export */   "UntagResourceResponseFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.UntagResourceResponseFilterSensitiveLog)
/* harmony export */ });
/* harmony import */ var _models_0__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AmbiguousRoleResolutionType": () => (/* binding */ AmbiguousRoleResolutionType),
/* harmony export */   "CognitoIdentityProviderFilterSensitiveLog": () => (/* binding */ CognitoIdentityProviderFilterSensitiveLog),
/* harmony export */   "ConcurrentModificationException": () => (/* binding */ ConcurrentModificationException),
/* harmony export */   "CreateIdentityPoolInputFilterSensitiveLog": () => (/* binding */ CreateIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "CredentialsFilterSensitiveLog": () => (/* binding */ CredentialsFilterSensitiveLog),
/* harmony export */   "DeleteIdentitiesInputFilterSensitiveLog": () => (/* binding */ DeleteIdentitiesInputFilterSensitiveLog),
/* harmony export */   "DeleteIdentitiesResponseFilterSensitiveLog": () => (/* binding */ DeleteIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "DeleteIdentityPoolInputFilterSensitiveLog": () => (/* binding */ DeleteIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "DescribeIdentityInputFilterSensitiveLog": () => (/* binding */ DescribeIdentityInputFilterSensitiveLog),
/* harmony export */   "DescribeIdentityPoolInputFilterSensitiveLog": () => (/* binding */ DescribeIdentityPoolInputFilterSensitiveLog),
/* harmony export */   "DeveloperUserAlreadyRegisteredException": () => (/* binding */ DeveloperUserAlreadyRegisteredException),
/* harmony export */   "ErrorCode": () => (/* binding */ ErrorCode),
/* harmony export */   "ExternalServiceException": () => (/* binding */ ExternalServiceException),
/* harmony export */   "GetCredentialsForIdentityInputFilterSensitiveLog": () => (/* binding */ GetCredentialsForIdentityInputFilterSensitiveLog),
/* harmony export */   "GetCredentialsForIdentityResponseFilterSensitiveLog": () => (/* binding */ GetCredentialsForIdentityResponseFilterSensitiveLog),
/* harmony export */   "GetIdInputFilterSensitiveLog": () => (/* binding */ GetIdInputFilterSensitiveLog),
/* harmony export */   "GetIdResponseFilterSensitiveLog": () => (/* binding */ GetIdResponseFilterSensitiveLog),
/* harmony export */   "GetIdentityPoolRolesInputFilterSensitiveLog": () => (/* binding */ GetIdentityPoolRolesInputFilterSensitiveLog),
/* harmony export */   "GetIdentityPoolRolesResponseFilterSensitiveLog": () => (/* binding */ GetIdentityPoolRolesResponseFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog": () => (/* binding */ GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog": () => (/* binding */ GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenInputFilterSensitiveLog": () => (/* binding */ GetOpenIdTokenInputFilterSensitiveLog),
/* harmony export */   "GetOpenIdTokenResponseFilterSensitiveLog": () => (/* binding */ GetOpenIdTokenResponseFilterSensitiveLog),
/* harmony export */   "GetPrincipalTagAttributeMapInputFilterSensitiveLog": () => (/* binding */ GetPrincipalTagAttributeMapInputFilterSensitiveLog),
/* harmony export */   "GetPrincipalTagAttributeMapResponseFilterSensitiveLog": () => (/* binding */ GetPrincipalTagAttributeMapResponseFilterSensitiveLog),
/* harmony export */   "IdentityDescriptionFilterSensitiveLog": () => (/* binding */ IdentityDescriptionFilterSensitiveLog),
/* harmony export */   "IdentityPoolFilterSensitiveLog": () => (/* binding */ IdentityPoolFilterSensitiveLog),
/* harmony export */   "IdentityPoolShortDescriptionFilterSensitiveLog": () => (/* binding */ IdentityPoolShortDescriptionFilterSensitiveLog),
/* harmony export */   "InternalErrorException": () => (/* binding */ InternalErrorException),
/* harmony export */   "InvalidIdentityPoolConfigurationException": () => (/* binding */ InvalidIdentityPoolConfigurationException),
/* harmony export */   "InvalidParameterException": () => (/* binding */ InvalidParameterException),
/* harmony export */   "LimitExceededException": () => (/* binding */ LimitExceededException),
/* harmony export */   "ListIdentitiesInputFilterSensitiveLog": () => (/* binding */ ListIdentitiesInputFilterSensitiveLog),
/* harmony export */   "ListIdentitiesResponseFilterSensitiveLog": () => (/* binding */ ListIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "ListIdentityPoolsInputFilterSensitiveLog": () => (/* binding */ ListIdentityPoolsInputFilterSensitiveLog),
/* harmony export */   "ListIdentityPoolsResponseFilterSensitiveLog": () => (/* binding */ ListIdentityPoolsResponseFilterSensitiveLog),
/* harmony export */   "ListTagsForResourceInputFilterSensitiveLog": () => (/* binding */ ListTagsForResourceInputFilterSensitiveLog),
/* harmony export */   "ListTagsForResourceResponseFilterSensitiveLog": () => (/* binding */ ListTagsForResourceResponseFilterSensitiveLog),
/* harmony export */   "LookupDeveloperIdentityInputFilterSensitiveLog": () => (/* binding */ LookupDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "LookupDeveloperIdentityResponseFilterSensitiveLog": () => (/* binding */ LookupDeveloperIdentityResponseFilterSensitiveLog),
/* harmony export */   "MappingRuleFilterSensitiveLog": () => (/* binding */ MappingRuleFilterSensitiveLog),
/* harmony export */   "MappingRuleMatchType": () => (/* binding */ MappingRuleMatchType),
/* harmony export */   "MergeDeveloperIdentitiesInputFilterSensitiveLog": () => (/* binding */ MergeDeveloperIdentitiesInputFilterSensitiveLog),
/* harmony export */   "MergeDeveloperIdentitiesResponseFilterSensitiveLog": () => (/* binding */ MergeDeveloperIdentitiesResponseFilterSensitiveLog),
/* harmony export */   "NotAuthorizedException": () => (/* binding */ NotAuthorizedException),
/* harmony export */   "ResourceConflictException": () => (/* binding */ ResourceConflictException),
/* harmony export */   "ResourceNotFoundException": () => (/* binding */ ResourceNotFoundException),
/* harmony export */   "RoleMappingFilterSensitiveLog": () => (/* binding */ RoleMappingFilterSensitiveLog),
/* harmony export */   "RoleMappingType": () => (/* binding */ RoleMappingType),
/* harmony export */   "RulesConfigurationTypeFilterSensitiveLog": () => (/* binding */ RulesConfigurationTypeFilterSensitiveLog),
/* harmony export */   "SetIdentityPoolRolesInputFilterSensitiveLog": () => (/* binding */ SetIdentityPoolRolesInputFilterSensitiveLog),
/* harmony export */   "SetPrincipalTagAttributeMapInputFilterSensitiveLog": () => (/* binding */ SetPrincipalTagAttributeMapInputFilterSensitiveLog),
/* harmony export */   "SetPrincipalTagAttributeMapResponseFilterSensitiveLog": () => (/* binding */ SetPrincipalTagAttributeMapResponseFilterSensitiveLog),
/* harmony export */   "TagResourceInputFilterSensitiveLog": () => (/* binding */ TagResourceInputFilterSensitiveLog),
/* harmony export */   "TagResourceResponseFilterSensitiveLog": () => (/* binding */ TagResourceResponseFilterSensitiveLog),
/* harmony export */   "TooManyRequestsException": () => (/* binding */ TooManyRequestsException),
/* harmony export */   "UnlinkDeveloperIdentityInputFilterSensitiveLog": () => (/* binding */ UnlinkDeveloperIdentityInputFilterSensitiveLog),
/* harmony export */   "UnlinkIdentityInputFilterSensitiveLog": () => (/* binding */ UnlinkIdentityInputFilterSensitiveLog),
/* harmony export */   "UnprocessedIdentityIdFilterSensitiveLog": () => (/* binding */ UnprocessedIdentityIdFilterSensitiveLog),
/* harmony export */   "UntagResourceInputFilterSensitiveLog": () => (/* binding */ UntagResourceInputFilterSensitiveLog),
/* harmony export */   "UntagResourceResponseFilterSensitiveLog": () => (/* binding */ UntagResourceResponseFilterSensitiveLog)
/* harmony export */ });
/* harmony import */ var _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitoIdentityServiceException */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js");

var AmbiguousRoleResolutionType;
(function (AmbiguousRoleResolutionType) {
    AmbiguousRoleResolutionType["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
    AmbiguousRoleResolutionType["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
class InternalErrorException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "InternalErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalErrorException.prototype);
    }
}
class InvalidParameterException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class LimitExceededException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class NotAuthorizedException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
class ResourceConflictException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
    }
}
class TooManyRequestsException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["ACCESS_DENIED"] = "AccessDenied";
    ErrorCode["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
class ResourceNotFoundException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class ExternalServiceException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "ExternalServiceException",
            $fault: "client",
            ...opts,
        });
        this.name = "ExternalServiceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExternalServiceException.prototype);
    }
}
class InvalidIdentityPoolConfigurationException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "InvalidIdentityPoolConfigurationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidIdentityPoolConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityPoolConfigurationException.prototype);
    }
}
var MappingRuleMatchType;
(function (MappingRuleMatchType) {
    MappingRuleMatchType["CONTAINS"] = "Contains";
    MappingRuleMatchType["EQUALS"] = "Equals";
    MappingRuleMatchType["NOT_EQUAL"] = "NotEqual";
    MappingRuleMatchType["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var RoleMappingType;
(function (RoleMappingType) {
    RoleMappingType["RULES"] = "Rules";
    RoleMappingType["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
class DeveloperUserAlreadyRegisteredException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "DeveloperUserAlreadyRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeveloperUserAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeveloperUserAlreadyRegisteredException.prototype);
    }
}
class ConcurrentModificationException extends _CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_0__.CognitoIdentityServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
const CognitoIdentityProviderFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CreateIdentityPoolInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IdentityPoolFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteIdentitiesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UnprocessedIdentityIdFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteIdentitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteIdentityPoolInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DescribeIdentityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IdentityDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DescribeIdentityPoolInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetCredentialsForIdentityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetCredentialsForIdentityResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetIdInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetIdResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetIdentityPoolRolesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MappingRuleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RulesConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RoleMappingFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetIdentityPoolRolesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetOpenIdTokenInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetOpenIdTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetPrincipalTagAttributeMapInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetPrincipalTagAttributeMapResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListIdentitiesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListIdentitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListIdentityPoolsInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IdentityPoolShortDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListIdentityPoolsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListTagsForResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LookupDeveloperIdentityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LookupDeveloperIdentityResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MergeDeveloperIdentitiesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MergeDeveloperIdentitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SetIdentityPoolRolesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SetPrincipalTagAttributeMapInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SetPrincipalTagAttributeMapResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TagResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UnlinkDeveloperIdentityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UnlinkIdentityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UntagResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UntagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/ListIdentityPoolsPaginator.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/ListIdentityPoolsPaginator.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paginateListIdentityPools": () => (/* binding */ paginateListIdentityPools)
/* harmony export */ });
/* harmony import */ var _CognitoIdentity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CognitoIdentity */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js");
/* harmony import */ var _CognitoIdentityClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../CognitoIdentityClient */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js");
/* harmony import */ var _commands_ListIdentityPoolsCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commands/ListIdentityPoolsCommand */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js");



const makePagedClientRequest = async (client, input, ...args) => {
    return await client.send(new _commands_ListIdentityPoolsCommand__WEBPACK_IMPORTED_MODULE_0__.ListIdentityPoolsCommand(input), ...args);
};
const makePagedRequest = async (client, input, ...args) => {
    return await client.listIdentityPools(input, ...args);
};
async function* paginateListIdentityPools(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof _CognitoIdentity__WEBPACK_IMPORTED_MODULE_1__.CognitoIdentity) {
            page = await makePagedRequest(config.client, input, ...additionalArguments);
        }
        else if (config.client instanceof _CognitoIdentityClient__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityClient) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        }
        else {
            throw new Error("Invalid client, expected CognitoIdentity | CognitoIdentityClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paginateListIdentityPools": () => (/* reexport safe */ _ListIdentityPoolsPaginator__WEBPACK_IMPORTED_MODULE_0__.paginateListIdentityPools)
/* harmony export */ });
/* harmony import */ var _ListIdentityPoolsPaginator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListIdentityPoolsPaginator */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/ListIdentityPoolsPaginator.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserializeAws_json1_1CreateIdentityPoolCommand": () => (/* binding */ deserializeAws_json1_1CreateIdentityPoolCommand),
/* harmony export */   "deserializeAws_json1_1DeleteIdentitiesCommand": () => (/* binding */ deserializeAws_json1_1DeleteIdentitiesCommand),
/* harmony export */   "deserializeAws_json1_1DeleteIdentityPoolCommand": () => (/* binding */ deserializeAws_json1_1DeleteIdentityPoolCommand),
/* harmony export */   "deserializeAws_json1_1DescribeIdentityCommand": () => (/* binding */ deserializeAws_json1_1DescribeIdentityCommand),
/* harmony export */   "deserializeAws_json1_1DescribeIdentityPoolCommand": () => (/* binding */ deserializeAws_json1_1DescribeIdentityPoolCommand),
/* harmony export */   "deserializeAws_json1_1GetCredentialsForIdentityCommand": () => (/* binding */ deserializeAws_json1_1GetCredentialsForIdentityCommand),
/* harmony export */   "deserializeAws_json1_1GetIdCommand": () => (/* binding */ deserializeAws_json1_1GetIdCommand),
/* harmony export */   "deserializeAws_json1_1GetIdentityPoolRolesCommand": () => (/* binding */ deserializeAws_json1_1GetIdentityPoolRolesCommand),
/* harmony export */   "deserializeAws_json1_1GetOpenIdTokenCommand": () => (/* binding */ deserializeAws_json1_1GetOpenIdTokenCommand),
/* harmony export */   "deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand": () => (/* binding */ deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand),
/* harmony export */   "deserializeAws_json1_1GetPrincipalTagAttributeMapCommand": () => (/* binding */ deserializeAws_json1_1GetPrincipalTagAttributeMapCommand),
/* harmony export */   "deserializeAws_json1_1ListIdentitiesCommand": () => (/* binding */ deserializeAws_json1_1ListIdentitiesCommand),
/* harmony export */   "deserializeAws_json1_1ListIdentityPoolsCommand": () => (/* binding */ deserializeAws_json1_1ListIdentityPoolsCommand),
/* harmony export */   "deserializeAws_json1_1ListTagsForResourceCommand": () => (/* binding */ deserializeAws_json1_1ListTagsForResourceCommand),
/* harmony export */   "deserializeAws_json1_1LookupDeveloperIdentityCommand": () => (/* binding */ deserializeAws_json1_1LookupDeveloperIdentityCommand),
/* harmony export */   "deserializeAws_json1_1MergeDeveloperIdentitiesCommand": () => (/* binding */ deserializeAws_json1_1MergeDeveloperIdentitiesCommand),
/* harmony export */   "deserializeAws_json1_1SetIdentityPoolRolesCommand": () => (/* binding */ deserializeAws_json1_1SetIdentityPoolRolesCommand),
/* harmony export */   "deserializeAws_json1_1SetPrincipalTagAttributeMapCommand": () => (/* binding */ deserializeAws_json1_1SetPrincipalTagAttributeMapCommand),
/* harmony export */   "deserializeAws_json1_1TagResourceCommand": () => (/* binding */ deserializeAws_json1_1TagResourceCommand),
/* harmony export */   "deserializeAws_json1_1UnlinkDeveloperIdentityCommand": () => (/* binding */ deserializeAws_json1_1UnlinkDeveloperIdentityCommand),
/* harmony export */   "deserializeAws_json1_1UnlinkIdentityCommand": () => (/* binding */ deserializeAws_json1_1UnlinkIdentityCommand),
/* harmony export */   "deserializeAws_json1_1UntagResourceCommand": () => (/* binding */ deserializeAws_json1_1UntagResourceCommand),
/* harmony export */   "deserializeAws_json1_1UpdateIdentityPoolCommand": () => (/* binding */ deserializeAws_json1_1UpdateIdentityPoolCommand),
/* harmony export */   "serializeAws_json1_1CreateIdentityPoolCommand": () => (/* binding */ serializeAws_json1_1CreateIdentityPoolCommand),
/* harmony export */   "serializeAws_json1_1DeleteIdentitiesCommand": () => (/* binding */ serializeAws_json1_1DeleteIdentitiesCommand),
/* harmony export */   "serializeAws_json1_1DeleteIdentityPoolCommand": () => (/* binding */ serializeAws_json1_1DeleteIdentityPoolCommand),
/* harmony export */   "serializeAws_json1_1DescribeIdentityCommand": () => (/* binding */ serializeAws_json1_1DescribeIdentityCommand),
/* harmony export */   "serializeAws_json1_1DescribeIdentityPoolCommand": () => (/* binding */ serializeAws_json1_1DescribeIdentityPoolCommand),
/* harmony export */   "serializeAws_json1_1GetCredentialsForIdentityCommand": () => (/* binding */ serializeAws_json1_1GetCredentialsForIdentityCommand),
/* harmony export */   "serializeAws_json1_1GetIdCommand": () => (/* binding */ serializeAws_json1_1GetIdCommand),
/* harmony export */   "serializeAws_json1_1GetIdentityPoolRolesCommand": () => (/* binding */ serializeAws_json1_1GetIdentityPoolRolesCommand),
/* harmony export */   "serializeAws_json1_1GetOpenIdTokenCommand": () => (/* binding */ serializeAws_json1_1GetOpenIdTokenCommand),
/* harmony export */   "serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand": () => (/* binding */ serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand),
/* harmony export */   "serializeAws_json1_1GetPrincipalTagAttributeMapCommand": () => (/* binding */ serializeAws_json1_1GetPrincipalTagAttributeMapCommand),
/* harmony export */   "serializeAws_json1_1ListIdentitiesCommand": () => (/* binding */ serializeAws_json1_1ListIdentitiesCommand),
/* harmony export */   "serializeAws_json1_1ListIdentityPoolsCommand": () => (/* binding */ serializeAws_json1_1ListIdentityPoolsCommand),
/* harmony export */   "serializeAws_json1_1ListTagsForResourceCommand": () => (/* binding */ serializeAws_json1_1ListTagsForResourceCommand),
/* harmony export */   "serializeAws_json1_1LookupDeveloperIdentityCommand": () => (/* binding */ serializeAws_json1_1LookupDeveloperIdentityCommand),
/* harmony export */   "serializeAws_json1_1MergeDeveloperIdentitiesCommand": () => (/* binding */ serializeAws_json1_1MergeDeveloperIdentitiesCommand),
/* harmony export */   "serializeAws_json1_1SetIdentityPoolRolesCommand": () => (/* binding */ serializeAws_json1_1SetIdentityPoolRolesCommand),
/* harmony export */   "serializeAws_json1_1SetPrincipalTagAttributeMapCommand": () => (/* binding */ serializeAws_json1_1SetPrincipalTagAttributeMapCommand),
/* harmony export */   "serializeAws_json1_1TagResourceCommand": () => (/* binding */ serializeAws_json1_1TagResourceCommand),
/* harmony export */   "serializeAws_json1_1UnlinkDeveloperIdentityCommand": () => (/* binding */ serializeAws_json1_1UnlinkDeveloperIdentityCommand),
/* harmony export */   "serializeAws_json1_1UnlinkIdentityCommand": () => (/* binding */ serializeAws_json1_1UnlinkIdentityCommand),
/* harmony export */   "serializeAws_json1_1UntagResourceCommand": () => (/* binding */ serializeAws_json1_1UntagResourceCommand),
/* harmony export */   "serializeAws_json1_1UpdateIdentityPoolCommand": () => (/* binding */ serializeAws_json1_1UpdateIdentityPoolCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/CognitoIdentityServiceException */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js");




const serializeAws_json1_1CreateIdentityPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DeleteIdentitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DeleteIdentityPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DescribeIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DescribeIdentityPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetCredentialsForIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetIdCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetId",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetIdentityPoolRolesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetOpenIdTokenCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetPrincipalTagAttributeMapCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetPrincipalTagAttributeMap",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetPrincipalTagAttributeMapInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1ListIdentitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1ListIdentityPoolsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1LookupDeveloperIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1MergeDeveloperIdentitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1SetIdentityPoolRolesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1SetPrincipalTagAttributeMapCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetPrincipalTagAttributeMap",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SetPrincipalTagAttributeMapInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UnlinkDeveloperIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UnlinkIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UpdateIdentityPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const deserializeAws_json1_1CreateIdentityPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateIdentityPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityPool(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateIdentityPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteIdentitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteIdentitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteIdentitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteIdentityPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteIdentityPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityDescription(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeIdentityPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityPool(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeIdentityPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetCredentialsForIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetCredentialsForIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidIdentityPoolConfigurationException":
        case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
            throw await deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetIdResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetIdentityPoolRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetIdentityPoolRolesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetOpenIdTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpenIdTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOpenIdTokenCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DeveloperUserAlreadyRegisteredException":
        case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
            throw await deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetPrincipalTagAttributeMapCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPrincipalTagAttributeMapCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetPrincipalTagAttributeMapResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetPrincipalTagAttributeMapCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListIdentitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListIdentitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListIdentitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListIdentityPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListIdentityPoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListIdentityPoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1LookupDeveloperIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1LookupDeveloperIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1MergeDeveloperIdentitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1SetIdentityPoolRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SetIdentityPoolRolesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
            throw await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1SetPrincipalTagAttributeMapCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SetPrincipalTagAttributeMapCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SetPrincipalTagAttributeMapResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SetPrincipalTagAttributeMapCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UnlinkDeveloperIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UnlinkIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UnlinkIdentityCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UnlinkIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateIdentityPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityPool(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateIdentityPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
            throw await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_CognitoIdentityServiceException__WEBPACK_IMPORTED_MODULE_2__.CognitoIdentityServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ConcurrentModificationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeveloperUserAlreadyRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ExternalServiceExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ExternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InternalErrorExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalErrorException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidIdentityPoolConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidParameterExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1NotAuthorizedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceConflictExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_3__.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, body);
};
const serializeAws_json1_1CognitoIdentityProvider = (input, context) => {
    return {
        ...(input.ClientId != null && { ClientId: input.ClientId }),
        ...(input.ProviderName != null && { ProviderName: input.ProviderName }),
        ...(input.ServerSideTokenCheck != null && { ServerSideTokenCheck: input.ServerSideTokenCheck }),
    };
};
const serializeAws_json1_1CognitoIdentityProviderList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
};
const serializeAws_json1_1CreateIdentityPoolInput = (input, context) => {
    return {
        ...(input.AllowClassicFlow != null && { AllowClassicFlow: input.AllowClassicFlow }),
        ...(input.AllowUnauthenticatedIdentities != null && {
            AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities,
        }),
        ...(input.CognitoIdentityProviders != null && {
            CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context),
        }),
        ...(input.DeveloperProviderName != null && { DeveloperProviderName: input.DeveloperProviderName }),
        ...(input.IdentityPoolName != null && { IdentityPoolName: input.IdentityPoolName }),
        ...(input.IdentityPoolTags != null && {
            IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context),
        }),
        ...(input.OpenIdConnectProviderARNs != null && {
            OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context),
        }),
        ...(input.SamlProviderARNs != null && {
            SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context),
        }),
        ...(input.SupportedLoginProviders != null && {
            SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context),
        }),
    };
};
const serializeAws_json1_1DeleteIdentitiesInput = (input, context) => {
    return {
        ...(input.IdentityIdsToDelete != null && {
            IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context),
        }),
    };
};
const serializeAws_json1_1DeleteIdentityPoolInput = (input, context) => {
    return {
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
    };
};
const serializeAws_json1_1DescribeIdentityInput = (input, context) => {
    return {
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
    };
};
const serializeAws_json1_1DescribeIdentityPoolInput = (input, context) => {
    return {
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
    };
};
const serializeAws_json1_1GetCredentialsForIdentityInput = (input, context) => {
    return {
        ...(input.CustomRoleArn != null && { CustomRoleArn: input.CustomRoleArn }),
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
        ...(input.Logins != null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }),
    };
};
const serializeAws_json1_1GetIdentityPoolRolesInput = (input, context) => {
    return {
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
    };
};
const serializeAws_json1_1GetIdInput = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.Logins != null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }),
    };
};
const serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = (input, context) => {
    return {
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.Logins != null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }),
        ...(input.PrincipalTags != null && {
            PrincipalTags: serializeAws_json1_1PrincipalTags(input.PrincipalTags, context),
        }),
        ...(input.TokenDuration != null && { TokenDuration: input.TokenDuration }),
    };
};
const serializeAws_json1_1GetOpenIdTokenInput = (input, context) => {
    return {
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
        ...(input.Logins != null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }),
    };
};
const serializeAws_json1_1GetPrincipalTagAttributeMapInput = (input, context) => {
    return {
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.IdentityProviderName != null && { IdentityProviderName: input.IdentityProviderName }),
    };
};
const serializeAws_json1_1IdentityIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1IdentityPool = (input, context) => {
    return {
        ...(input.AllowClassicFlow != null && { AllowClassicFlow: input.AllowClassicFlow }),
        ...(input.AllowUnauthenticatedIdentities != null && {
            AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities,
        }),
        ...(input.CognitoIdentityProviders != null && {
            CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context),
        }),
        ...(input.DeveloperProviderName != null && { DeveloperProviderName: input.DeveloperProviderName }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.IdentityPoolName != null && { IdentityPoolName: input.IdentityPoolName }),
        ...(input.IdentityPoolTags != null && {
            IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context),
        }),
        ...(input.OpenIdConnectProviderARNs != null && {
            OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context),
        }),
        ...(input.SamlProviderARNs != null && {
            SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context),
        }),
        ...(input.SupportedLoginProviders != null && {
            SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context),
        }),
    };
};
const serializeAws_json1_1IdentityPoolTagsListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1IdentityPoolTagsType = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1IdentityProviders = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1ListIdentitiesInput = (input, context) => {
    return {
        ...(input.HideDisabled != null && { HideDisabled: input.HideDisabled }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListIdentityPoolsInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceInput = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
    };
};
const serializeAws_json1_1LoginsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1LoginsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1LookupDeveloperIdentityInput = (input, context) => {
    return {
        ...(input.DeveloperUserIdentifier != null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }),
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1MappingRule = (input, context) => {
    return {
        ...(input.Claim != null && { Claim: input.Claim }),
        ...(input.MatchType != null && { MatchType: input.MatchType }),
        ...(input.RoleARN != null && { RoleARN: input.RoleARN }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_json1_1MappingRulesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1MappingRule(entry, context);
    });
};
const serializeAws_json1_1MergeDeveloperIdentitiesInput = (input, context) => {
    return {
        ...(input.DestinationUserIdentifier != null && { DestinationUserIdentifier: input.DestinationUserIdentifier }),
        ...(input.DeveloperProviderName != null && { DeveloperProviderName: input.DeveloperProviderName }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.SourceUserIdentifier != null && { SourceUserIdentifier: input.SourceUserIdentifier }),
    };
};
const serializeAws_json1_1OIDCProviderList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1PrincipalTags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1RoleMapping = (input, context) => {
    return {
        ...(input.AmbiguousRoleResolution != null && { AmbiguousRoleResolution: input.AmbiguousRoleResolution }),
        ...(input.RulesConfiguration != null && {
            RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context),
        }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1RoleMappingMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_json1_1RoleMapping(value, context),
        };
    }, {});
};
const serializeAws_json1_1RolesMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1RulesConfigurationType = (input, context) => {
    return {
        ...(input.Rules != null && { Rules: serializeAws_json1_1MappingRulesList(input.Rules, context) }),
    };
};
const serializeAws_json1_1SAMLProviderList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SetIdentityPoolRolesInput = (input, context) => {
    return {
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.RoleMappings != null && {
            RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context),
        }),
        ...(input.Roles != null && { Roles: serializeAws_json1_1RolesMap(input.Roles, context) }),
    };
};
const serializeAws_json1_1SetPrincipalTagAttributeMapInput = (input, context) => {
    return {
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
        ...(input.IdentityProviderName != null && { IdentityProviderName: input.IdentityProviderName }),
        ...(input.PrincipalTags != null && {
            PrincipalTags: serializeAws_json1_1PrincipalTags(input.PrincipalTags, context),
        }),
        ...(input.UseDefaults != null && { UseDefaults: input.UseDefaults }),
    };
};
const serializeAws_json1_1TagResourceInput = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context) }),
    };
};
const serializeAws_json1_1UnlinkDeveloperIdentityInput = (input, context) => {
    return {
        ...(input.DeveloperProviderName != null && { DeveloperProviderName: input.DeveloperProviderName }),
        ...(input.DeveloperUserIdentifier != null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }),
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
        ...(input.IdentityPoolId != null && { IdentityPoolId: input.IdentityPoolId }),
    };
};
const serializeAws_json1_1UnlinkIdentityInput = (input, context) => {
    return {
        ...(input.IdentityId != null && { IdentityId: input.IdentityId }),
        ...(input.Logins != null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }),
        ...(input.LoginsToRemove != null && {
            LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context),
        }),
    };
};
const serializeAws_json1_1UntagResourceInput = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context) }),
    };
};
const deserializeAws_json1_1CognitoIdentityProvider = (output, context) => {
    return {
        ClientId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.ClientId),
        ProviderName: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.ProviderName),
        ServerSideTokenCheck: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectBoolean)(output.ServerSideTokenCheck),
    };
};
const deserializeAws_json1_1CognitoIdentityProviderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConcurrentModificationException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1Credentials = (output, context) => {
    return {
        AccessKeyId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.AccessKeyId),
        Expiration: output.Expiration != null ? (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseEpochTimestamp)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNumber)(output.Expiration))) : undefined,
        SecretKey: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.SecretKey),
        SessionToken: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.SessionToken),
    };
};
const deserializeAws_json1_1DeleteIdentitiesResponse = (output, context) => {
    return {
        UnprocessedIdentityIds: output.UnprocessedIdentityIds != null
            ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context)
            : undefined,
    };
};
const deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1DeveloperUserIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExternalServiceException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1GetCredentialsForIdentityResponse = (output, context) => {
    return {
        Credentials: output.Credentials != null ? deserializeAws_json1_1Credentials(output.Credentials, context) : undefined,
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
    };
};
const deserializeAws_json1_1GetIdentityPoolRolesResponse = (output, context) => {
    return {
        IdentityPoolId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolId),
        RoleMappings: output.RoleMappings != null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : undefined,
        Roles: output.Roles != null ? deserializeAws_json1_1RolesMap(output.Roles, context) : undefined,
    };
};
const deserializeAws_json1_1GetIdResponse = (output, context) => {
    return {
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
    };
};
const deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = (output, context) => {
    return {
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
        Token: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.Token),
    };
};
const deserializeAws_json1_1GetOpenIdTokenResponse = (output, context) => {
    return {
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
        Token: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.Token),
    };
};
const deserializeAws_json1_1GetPrincipalTagAttributeMapResponse = (output, context) => {
    return {
        IdentityPoolId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolId),
        IdentityProviderName: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityProviderName),
        PrincipalTags: output.PrincipalTags != null ? deserializeAws_json1_1PrincipalTags(output.PrincipalTags, context) : undefined,
        UseDefaults: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectBoolean)(output.UseDefaults),
    };
};
const deserializeAws_json1_1IdentitiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1IdentityDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1IdentityDescription = (output, context) => {
    return {
        CreationDate: output.CreationDate != null
            ? (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseEpochTimestamp)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNumber)(output.CreationDate)))
            : undefined,
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
        LastModifiedDate: output.LastModifiedDate != null
            ? (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseEpochTimestamp)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNumber)(output.LastModifiedDate)))
            : undefined,
        Logins: output.Logins != null ? deserializeAws_json1_1LoginsList(output.Logins, context) : undefined,
    };
};
const deserializeAws_json1_1IdentityPool = (output, context) => {
    return {
        AllowClassicFlow: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectBoolean)(output.AllowClassicFlow),
        AllowUnauthenticatedIdentities: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectBoolean)(output.AllowUnauthenticatedIdentities),
        CognitoIdentityProviders: output.CognitoIdentityProviders != null
            ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context)
            : undefined,
        DeveloperProviderName: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.DeveloperProviderName),
        IdentityPoolId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolId),
        IdentityPoolName: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolName),
        IdentityPoolTags: output.IdentityPoolTags != null
            ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context)
            : undefined,
        OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs != null
            ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context)
            : undefined,
        SamlProviderARNs: output.SamlProviderARNs != null
            ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context)
            : undefined,
        SupportedLoginProviders: output.SupportedLoginProviders != null
            ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context)
            : undefined,
    };
};
const deserializeAws_json1_1IdentityPoolShortDescription = (output, context) => {
    return {
        IdentityPoolId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolId),
        IdentityPoolName: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolName),
    };
};
const deserializeAws_json1_1IdentityPoolsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1IdentityPoolTagsType = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(value),
        };
    }, {});
};
const deserializeAws_json1_1IdentityProviders = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(value),
        };
    }, {});
};
const deserializeAws_json1_1InternalErrorException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1InvalidIdentityPoolConfigurationException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1InvalidParameterException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1ListIdentitiesResponse = (output, context) => {
    return {
        Identities: output.Identities != null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : undefined,
        IdentityPoolId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolId),
        NextToken: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListIdentityPoolsResponse = (output, context) => {
    return {
        IdentityPools: output.IdentityPools != null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : undefined,
        NextToken: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        Tags: output.Tags != null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1LoginsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1LookupDeveloperIdentityResponse = (output, context) => {
    return {
        DeveloperUserIdentifierList: output.DeveloperUserIdentifierList != null
            ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context)
            : undefined,
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
        NextToken: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1MappingRule = (output, context) => {
    return {
        Claim: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.Claim),
        MatchType: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.MatchType),
        RoleARN: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.RoleARN),
        Value: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.Value),
    };
};
const deserializeAws_json1_1MappingRulesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MappingRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1MergeDeveloperIdentitiesResponse = (output, context) => {
    return {
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
    };
};
const deserializeAws_json1_1NotAuthorizedException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1OIDCProviderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1PrincipalTags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(value),
        };
    }, {});
};
const deserializeAws_json1_1ResourceConflictException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1RoleMapping = (output, context) => {
    return {
        AmbiguousRoleResolution: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.AmbiguousRoleResolution),
        RulesConfiguration: output.RulesConfiguration != null
            ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context)
            : undefined,
        Type: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.Type),
    };
};
const deserializeAws_json1_1RoleMappingMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_json1_1RoleMapping(value, context),
        };
    }, {});
};
const deserializeAws_json1_1RolesMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(value),
        };
    }, {});
};
const deserializeAws_json1_1RulesConfigurationType = (output, context) => {
    return {
        Rules: output.Rules != null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : undefined,
    };
};
const deserializeAws_json1_1SAMLProviderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SetPrincipalTagAttributeMapResponse = (output, context) => {
    return {
        IdentityPoolId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityPoolId),
        IdentityProviderName: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityProviderName),
        PrincipalTags: output.PrincipalTags != null ? deserializeAws_json1_1PrincipalTags(output.PrincipalTags, context) : undefined,
        UseDefaults: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectBoolean)(output.UseDefaults),
    };
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1TooManyRequestsException = (output, context) => {
    return {
        message: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.message),
    };
};
const deserializeAws_json1_1UnprocessedIdentityId = (output, context) => {
    return {
        ErrorCode: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.ErrorCode),
        IdentityId: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output.IdentityId),
    };
};
const deserializeAws_json1_1UnprocessedIdentityIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.browser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.browser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRuntimeConfig": () => (/* binding */ getRuntimeConfig)
/* harmony export */ });
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../package.json */ "./node_modules/@aws-sdk/client-cognito-identity/package.json");
/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/sha256-browser */ "./node_modules/@aws-crypto/sha256-browser/build/index.js");
/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/config-resolver */ "./node_modules/@aws-sdk/config-resolver/dist-es/index.js");
/* harmony import */ var _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/fetch-http-handler */ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js");
/* harmony import */ var _aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/invalid-dependency */ "./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ "./node_modules/@aws-sdk/middleware-retry/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/util-body-length-browser */ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/util-user-agent-browser */ "./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
/* harmony import */ var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./runtimeConfig.shared */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.shared.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_defaults_mode_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aws-sdk/util-defaults-mode-browser */ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js");












const getRuntimeConfig = (config) => {
    const defaultsMode = (0,_aws_sdk_util_defaults_mode_browser__WEBPACK_IMPORTED_MODULE_9__.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_8__.loadConfigsForDefaultMode);
    const clientSharedValues = (0,_runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_10__.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_5__.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ??
            (0,_aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_6__.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: _package_json__WEBPACK_IMPORTED_MODULE_11__.version }),
        maxAttempts: config?.maxAttempts ?? _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_MAX_ATTEMPTS,
        region: config?.region ?? (0,_aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_3__.invalidProvider)("Region is missing"),
        requestHandler: config?.requestHandler ?? new _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_2__.FetchHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETRY_MODE),
        sha256: config?.sha256 ?? _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0__.Sha256,
        streamCollector: config?.streamCollector ?? _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_2__.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_USE_DUALSTACK_ENDPOINT)),
        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_USE_FIPS_ENDPOINT)),
        utf8Decoder: config?.utf8Decoder ?? _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_7__.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_7__.toUtf8,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.shared.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.shared.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRuntimeConfig": () => (/* binding */ getRuntimeConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/url-parser */ "./node_modules/@aws-sdk/url-parser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/util-base64 */ "./node_modules/@aws-sdk/util-base64/dist-es/index.js");
/* harmony import */ var _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./endpoint/endpointResolver */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/endpointResolver.js");




const getRuntimeConfig = (config) => ({
    apiVersion: "2014-06-30",
    base64Decoder: config?.base64Decoder ?? _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_2__.fromBase64,
    base64Encoder: config?.base64Encoder ?? _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_2__.toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_3__.defaultEndpointResolver,
    logger: config?.logger ?? new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.NoOpLogger(),
    serviceId: config?.serviceId ?? "Cognito Identity",
    urlParser: config?.urlParser ?? _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_1__.parseUrl,
});


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/S3.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/S3.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S3": () => (/* binding */ S3)
/* harmony export */ });
/* harmony import */ var _commands_AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands/AbortMultipartUploadCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js");
/* harmony import */ var _commands_CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands/CompleteMultipartUploadCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js");
/* harmony import */ var _commands_CopyObjectCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commands/CopyObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js");
/* harmony import */ var _commands_CreateBucketCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands/CreateBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js");
/* harmony import */ var _commands_CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/CreateMultipartUploadCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js");
/* harmony import */ var _commands_DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/DeleteBucketAnalyticsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js");
/* harmony import */ var _commands_DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/DeleteBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js");
/* harmony import */ var _commands_DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/DeleteBucketCorsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js");
/* harmony import */ var _commands_DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/DeleteBucketEncryptionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js");
/* harmony import */ var _commands_DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/DeleteBucketIntelligentTieringConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js");
/* harmony import */ var _commands_DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commands/DeleteBucketInventoryConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js");
/* harmony import */ var _commands_DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commands/DeleteBucketLifecycleCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js");
/* harmony import */ var _commands_DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./commands/DeleteBucketMetricsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js");
/* harmony import */ var _commands_DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./commands/DeleteBucketOwnershipControlsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js");
/* harmony import */ var _commands_DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./commands/DeleteBucketPolicyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js");
/* harmony import */ var _commands_DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./commands/DeleteBucketReplicationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js");
/* harmony import */ var _commands_DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./commands/DeleteBucketTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js");
/* harmony import */ var _commands_DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./commands/DeleteBucketWebsiteCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js");
/* harmony import */ var _commands_DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./commands/DeleteObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js");
/* harmony import */ var _commands_DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./commands/DeleteObjectsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js");
/* harmony import */ var _commands_DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./commands/DeleteObjectTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js");
/* harmony import */ var _commands_DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./commands/DeletePublicAccessBlockCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js");
/* harmony import */ var _commands_GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./commands/GetBucketAccelerateConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./commands/GetBucketAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js");
/* harmony import */ var _commands_GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./commands/GetBucketAnalyticsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./commands/GetBucketCorsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js");
/* harmony import */ var _commands_GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./commands/GetBucketEncryptionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js");
/* harmony import */ var _commands_GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./commands/GetBucketIntelligentTieringConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./commands/GetBucketInventoryConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./commands/GetBucketLifecycleConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./commands/GetBucketLocationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js");
/* harmony import */ var _commands_GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./commands/GetBucketLoggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js");
/* harmony import */ var _commands_GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./commands/GetBucketMetricsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./commands/GetBucketNotificationConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js");
/* harmony import */ var _commands_GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./commands/GetBucketOwnershipControlsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js");
/* harmony import */ var _commands_GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./commands/GetBucketPolicyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js");
/* harmony import */ var _commands_GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./commands/GetBucketPolicyStatusCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js");
/* harmony import */ var _commands_GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./commands/GetBucketReplicationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js");
/* harmony import */ var _commands_GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./commands/GetBucketRequestPaymentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js");
/* harmony import */ var _commands_GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./commands/GetBucketTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js");
/* harmony import */ var _commands_GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./commands/GetBucketVersioningCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js");
/* harmony import */ var _commands_GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./commands/GetBucketWebsiteCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js");
/* harmony import */ var _commands_GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./commands/GetObjectAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js");
/* harmony import */ var _commands_GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./commands/GetObjectAttributesCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js");
/* harmony import */ var _commands_GetObjectCommand__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./commands/GetObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js");
/* harmony import */ var _commands_GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./commands/GetObjectLegalHoldCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js");
/* harmony import */ var _commands_GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./commands/GetObjectLockConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js");
/* harmony import */ var _commands_GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./commands/GetObjectRetentionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js");
/* harmony import */ var _commands_GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./commands/GetObjectTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js");
/* harmony import */ var _commands_GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./commands/GetObjectTorrentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js");
/* harmony import */ var _commands_GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./commands/GetPublicAccessBlockCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js");
/* harmony import */ var _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./commands/HeadBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js");
/* harmony import */ var _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./commands/HeadObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js");
/* harmony import */ var _commands_ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./commands/ListBucketAnalyticsConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js");
/* harmony import */ var _commands_ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./commands/ListBucketIntelligentTieringConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js");
/* harmony import */ var _commands_ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./commands/ListBucketInventoryConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js");
/* harmony import */ var _commands_ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./commands/ListBucketMetricsConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js");
/* harmony import */ var _commands_ListBucketsCommand__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./commands/ListBucketsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js");
/* harmony import */ var _commands_ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./commands/ListMultipartUploadsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js");
/* harmony import */ var _commands_ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./commands/ListObjectsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js");
/* harmony import */ var _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./commands/ListObjectsV2Command */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js");
/* harmony import */ var _commands_ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./commands/ListObjectVersionsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js");
/* harmony import */ var _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./commands/ListPartsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js");
/* harmony import */ var _commands_PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./commands/PutBucketAccelerateConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./commands/PutBucketAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js");
/* harmony import */ var _commands_PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./commands/PutBucketAnalyticsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./commands/PutBucketCorsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js");
/* harmony import */ var _commands_PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./commands/PutBucketEncryptionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js");
/* harmony import */ var _commands_PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./commands/PutBucketIntelligentTieringConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./commands/PutBucketInventoryConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./commands/PutBucketLifecycleConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./commands/PutBucketLoggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js");
/* harmony import */ var _commands_PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./commands/PutBucketMetricsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./commands/PutBucketNotificationConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js");
/* harmony import */ var _commands_PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./commands/PutBucketOwnershipControlsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js");
/* harmony import */ var _commands_PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./commands/PutBucketPolicyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js");
/* harmony import */ var _commands_PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./commands/PutBucketReplicationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js");
/* harmony import */ var _commands_PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./commands/PutBucketRequestPaymentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js");
/* harmony import */ var _commands_PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./commands/PutBucketTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js");
/* harmony import */ var _commands_PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./commands/PutBucketVersioningCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js");
/* harmony import */ var _commands_PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./commands/PutBucketWebsiteCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js");
/* harmony import */ var _commands_PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./commands/PutObjectAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js");
/* harmony import */ var _commands_PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./commands/PutObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js");
/* harmony import */ var _commands_PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./commands/PutObjectLegalHoldCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js");
/* harmony import */ var _commands_PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./commands/PutObjectLockConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js");
/* harmony import */ var _commands_PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./commands/PutObjectRetentionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js");
/* harmony import */ var _commands_PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./commands/PutObjectTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js");
/* harmony import */ var _commands_PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./commands/PutPublicAccessBlockCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js");
/* harmony import */ var _commands_RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./commands/RestoreObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js");
/* harmony import */ var _commands_SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./commands/SelectObjectContentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js");
/* harmony import */ var _commands_UploadPartCommand__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./commands/UploadPartCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js");
/* harmony import */ var _commands_UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./commands/UploadPartCopyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js");
/* harmony import */ var _commands_WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./commands/WriteGetObjectResponseCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js");
/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./S3Client */ "./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js");






























































































class S3 extends _S3Client__WEBPACK_IMPORTED_MODULE_0__.S3Client {
    abortMultipartUpload(args, optionsOrCb, cb) {
        const command = new _commands_AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__.AbortMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    completeMultipartUpload(args, optionsOrCb, cb) {
        const command = new _commands_CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_2__.CompleteMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    copyObject(args, optionsOrCb, cb) {
        const command = new _commands_CopyObjectCommand__WEBPACK_IMPORTED_MODULE_3__.CopyObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createBucket(args, optionsOrCb, cb) {
        const command = new _commands_CreateBucketCommand__WEBPACK_IMPORTED_MODULE_4__.CreateBucketCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createMultipartUpload(args, optionsOrCb, cb) {
        const command = new _commands_CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_5__.CreateMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucket(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__.DeleteBucketCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_7__.DeleteBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketCors(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_8__.DeleteBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketEncryption(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_9__.DeleteBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__.DeleteBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketInventoryConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_11__.DeleteBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketLifecycle(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_12__.DeleteBucketLifecycleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketMetricsConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_13__.DeleteBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketOwnershipControls(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_14__.DeleteBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketPolicy(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_15__.DeleteBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketReplication(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_16__.DeleteBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketTagging(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_17__.DeleteBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBucketWebsite(args, optionsOrCb, cb) {
        const command = new _commands_DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_18__.DeleteBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteObject(args, optionsOrCb, cb) {
        const command = new _commands_DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_19__.DeleteObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteObjects(args, optionsOrCb, cb) {
        const command = new _commands_DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__.DeleteObjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteObjectTagging(args, optionsOrCb, cb) {
        const command = new _commands_DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_21__.DeleteObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePublicAccessBlock(args, optionsOrCb, cb) {
        const command = new _commands_DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_22__.DeletePublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketAccelerateConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_23__.GetBucketAccelerateConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketAcl(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_24__.GetBucketAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_25__.GetBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketCors(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_26__.GetBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketEncryption(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_27__.GetBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__.GetBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketInventoryConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__.GetBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketLifecycleConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_30__.GetBucketLifecycleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketLocation(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_31__.GetBucketLocationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketLogging(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_32__.GetBucketLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketMetricsConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__.GetBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketNotificationConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_34__.GetBucketNotificationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketOwnershipControls(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_35__.GetBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketPolicy(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_36__.GetBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketPolicyStatus(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_37__.GetBucketPolicyStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketReplication(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_38__.GetBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketRequestPayment(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_39__.GetBucketRequestPaymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketTagging(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_40__.GetBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketVersioning(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_41__.GetBucketVersioningCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBucketWebsite(args, optionsOrCb, cb) {
        const command = new _commands_GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_42__.GetBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObject(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectCommand__WEBPACK_IMPORTED_MODULE_43__.GetObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectAcl(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_44__.GetObjectAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectAttributes(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_45__.GetObjectAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectLegalHold(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_46__.GetObjectLegalHoldCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectLockConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_47__.GetObjectLockConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectRetention(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_48__.GetObjectRetentionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectTagging(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_49__.GetObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getObjectTorrent(args, optionsOrCb, cb) {
        const command = new _commands_GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_50__.GetObjectTorrentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPublicAccessBlock(args, optionsOrCb, cb) {
        const command = new _commands_GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_51__.GetPublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    headBucket(args, optionsOrCb, cb) {
        const command = new _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_52__.HeadBucketCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    headObject(args, optionsOrCb, cb) {
        const command = new _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_53__.HeadObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listBucketAnalyticsConfigurations(args, optionsOrCb, cb) {
        const command = new _commands_ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__.ListBucketAnalyticsConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listBucketIntelligentTieringConfigurations(args, optionsOrCb, cb) {
        const command = new _commands_ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__.ListBucketIntelligentTieringConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listBucketInventoryConfigurations(args, optionsOrCb, cb) {
        const command = new _commands_ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__.ListBucketInventoryConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listBucketMetricsConfigurations(args, optionsOrCb, cb) {
        const command = new _commands_ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_57__.ListBucketMetricsConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listBuckets(args, optionsOrCb, cb) {
        const command = new _commands_ListBucketsCommand__WEBPACK_IMPORTED_MODULE_58__.ListBucketsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listMultipartUploads(args, optionsOrCb, cb) {
        const command = new _commands_ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_59__.ListMultipartUploadsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listObjects(args, optionsOrCb, cb) {
        const command = new _commands_ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__.ListObjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listObjectsV2(args, optionsOrCb, cb) {
        const command = new _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__.ListObjectsV2Command(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listObjectVersions(args, optionsOrCb, cb) {
        const command = new _commands_ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_62__.ListObjectVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listParts(args, optionsOrCb, cb) {
        const command = new _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_63__.ListPartsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketAccelerateConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_64__.PutBucketAccelerateConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketAcl(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_65__.PutBucketAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_66__.PutBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketCors(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_67__.PutBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketEncryption(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_68__.PutBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__.PutBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketInventoryConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__.PutBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketLifecycleConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_71__.PutBucketLifecycleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketLogging(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_72__.PutBucketLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketMetricsConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__.PutBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketNotificationConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_74__.PutBucketNotificationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketOwnershipControls(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_75__.PutBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketPolicy(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_76__.PutBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketReplication(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_77__.PutBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketRequestPayment(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_78__.PutBucketRequestPaymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketTagging(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_79__.PutBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketVersioning(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_80__.PutBucketVersioningCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putBucketWebsite(args, optionsOrCb, cb) {
        const command = new _commands_PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_81__.PutBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putObject(args, optionsOrCb, cb) {
        const command = new _commands_PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__.PutObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putObjectAcl(args, optionsOrCb, cb) {
        const command = new _commands_PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_83__.PutObjectAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putObjectLegalHold(args, optionsOrCb, cb) {
        const command = new _commands_PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_84__.PutObjectLegalHoldCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putObjectLockConfiguration(args, optionsOrCb, cb) {
        const command = new _commands_PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_85__.PutObjectLockConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putObjectRetention(args, optionsOrCb, cb) {
        const command = new _commands_PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_86__.PutObjectRetentionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putObjectTagging(args, optionsOrCb, cb) {
        const command = new _commands_PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_87__.PutObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putPublicAccessBlock(args, optionsOrCb, cb) {
        const command = new _commands_PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_88__.PutPublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    restoreObject(args, optionsOrCb, cb) {
        const command = new _commands_RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_89__.RestoreObjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    selectObjectContent(args, optionsOrCb, cb) {
        const command = new _commands_SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_90__.SelectObjectContentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    uploadPart(args, optionsOrCb, cb) {
        const command = new _commands_UploadPartCommand__WEBPACK_IMPORTED_MODULE_91__.UploadPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    uploadPartCopy(args, optionsOrCb, cb) {
        const command = new _commands_UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_92__.UploadPartCopyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    writeGetObjectResponse(args, optionsOrCb, cb) {
        const command = new _commands_WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_93__.WriteGetObjectResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S3Client": () => (/* binding */ S3Client)
/* harmony export */ });
/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/config-resolver */ "./node_modules/@aws-sdk/config-resolver/dist-es/index.js");
/* harmony import */ var _aws_sdk_eventstream_serde_config_resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/eventstream-serde-config-resolver */ "./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-content-length */ "./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_expect_continue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-expect-continue */ "./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */ "./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/middleware-logger */ "./node_modules/@aws-sdk/middleware-logger/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */ "./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ "./node_modules/@aws-sdk/middleware-retry/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./endpoint/EndpointParameters */ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js");
/* harmony import */ var _runtimeConfig__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./runtimeConfig */ "./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js");















class S3Client extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_12__.Client {
    constructor(configuration) {
        const _config_0 = (0,_runtimeConfig__WEBPACK_IMPORTED_MODULE_13__.getRuntimeConfig)(configuration);
        const _config_1 = (0,_endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_14__.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0,_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__.resolveRegionConfig)(_config_1);
        const _config_3 = (0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointConfig)(_config_2);
        const _config_4 = (0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.resolveRetryConfig)(_config_3);
        const _config_5 = (0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_5__.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_10__.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_9__.resolveS3Config)(_config_6);
        const _config_8 = (0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_11__.resolveUserAgentConfig)(_config_7);
        const _config_9 = (0,_aws_sdk_eventstream_serde_config_resolver__WEBPACK_IMPORTED_MODULE_1__.resolveEventStreamSerdeConfig)(_config_8);
        super(_config_9);
        this.config = _config_9;
        this.middlewareStack.use((0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.getRetryPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_2__.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_5__.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_6__.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_7__.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_10__.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_9__.getValidateBucketNamePlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_expect_continue__WEBPACK_IMPORTED_MODULE_4__.getAddExpectContinuePlugin)(this.config));
        this.middlewareStack.use((0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_11__.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbortMultipartUploadCommand": () => (/* binding */ AbortMultipartUploadCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class AbortMultipartUploadCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, AbortMultipartUploadCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "AbortMultipartUploadCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlAbortMultipartUploadCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlAbortMultipartUploadCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CompleteMultipartUploadCommand": () => (/* binding */ CompleteMultipartUploadCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");







class CompleteMultipartUploadCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CompleteMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CompleteMultipartUploadCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CompleteMultipartUploadRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CompleteMultipartUploadOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlCompleteMultipartUploadCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlCompleteMultipartUploadCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CopyObjectCommand": () => (/* binding */ CopyObjectCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");







class CopyObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CopyObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CopyObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CopyObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CopyObjectOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlCopyObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlCopyObjectCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateBucketCommand": () => (/* binding */ CreateBucketCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_location_constraint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-location-constraint */ "./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class CreateBucketCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CreateBucketCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_location_constraint__WEBPACK_IMPORTED_MODULE_1__.getLocationConstraintPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateBucketCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateBucketRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateBucketOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlCreateBucketCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlCreateBucketCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateMultipartUploadCommand": () => (/* binding */ CreateMultipartUploadCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class CreateMultipartUploadCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CreateMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateMultipartUploadCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateMultipartUploadRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateMultipartUploadOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlCreateMultipartUploadCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlCreateMultipartUploadCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketAnalyticsConfigurationCommand": () => (/* binding */ DeleteBucketAnalyticsConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketAnalyticsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketCommand": () => (/* binding */ DeleteBucketCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketCorsCommand": () => (/* binding */ DeleteBucketCorsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketCorsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCorsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketCorsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketCorsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketCorsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketEncryptionCommand": () => (/* binding */ DeleteBucketEncryptionCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketEncryptionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketEncryptionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketEncryptionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketEncryptionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketEncryptionCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketIntelligentTieringConfigurationCommand": () => (/* binding */ DeleteBucketIntelligentTieringConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketIntelligentTieringConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketInventoryConfigurationCommand": () => (/* binding */ DeleteBucketInventoryConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketInventoryConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketLifecycleCommand": () => (/* binding */ DeleteBucketLifecycleCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketLifecycleCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketLifecycleCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketLifecycleRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketLifecycleCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketLifecycleCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketMetricsConfigurationCommand": () => (/* binding */ DeleteBucketMetricsConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketMetricsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketOwnershipControlsCommand": () => (/* binding */ DeleteBucketOwnershipControlsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketOwnershipControlsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketOwnershipControlsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketOwnershipControlsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketPolicyCommand": () => (/* binding */ DeleteBucketPolicyCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketPolicyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketPolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketPolicyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketPolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketPolicyCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketReplicationCommand": () => (/* binding */ DeleteBucketReplicationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketReplicationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketReplicationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketReplicationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketReplicationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketReplicationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketTaggingCommand": () => (/* binding */ DeleteBucketTaggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketTaggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteBucketWebsiteCommand": () => (/* binding */ DeleteBucketWebsiteCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteBucketWebsiteCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketWebsiteCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketWebsiteRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketWebsiteCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketWebsiteCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteObjectCommand": () => (/* binding */ DeleteObjectCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteObjectCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteObjectCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteObjectTaggingCommand": () => (/* binding */ DeleteObjectTaggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeleteObjectTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteObjectTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteObjectTaggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteObjectsCommand": () => (/* binding */ DeleteObjectsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class DeleteObjectsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteObjectsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteObjectsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteObjectsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlDeleteObjectsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlDeleteObjectsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeletePublicAccessBlockCommand": () => (/* binding */ DeletePublicAccessBlockCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class DeletePublicAccessBlockCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeletePublicAccessBlockCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeletePublicAccessBlockRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeletePublicAccessBlockCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeletePublicAccessBlockCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketAccelerateConfigurationCommand": () => (/* binding */ GetBucketAccelerateConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketAccelerateConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketAccelerateConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketAclCommand": () => (/* binding */ GetBucketAclCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketAclCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketAnalyticsConfigurationCommand": () => (/* binding */ GetBucketAnalyticsConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketAnalyticsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketCorsCommand": () => (/* binding */ GetBucketCorsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketCorsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketCorsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketCorsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketCorsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketEncryptionCommand": () => (/* binding */ GetBucketEncryptionCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketEncryptionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketEncryptionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketEncryptionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketEncryptionCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketIntelligentTieringConfigurationCommand": () => (/* binding */ GetBucketIntelligentTieringConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketIntelligentTieringConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketInventoryConfigurationCommand": () => (/* binding */ GetBucketInventoryConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketInventoryConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketInventoryConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketInventoryConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketLifecycleConfigurationCommand": () => (/* binding */ GetBucketLifecycleConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketLifecycleConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketLifecycleConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketLocationCommand": () => (/* binding */ GetBucketLocationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketLocationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketLocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLocationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketLocationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketLocationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketLoggingCommand": () => (/* binding */ GetBucketLoggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketLoggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketLoggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLoggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketLoggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketLoggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketMetricsConfigurationCommand": () => (/* binding */ GetBucketMetricsConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketMetricsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketMetricsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketMetricsConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketNotificationConfigurationCommand": () => (/* binding */ GetBucketNotificationConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketNotificationConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketNotificationConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.NotificationConfigurationFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketNotificationConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketNotificationConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketOwnershipControlsCommand": () => (/* binding */ GetBucketOwnershipControlsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketOwnershipControlsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketOwnershipControlsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketOwnershipControlsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketPolicyCommand": () => (/* binding */ GetBucketPolicyCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketPolicyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketPolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketPolicyCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketPolicyStatusCommand": () => (/* binding */ GetBucketPolicyStatusCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketPolicyStatusCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyStatusCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketPolicyStatusCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketPolicyStatusCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketReplicationCommand": () => (/* binding */ GetBucketReplicationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketReplicationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketReplicationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketReplicationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketReplicationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketRequestPaymentCommand": () => (/* binding */ GetBucketRequestPaymentCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketRequestPaymentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketRequestPaymentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketRequestPaymentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketRequestPaymentCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketTaggingCommand": () => (/* binding */ GetBucketTaggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketTaggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketVersioningCommand": () => (/* binding */ GetBucketVersioningCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketVersioningCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketVersioningCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketVersioningCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketVersioningCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketVersioningCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetBucketWebsiteCommand": () => (/* binding */ GetBucketWebsiteCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetBucketWebsiteCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketWebsiteCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketWebsiteCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketWebsiteCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectAclCommand": () => (/* binding */ GetObjectAclCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetObjectAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectAclCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectAttributesCommand": () => (/* binding */ GetObjectAttributesCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class GetObjectAttributesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectAttributesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAttributesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetObjectAttributesRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetObjectAttributesOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlGetObjectAttributesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlGetObjectAttributesCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectCommand": () => (/* binding */ GetObjectCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");







class GetObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestChecksumRequired: false,
            requestValidationModeMember: "ChecksumMode",
            responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"],
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.GetObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.GetObjectOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlGetObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlGetObjectCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectLegalHoldCommand": () => (/* binding */ GetObjectLegalHoldCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetObjectLegalHoldCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectLegalHoldCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLegalHoldCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectLegalHoldCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectLegalHoldCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectLockConfigurationCommand": () => (/* binding */ GetObjectLockConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetObjectLockConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLockConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectLockConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectLockConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectRetentionCommand": () => (/* binding */ GetObjectRetentionCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetObjectRetentionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectRetentionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectRetentionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectRetentionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectRetentionCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectTaggingCommand": () => (/* binding */ GetObjectTaggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetObjectTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectTaggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetObjectTorrentCommand": () => (/* binding */ GetObjectTorrentCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetObjectTorrentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectTorrentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTorrentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectTorrentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectTorrentCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetPublicAccessBlockCommand": () => (/* binding */ GetPublicAccessBlockCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class GetPublicAccessBlockCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetPublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetPublicAccessBlockCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetPublicAccessBlockCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetPublicAccessBlockCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeadBucketCommand": () => (/* binding */ HeadBucketCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class HeadBucketCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, HeadBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadBucketCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.HeadBucketRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlHeadBucketCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlHeadBucketCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeadObjectCommand": () => (/* binding */ HeadObjectCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class HeadObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, HeadObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.HeadObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.HeadObjectOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlHeadObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlHeadObjectCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListBucketAnalyticsConfigurationsCommand": () => (/* binding */ ListBucketAnalyticsConfigurationsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListBucketAnalyticsConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketAnalyticsConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListBucketIntelligentTieringConfigurationsCommand": () => (/* binding */ ListBucketIntelligentTieringConfigurationsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListBucketIntelligentTieringConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListBucketInventoryConfigurationsCommand": () => (/* binding */ ListBucketInventoryConfigurationsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListBucketInventoryConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketInventoryConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketInventoryConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketInventoryConfigurationsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListBucketMetricsConfigurationsCommand": () => (/* binding */ ListBucketMetricsConfigurationsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListBucketMetricsConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketMetricsConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketMetricsConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketMetricsConfigurationsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListBucketsCommand": () => (/* binding */ ListBucketsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListBucketsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (input) => input,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListMultipartUploadsCommand": () => (/* binding */ ListMultipartUploadsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListMultipartUploadsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListMultipartUploadsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListMultipartUploadsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListMultipartUploadsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListMultipartUploadsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListObjectVersionsCommand": () => (/* binding */ ListObjectVersionsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListObjectVersionsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListObjectVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectVersionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListObjectVersionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListObjectVersionsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListObjectsCommand": () => (/* binding */ ListObjectsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListObjectsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListObjectsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListObjectsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListObjectsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListObjectsV2Command": () => (/* binding */ ListObjectsV2Command)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class ListObjectsV2Command extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListObjectsV2Command.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsV2Command";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2RequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2OutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListObjectsV2Command)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListObjectsV2Command)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListPartsCommand": () => (/* binding */ ListPartsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class ListPartsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListPartsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListPartsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListPartsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListPartsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlListPartsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlListPartsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketAccelerateConfigurationCommand": () => (/* binding */ PutBucketAccelerateConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketAccelerateConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketAccelerateConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketAccelerateConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketAclCommand": () => (/* binding */ PutBucketAclCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketAclCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketAnalyticsConfigurationCommand": () => (/* binding */ PutBucketAnalyticsConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class PutBucketAnalyticsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketCorsCommand": () => (/* binding */ PutBucketCorsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketCorsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketCorsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketCorsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketCorsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketCorsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketCorsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketEncryptionCommand": () => (/* binding */ PutBucketEncryptionCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketEncryptionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketEncryptionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketEncryptionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketEncryptionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketEncryptionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketEncryptionCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketIntelligentTieringConfigurationCommand": () => (/* binding */ PutBucketIntelligentTieringConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class PutBucketIntelligentTieringConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketInventoryConfigurationCommand": () => (/* binding */ PutBucketInventoryConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class PutBucketInventoryConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketInventoryConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketInventoryConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketInventoryConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketLifecycleConfigurationCommand": () => (/* binding */ PutBucketLifecycleConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketLifecycleConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketLifecycleConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketLifecycleConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketLoggingCommand": () => (/* binding */ PutBucketLoggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketLoggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketLoggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLoggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketLoggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketLoggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketLoggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketMetricsConfigurationCommand": () => (/* binding */ PutBucketMetricsConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class PutBucketMetricsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketMetricsConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketMetricsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketMetricsConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketNotificationConfigurationCommand": () => (/* binding */ PutBucketNotificationConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");





class PutBucketNotificationConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketNotificationConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketNotificationConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketNotificationConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketOwnershipControlsCommand": () => (/* binding */ PutBucketOwnershipControlsCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketOwnershipControlsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, { input: this.input, requestChecksumRequired: true }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketOwnershipControlsRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketOwnershipControlsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketOwnershipControlsCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketPolicyCommand": () => (/* binding */ PutBucketPolicyCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketPolicyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketPolicyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketPolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketPolicyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketPolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketPolicyCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketReplicationCommand": () => (/* binding */ PutBucketReplicationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketReplicationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketReplicationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketReplicationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketReplicationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketReplicationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketReplicationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketRequestPaymentCommand": () => (/* binding */ PutBucketRequestPaymentCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketRequestPaymentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketRequestPaymentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketRequestPaymentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketRequestPaymentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketRequestPaymentCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketTaggingCommand": () => (/* binding */ PutBucketTaggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketTaggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketVersioningCommand": () => (/* binding */ PutBucketVersioningCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketVersioningCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketVersioningCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketVersioningCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketVersioningRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketVersioningCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketVersioningCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutBucketWebsiteCommand": () => (/* binding */ PutBucketWebsiteCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutBucketWebsiteCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketWebsiteCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketWebsiteCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketWebsiteRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketWebsiteCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketWebsiteCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutObjectAclCommand": () => (/* binding */ PutObjectAclCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutObjectAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectAclRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectAclOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectAclCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutObjectCommand": () => (/* binding */ PutObjectCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");








class PutObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_5__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_2__.getCheckContentLengthHeaderPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_4__.getSsecPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_6__.PutObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_6__.PutObjectOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_7__.serializeAws_restXmlPutObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_7__.deserializeAws_restXmlPutObjectCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutObjectLegalHoldCommand": () => (/* binding */ PutObjectLegalHoldCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutObjectLegalHoldCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectLegalHoldCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLegalHoldCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLegalHoldRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLegalHoldOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectLegalHoldCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectLegalHoldCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutObjectLockConfigurationCommand": () => (/* binding */ PutObjectLockConfigurationCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutObjectLockConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLockConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLockConfigurationRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLockConfigurationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectLockConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectLockConfigurationCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutObjectRetentionCommand": () => (/* binding */ PutObjectRetentionCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutObjectRetentionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectRetentionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectRetentionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectRetentionRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectRetentionOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectRetentionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectRetentionCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutObjectTaggingCommand": () => (/* binding */ PutObjectTaggingCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutObjectTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectTaggingRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectTaggingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectTaggingCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PutPublicAccessBlockCommand": () => (/* binding */ PutPublicAccessBlockCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class PutPublicAccessBlockCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutPublicAccessBlockCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutPublicAccessBlockCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutPublicAccessBlockRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutPublicAccessBlockCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutPublicAccessBlockCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RestoreObjectCommand": () => (/* binding */ RestoreObjectCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class RestoreObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, RestoreObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "RestoreObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.RestoreObjectRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.RestoreObjectOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlRestoreObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlRestoreObjectCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectObjectContentCommand": () => (/* binding */ SelectObjectContentCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class SelectObjectContentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, SelectObjectContentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "SelectObjectContentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.SelectObjectContentRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.SelectObjectContentOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlSelectObjectContentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlSelectObjectContentCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UploadPartCommand": () => (/* binding */ UploadPartCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");







class UploadPartCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UploadPartCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false,
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlUploadPartCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlUploadPartCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UploadPartCopyCommand": () => (/* binding */ UploadPartCopyCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");







class UploadPartCopyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            Bucket: { type: "contextParams", name: "Bucket" },
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UploadPartCopyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCopyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartCopyRequestFilterSensitiveLog,
            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartCopyOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlUploadPartCopyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlUploadPartCopyCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WriteGetObjectResponseCommand": () => (/* binding */ WriteGetObjectResponseCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js");






class WriteGetObjectResponseCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {
    constructor(input) {
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
            UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
            DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
            Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
            UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, WriteGetObjectResponseCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getWriteGetObjectResponseEndpointPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "WriteGetObjectResponseCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.WriteGetObjectResponseRequestFilterSensitiveLog,
            outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlWriteGetObjectResponseCommand)(input, context);
    }
    deserialize(output, context) {
        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlWriteGetObjectResponseCommand)(output, context);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbortMultipartUploadCommand": () => (/* reexport safe */ _AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_0__.AbortMultipartUploadCommand),
/* harmony export */   "CompleteMultipartUploadCommand": () => (/* reexport safe */ _CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__.CompleteMultipartUploadCommand),
/* harmony export */   "CopyObjectCommand": () => (/* reexport safe */ _CopyObjectCommand__WEBPACK_IMPORTED_MODULE_2__.CopyObjectCommand),
/* harmony export */   "CreateBucketCommand": () => (/* reexport safe */ _CreateBucketCommand__WEBPACK_IMPORTED_MODULE_3__.CreateBucketCommand),
/* harmony export */   "CreateMultipartUploadCommand": () => (/* reexport safe */ _CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_4__.CreateMultipartUploadCommand),
/* harmony export */   "DeleteBucketAnalyticsConfigurationCommand": () => (/* reexport safe */ _DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_5__.DeleteBucketAnalyticsConfigurationCommand),
/* harmony export */   "DeleteBucketCommand": () => (/* reexport safe */ _DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__.DeleteBucketCommand),
/* harmony export */   "DeleteBucketCorsCommand": () => (/* reexport safe */ _DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_7__.DeleteBucketCorsCommand),
/* harmony export */   "DeleteBucketEncryptionCommand": () => (/* reexport safe */ _DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_8__.DeleteBucketEncryptionCommand),
/* harmony export */   "DeleteBucketIntelligentTieringConfigurationCommand": () => (/* reexport safe */ _DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_9__.DeleteBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "DeleteBucketInventoryConfigurationCommand": () => (/* reexport safe */ _DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__.DeleteBucketInventoryConfigurationCommand),
/* harmony export */   "DeleteBucketLifecycleCommand": () => (/* reexport safe */ _DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_11__.DeleteBucketLifecycleCommand),
/* harmony export */   "DeleteBucketMetricsConfigurationCommand": () => (/* reexport safe */ _DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_12__.DeleteBucketMetricsConfigurationCommand),
/* harmony export */   "DeleteBucketOwnershipControlsCommand": () => (/* reexport safe */ _DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_13__.DeleteBucketOwnershipControlsCommand),
/* harmony export */   "DeleteBucketPolicyCommand": () => (/* reexport safe */ _DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_14__.DeleteBucketPolicyCommand),
/* harmony export */   "DeleteBucketReplicationCommand": () => (/* reexport safe */ _DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_15__.DeleteBucketReplicationCommand),
/* harmony export */   "DeleteBucketTaggingCommand": () => (/* reexport safe */ _DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_16__.DeleteBucketTaggingCommand),
/* harmony export */   "DeleteBucketWebsiteCommand": () => (/* reexport safe */ _DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_17__.DeleteBucketWebsiteCommand),
/* harmony export */   "DeleteObjectCommand": () => (/* reexport safe */ _DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_18__.DeleteObjectCommand),
/* harmony export */   "DeleteObjectTaggingCommand": () => (/* reexport safe */ _DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_19__.DeleteObjectTaggingCommand),
/* harmony export */   "DeleteObjectsCommand": () => (/* reexport safe */ _DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__.DeleteObjectsCommand),
/* harmony export */   "DeletePublicAccessBlockCommand": () => (/* reexport safe */ _DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_21__.DeletePublicAccessBlockCommand),
/* harmony export */   "GetBucketAccelerateConfigurationCommand": () => (/* reexport safe */ _GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_22__.GetBucketAccelerateConfigurationCommand),
/* harmony export */   "GetBucketAclCommand": () => (/* reexport safe */ _GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_23__.GetBucketAclCommand),
/* harmony export */   "GetBucketAnalyticsConfigurationCommand": () => (/* reexport safe */ _GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_24__.GetBucketAnalyticsConfigurationCommand),
/* harmony export */   "GetBucketCorsCommand": () => (/* reexport safe */ _GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_25__.GetBucketCorsCommand),
/* harmony export */   "GetBucketEncryptionCommand": () => (/* reexport safe */ _GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_26__.GetBucketEncryptionCommand),
/* harmony export */   "GetBucketIntelligentTieringConfigurationCommand": () => (/* reexport safe */ _GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_27__.GetBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "GetBucketInventoryConfigurationCommand": () => (/* reexport safe */ _GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__.GetBucketInventoryConfigurationCommand),
/* harmony export */   "GetBucketLifecycleConfigurationCommand": () => (/* reexport safe */ _GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__.GetBucketLifecycleConfigurationCommand),
/* harmony export */   "GetBucketLocationCommand": () => (/* reexport safe */ _GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_30__.GetBucketLocationCommand),
/* harmony export */   "GetBucketLoggingCommand": () => (/* reexport safe */ _GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_31__.GetBucketLoggingCommand),
/* harmony export */   "GetBucketMetricsConfigurationCommand": () => (/* reexport safe */ _GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_32__.GetBucketMetricsConfigurationCommand),
/* harmony export */   "GetBucketNotificationConfigurationCommand": () => (/* reexport safe */ _GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__.GetBucketNotificationConfigurationCommand),
/* harmony export */   "GetBucketOwnershipControlsCommand": () => (/* reexport safe */ _GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_34__.GetBucketOwnershipControlsCommand),
/* harmony export */   "GetBucketPolicyCommand": () => (/* reexport safe */ _GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_35__.GetBucketPolicyCommand),
/* harmony export */   "GetBucketPolicyStatusCommand": () => (/* reexport safe */ _GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_36__.GetBucketPolicyStatusCommand),
/* harmony export */   "GetBucketReplicationCommand": () => (/* reexport safe */ _GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_37__.GetBucketReplicationCommand),
/* harmony export */   "GetBucketRequestPaymentCommand": () => (/* reexport safe */ _GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_38__.GetBucketRequestPaymentCommand),
/* harmony export */   "GetBucketTaggingCommand": () => (/* reexport safe */ _GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_39__.GetBucketTaggingCommand),
/* harmony export */   "GetBucketVersioningCommand": () => (/* reexport safe */ _GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_40__.GetBucketVersioningCommand),
/* harmony export */   "GetBucketWebsiteCommand": () => (/* reexport safe */ _GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_41__.GetBucketWebsiteCommand),
/* harmony export */   "GetObjectAclCommand": () => (/* reexport safe */ _GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_42__.GetObjectAclCommand),
/* harmony export */   "GetObjectAttributesCommand": () => (/* reexport safe */ _GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_43__.GetObjectAttributesCommand),
/* harmony export */   "GetObjectCommand": () => (/* reexport safe */ _GetObjectCommand__WEBPACK_IMPORTED_MODULE_44__.GetObjectCommand),
/* harmony export */   "GetObjectLegalHoldCommand": () => (/* reexport safe */ _GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_45__.GetObjectLegalHoldCommand),
/* harmony export */   "GetObjectLockConfigurationCommand": () => (/* reexport safe */ _GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_46__.GetObjectLockConfigurationCommand),
/* harmony export */   "GetObjectRetentionCommand": () => (/* reexport safe */ _GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_47__.GetObjectRetentionCommand),
/* harmony export */   "GetObjectTaggingCommand": () => (/* reexport safe */ _GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_48__.GetObjectTaggingCommand),
/* harmony export */   "GetObjectTorrentCommand": () => (/* reexport safe */ _GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_49__.GetObjectTorrentCommand),
/* harmony export */   "GetPublicAccessBlockCommand": () => (/* reexport safe */ _GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_50__.GetPublicAccessBlockCommand),
/* harmony export */   "HeadBucketCommand": () => (/* reexport safe */ _HeadBucketCommand__WEBPACK_IMPORTED_MODULE_51__.HeadBucketCommand),
/* harmony export */   "HeadObjectCommand": () => (/* reexport safe */ _HeadObjectCommand__WEBPACK_IMPORTED_MODULE_52__.HeadObjectCommand),
/* harmony export */   "ListBucketAnalyticsConfigurationsCommand": () => (/* reexport safe */ _ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_53__.ListBucketAnalyticsConfigurationsCommand),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsCommand": () => (/* reexport safe */ _ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__.ListBucketIntelligentTieringConfigurationsCommand),
/* harmony export */   "ListBucketInventoryConfigurationsCommand": () => (/* reexport safe */ _ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__.ListBucketInventoryConfigurationsCommand),
/* harmony export */   "ListBucketMetricsConfigurationsCommand": () => (/* reexport safe */ _ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__.ListBucketMetricsConfigurationsCommand),
/* harmony export */   "ListBucketsCommand": () => (/* reexport safe */ _ListBucketsCommand__WEBPACK_IMPORTED_MODULE_57__.ListBucketsCommand),
/* harmony export */   "ListMultipartUploadsCommand": () => (/* reexport safe */ _ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_58__.ListMultipartUploadsCommand),
/* harmony export */   "ListObjectVersionsCommand": () => (/* reexport safe */ _ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_59__.ListObjectVersionsCommand),
/* harmony export */   "ListObjectsCommand": () => (/* reexport safe */ _ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__.ListObjectsCommand),
/* harmony export */   "ListObjectsV2Command": () => (/* reexport safe */ _ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__.ListObjectsV2Command),
/* harmony export */   "ListPartsCommand": () => (/* reexport safe */ _ListPartsCommand__WEBPACK_IMPORTED_MODULE_62__.ListPartsCommand),
/* harmony export */   "PutBucketAccelerateConfigurationCommand": () => (/* reexport safe */ _PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_63__.PutBucketAccelerateConfigurationCommand),
/* harmony export */   "PutBucketAclCommand": () => (/* reexport safe */ _PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_64__.PutBucketAclCommand),
/* harmony export */   "PutBucketAnalyticsConfigurationCommand": () => (/* reexport safe */ _PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_65__.PutBucketAnalyticsConfigurationCommand),
/* harmony export */   "PutBucketCorsCommand": () => (/* reexport safe */ _PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_66__.PutBucketCorsCommand),
/* harmony export */   "PutBucketEncryptionCommand": () => (/* reexport safe */ _PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_67__.PutBucketEncryptionCommand),
/* harmony export */   "PutBucketIntelligentTieringConfigurationCommand": () => (/* reexport safe */ _PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_68__.PutBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "PutBucketInventoryConfigurationCommand": () => (/* reexport safe */ _PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__.PutBucketInventoryConfigurationCommand),
/* harmony export */   "PutBucketLifecycleConfigurationCommand": () => (/* reexport safe */ _PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__.PutBucketLifecycleConfigurationCommand),
/* harmony export */   "PutBucketLoggingCommand": () => (/* reexport safe */ _PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_71__.PutBucketLoggingCommand),
/* harmony export */   "PutBucketMetricsConfigurationCommand": () => (/* reexport safe */ _PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_72__.PutBucketMetricsConfigurationCommand),
/* harmony export */   "PutBucketNotificationConfigurationCommand": () => (/* reexport safe */ _PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__.PutBucketNotificationConfigurationCommand),
/* harmony export */   "PutBucketOwnershipControlsCommand": () => (/* reexport safe */ _PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_74__.PutBucketOwnershipControlsCommand),
/* harmony export */   "PutBucketPolicyCommand": () => (/* reexport safe */ _PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_75__.PutBucketPolicyCommand),
/* harmony export */   "PutBucketReplicationCommand": () => (/* reexport safe */ _PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_76__.PutBucketReplicationCommand),
/* harmony export */   "PutBucketRequestPaymentCommand": () => (/* reexport safe */ _PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_77__.PutBucketRequestPaymentCommand),
/* harmony export */   "PutBucketTaggingCommand": () => (/* reexport safe */ _PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_78__.PutBucketTaggingCommand),
/* harmony export */   "PutBucketVersioningCommand": () => (/* reexport safe */ _PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_79__.PutBucketVersioningCommand),
/* harmony export */   "PutBucketWebsiteCommand": () => (/* reexport safe */ _PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_80__.PutBucketWebsiteCommand),
/* harmony export */   "PutObjectAclCommand": () => (/* reexport safe */ _PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_81__.PutObjectAclCommand),
/* harmony export */   "PutObjectCommand": () => (/* reexport safe */ _PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__.PutObjectCommand),
/* harmony export */   "PutObjectLegalHoldCommand": () => (/* reexport safe */ _PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_83__.PutObjectLegalHoldCommand),
/* harmony export */   "PutObjectLockConfigurationCommand": () => (/* reexport safe */ _PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_84__.PutObjectLockConfigurationCommand),
/* harmony export */   "PutObjectRetentionCommand": () => (/* reexport safe */ _PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_85__.PutObjectRetentionCommand),
/* harmony export */   "PutObjectTaggingCommand": () => (/* reexport safe */ _PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_86__.PutObjectTaggingCommand),
/* harmony export */   "PutPublicAccessBlockCommand": () => (/* reexport safe */ _PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_87__.PutPublicAccessBlockCommand),
/* harmony export */   "RestoreObjectCommand": () => (/* reexport safe */ _RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_88__.RestoreObjectCommand),
/* harmony export */   "SelectObjectContentCommand": () => (/* reexport safe */ _SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_89__.SelectObjectContentCommand),
/* harmony export */   "UploadPartCommand": () => (/* reexport safe */ _UploadPartCommand__WEBPACK_IMPORTED_MODULE_90__.UploadPartCommand),
/* harmony export */   "UploadPartCopyCommand": () => (/* reexport safe */ _UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_91__.UploadPartCopyCommand),
/* harmony export */   "WriteGetObjectResponseCommand": () => (/* reexport safe */ _WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_92__.WriteGetObjectResponseCommand)
/* harmony export */ });
/* harmony import */ var _AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortMultipartUploadCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js");
/* harmony import */ var _CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompleteMultipartUploadCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js");
/* harmony import */ var _CopyObjectCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CopyObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js");
/* harmony import */ var _CreateBucketCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CreateBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js");
/* harmony import */ var _CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CreateMultipartUploadCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js");
/* harmony import */ var _DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DeleteBucketAnalyticsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js");
/* harmony import */ var _DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DeleteBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js");
/* harmony import */ var _DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DeleteBucketCorsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js");
/* harmony import */ var _DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DeleteBucketEncryptionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js");
/* harmony import */ var _DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DeleteBucketIntelligentTieringConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js");
/* harmony import */ var _DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DeleteBucketInventoryConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js");
/* harmony import */ var _DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./DeleteBucketLifecycleCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js");
/* harmony import */ var _DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DeleteBucketMetricsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js");
/* harmony import */ var _DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DeleteBucketOwnershipControlsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js");
/* harmony import */ var _DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./DeleteBucketPolicyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js");
/* harmony import */ var _DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./DeleteBucketReplicationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js");
/* harmony import */ var _DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./DeleteBucketTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js");
/* harmony import */ var _DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./DeleteBucketWebsiteCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js");
/* harmony import */ var _DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./DeleteObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js");
/* harmony import */ var _DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./DeleteObjectTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js");
/* harmony import */ var _DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./DeleteObjectsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js");
/* harmony import */ var _DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./DeletePublicAccessBlockCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js");
/* harmony import */ var _GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./GetBucketAccelerateConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js");
/* harmony import */ var _GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./GetBucketAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js");
/* harmony import */ var _GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./GetBucketAnalyticsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js");
/* harmony import */ var _GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./GetBucketCorsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js");
/* harmony import */ var _GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./GetBucketEncryptionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js");
/* harmony import */ var _GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./GetBucketIntelligentTieringConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js");
/* harmony import */ var _GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./GetBucketInventoryConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js");
/* harmony import */ var _GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./GetBucketLifecycleConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js");
/* harmony import */ var _GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./GetBucketLocationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js");
/* harmony import */ var _GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./GetBucketLoggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js");
/* harmony import */ var _GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./GetBucketMetricsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js");
/* harmony import */ var _GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./GetBucketNotificationConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js");
/* harmony import */ var _GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./GetBucketOwnershipControlsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js");
/* harmony import */ var _GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./GetBucketPolicyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js");
/* harmony import */ var _GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./GetBucketPolicyStatusCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js");
/* harmony import */ var _GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./GetBucketReplicationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js");
/* harmony import */ var _GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./GetBucketRequestPaymentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js");
/* harmony import */ var _GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./GetBucketTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js");
/* harmony import */ var _GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./GetBucketVersioningCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js");
/* harmony import */ var _GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./GetBucketWebsiteCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js");
/* harmony import */ var _GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./GetObjectAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js");
/* harmony import */ var _GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./GetObjectAttributesCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js");
/* harmony import */ var _GetObjectCommand__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./GetObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js");
/* harmony import */ var _GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./GetObjectLegalHoldCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js");
/* harmony import */ var _GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./GetObjectLockConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js");
/* harmony import */ var _GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./GetObjectRetentionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js");
/* harmony import */ var _GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./GetObjectTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js");
/* harmony import */ var _GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./GetObjectTorrentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js");
/* harmony import */ var _GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./GetPublicAccessBlockCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js");
/* harmony import */ var _HeadBucketCommand__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./HeadBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js");
/* harmony import */ var _HeadObjectCommand__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./HeadObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js");
/* harmony import */ var _ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./ListBucketAnalyticsConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js");
/* harmony import */ var _ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./ListBucketIntelligentTieringConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js");
/* harmony import */ var _ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./ListBucketInventoryConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js");
/* harmony import */ var _ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./ListBucketMetricsConfigurationsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js");
/* harmony import */ var _ListBucketsCommand__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./ListBucketsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js");
/* harmony import */ var _ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./ListMultipartUploadsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js");
/* harmony import */ var _ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./ListObjectVersionsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js");
/* harmony import */ var _ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./ListObjectsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js");
/* harmony import */ var _ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./ListObjectsV2Command */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js");
/* harmony import */ var _ListPartsCommand__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./ListPartsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js");
/* harmony import */ var _PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./PutBucketAccelerateConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js");
/* harmony import */ var _PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./PutBucketAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js");
/* harmony import */ var _PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./PutBucketAnalyticsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js");
/* harmony import */ var _PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./PutBucketCorsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js");
/* harmony import */ var _PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./PutBucketEncryptionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js");
/* harmony import */ var _PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./PutBucketIntelligentTieringConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js");
/* harmony import */ var _PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./PutBucketInventoryConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js");
/* harmony import */ var _PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./PutBucketLifecycleConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js");
/* harmony import */ var _PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./PutBucketLoggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js");
/* harmony import */ var _PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./PutBucketMetricsConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js");
/* harmony import */ var _PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./PutBucketNotificationConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js");
/* harmony import */ var _PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./PutBucketOwnershipControlsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js");
/* harmony import */ var _PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./PutBucketPolicyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js");
/* harmony import */ var _PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./PutBucketReplicationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js");
/* harmony import */ var _PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./PutBucketRequestPaymentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js");
/* harmony import */ var _PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./PutBucketTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js");
/* harmony import */ var _PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./PutBucketVersioningCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js");
/* harmony import */ var _PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./PutBucketWebsiteCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js");
/* harmony import */ var _PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./PutObjectAclCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js");
/* harmony import */ var _PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./PutObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js");
/* harmony import */ var _PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./PutObjectLegalHoldCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js");
/* harmony import */ var _PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./PutObjectLockConfigurationCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js");
/* harmony import */ var _PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./PutObjectRetentionCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js");
/* harmony import */ var _PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./PutObjectTaggingCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js");
/* harmony import */ var _PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./PutPublicAccessBlockCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js");
/* harmony import */ var _RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./RestoreObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js");
/* harmony import */ var _SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./SelectObjectContentCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js");
/* harmony import */ var _UploadPartCommand__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./UploadPartCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js");
/* harmony import */ var _UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./UploadPartCopyCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js");
/* harmony import */ var _WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./WriteGetObjectResponseCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js");































































































/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveClientEndpointParameters": () => (/* binding */ resolveClientEndpointParameters)
/* harmony export */ });
const resolveClientEndpointParameters = (options) => {
    return {
        ...options,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3",
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultEndpointResolver": () => (/* binding */ defaultEndpointResolver)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-endpoints */ "./node_modules/@aws-sdk/util-endpoints/dist-es/index.js");
/* harmony import */ var _ruleset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ruleset */ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js");


const defaultEndpointResolver = (endpointParams, context = {}) => {
    return (0,_aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.resolveEndpoint)(_ruleset__WEBPACK_IMPORTED_MODULE_1__.ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger,
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ruleSet": () => (/* binding */ ruleSet)
/* harmony export */ });
const ruleSet = {
    version: "1.0",
    parameters: {
        Bucket: {
            required: false,
            documentation: "The S3 bucket used to send the request. This is an optional parameter that will be set automatically for operations that are scoped to an S3 bucket.",
            type: "String",
        },
        Region: {
            builtIn: "AWS::Region",
            required: false,
            documentation: "The AWS region used to dispatch the request.",
            type: "String",
        },
        UseFIPS: {
            builtIn: "AWS::UseFIPS",
            required: true,
            default: false,
            documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
            type: "Boolean",
        },
        UseDualStack: {
            builtIn: "AWS::UseDualStack",
            required: true,
            default: false,
            documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
            type: "Boolean",
        },
        Endpoint: {
            builtIn: "SDK::Endpoint",
            required: false,
            documentation: "Override the endpoint used to send this request",
            type: "String",
        },
        ForcePathStyle: {
            builtIn: "AWS::S3::ForcePathStyle",
            required: false,
            documentation: "When true, force a path-style endpoint to be used where the bucket name is part of the path.",
            type: "Boolean",
        },
        Accelerate: {
            builtIn: "AWS::S3::Accelerate",
            required: true,
            default: false,
            documentation: "When true, use S3 Accelerate. NOTE: Not all regions support S3 accelerate.",
            type: "Boolean",
        },
        UseGlobalEndpoint: {
            builtIn: "AWS::S3::UseGlobalEndpoint",
            required: true,
            default: false,
            documentation: "Whether the global endpoint should be used, rather then the regional endpoint for us-east-1.",
            type: "Boolean",
        },
        UseObjectLambdaEndpoint: {
            required: false,
            documentation: "Internal parameter to use object lambda endpoint for an operation (eg: WriteGetObjectResponse)",
            type: "Boolean",
        },
        DisableAccessPoints: {
            required: false,
            documentation: "Internal parameter to disable Access Point Buckets",
            type: "Boolean",
        },
        DisableMultiRegionAccessPoints: {
            builtIn: "AWS::S3::DisableMultiRegionAccessPoints",
            required: true,
            default: false,
            documentation: "Whether multi-region access points (MRAP) should be disabled.",
            type: "Boolean",
        },
        UseArnRegion: {
            builtIn: "AWS::S3::UseArnRegion",
            required: false,
            documentation: "When an Access Point ARN is provided and this flag is enabled, the SDK MUST use the ARN's region when constructing the endpoint instead of the client's configured region.",
            type: "Boolean",
        },
    },
    rules: [
        {
            conditions: [],
            type: "tree",
            rules: [
                {
                    conditions: [
                        {
                            fn: "isSet",
                            argv: [
                                {
                                    ref: "Region",
                                },
                            ],
                        },
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [
                                        {
                                            fn: "isSet",
                                            argv: [
                                                {
                                                    ref: "Bucket",
                                                },
                                            ],
                                        },
                                        {
                                            fn: "substring",
                                            argv: [
                                                {
                                                    ref: "Bucket",
                                                },
                                                49,
                                                50,
                                                true,
                                            ],
                                            assign: "hardwareType",
                                        },
                                        {
                                            fn: "substring",
                                            argv: [
                                                {
                                                    ref: "Bucket",
                                                },
                                                8,
                                                12,
                                                true,
                                            ],
                                            assign: "regionPrefix",
                                        },
                                        {
                                            fn: "substring",
                                            argv: [
                                                {
                                                    ref: "Bucket",
                                                },
                                                0,
                                                7,
                                                true,
                                            ],
                                            assign: "abbaSuffix",
                                        },
                                        {
                                            fn: "substring",
                                            argv: [
                                                {
                                                    ref: "Bucket",
                                                },
                                                32,
                                                49,
                                                true,
                                            ],
                                            assign: "outpostId",
                                        },
                                        {
                                            fn: "aws.partition",
                                            argv: [
                                                {
                                                    ref: "Region",
                                                },
                                            ],
                                            assign: "regionPartition",
                                        },
                                        {
                                            fn: "stringEquals",
                                            argv: [
                                                {
                                                    ref: "abbaSuffix",
                                                },
                                                "--op-s3",
                                            ],
                                        },
                                    ],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    fn: "isValidHostLabel",
                                                    argv: [
                                                        {
                                                            ref: "outpostId",
                                                        },
                                                        false,
                                                    ],
                                                },
                                            ],
                                            type: "tree",
                                            rules: [
                                                {
                                                    conditions: [],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "stringEquals",
                                                                    argv: [
                                                                        {
                                                                            ref: "hardwareType",
                                                                        },
                                                                        "e",
                                                                    ],
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [
                                                                        {
                                                                            fn: "stringEquals",
                                                                            argv: [
                                                                                {
                                                                                    ref: "regionPrefix",
                                                                                },
                                                                                "beta",
                                                                            ],
                                                                        },
                                                                    ],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "not",
                                                                                    argv: [
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            error: "Expected a endpoint to be specified but no endpoint was found",
                                                                            type: "error",
                                                                        },
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "isSet",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    fn: "parseURL",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Endpoint",
                                                                                        },
                                                                                    ],
                                                                                    assign: "url",
                                                                                },
                                                                            ],
                                                                            endpoint: {
                                                                                url: "https://{Bucket}.ec2.{url#authority}",
                                                                                properties: {
                                                                                    authSchemes: [
                                                                                        {
                                                                                            name: "sigv4",
                                                                                            signingName: "s3-outposts",
                                                                                            disableDoubleEncoding: true,
                                                                                            signingRegion: "{Region}",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                headers: {},
                                                                            },
                                                                            type: "endpoint",
                                                                        },
                                                                    ],
                                                                },
                                                                {
                                                                    conditions: [],
                                                                    endpoint: {
                                                                        url: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}",
                                                                        properties: {
                                                                            authSchemes: [
                                                                                {
                                                                                    name: "sigv4",
                                                                                    signingName: "s3-outposts",
                                                                                    disableDoubleEncoding: true,
                                                                                    signingRegion: "{Region}",
                                                                                },
                                                                            ],
                                                                        },
                                                                        headers: {},
                                                                    },
                                                                    type: "endpoint",
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "stringEquals",
                                                                    argv: [
                                                                        {
                                                                            ref: "hardwareType",
                                                                        },
                                                                        "o",
                                                                    ],
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [
                                                                        {
                                                                            fn: "stringEquals",
                                                                            argv: [
                                                                                {
                                                                                    ref: "regionPrefix",
                                                                                },
                                                                                "beta",
                                                                            ],
                                                                        },
                                                                    ],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "not",
                                                                                    argv: [
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            error: "Expected a endpoint to be specified but no endpoint was found",
                                                                            type: "error",
                                                                        },
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "isSet",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    fn: "parseURL",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Endpoint",
                                                                                        },
                                                                                    ],
                                                                                    assign: "url",
                                                                                },
                                                                            ],
                                                                            endpoint: {
                                                                                url: "https://{Bucket}.op-{outpostId}.{url#authority}",
                                                                                properties: {
                                                                                    authSchemes: [
                                                                                        {
                                                                                            name: "sigv4",
                                                                                            signingName: "s3-outposts",
                                                                                            disableDoubleEncoding: true,
                                                                                            signingRegion: "{Region}",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                headers: {},
                                                                            },
                                                                            type: "endpoint",
                                                                        },
                                                                    ],
                                                                },
                                                                {
                                                                    conditions: [],
                                                                    endpoint: {
                                                                        url: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}",
                                                                        properties: {
                                                                            authSchemes: [
                                                                                {
                                                                                    name: "sigv4",
                                                                                    signingName: "s3-outposts",
                                                                                    disableDoubleEncoding: true,
                                                                                    signingRegion: "{Region}",
                                                                                },
                                                                            ],
                                                                        },
                                                                        headers: {},
                                                                    },
                                                                    type: "endpoint",
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [],
                                                            error: `Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"`,
                                                            type: "error",
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                        {
                                            conditions: [],
                                            error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.",
                                            type: "error",
                                        },
                                    ],
                                },
                                {
                                    conditions: [
                                        {
                                            fn: "isSet",
                                            argv: [
                                                {
                                                    ref: "Bucket",
                                                },
                                            ],
                                        },
                                    ],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    fn: "isSet",
                                                    argv: [
                                                        {
                                                            ref: "Endpoint",
                                                        },
                                                    ],
                                                },
                                                {
                                                    fn: "not",
                                                    argv: [
                                                        {
                                                            fn: "isSet",
                                                            argv: [
                                                                {
                                                                    fn: "parseURL",
                                                                    argv: [
                                                                        {
                                                                            ref: "Endpoint",
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                    ],
                                                },
                                            ],
                                            error: "Custom endpoint `{Endpoint}` was not a valid URI",
                                            type: "error",
                                        },
                                        {
                                            conditions: [],
                                            type: "tree",
                                            rules: [
                                                {
                                                    conditions: [
                                                        {
                                                            fn: "isSet",
                                                            argv: [
                                                                {
                                                                    ref: "ForcePathStyle",
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            fn: "booleanEquals",
                                                            argv: [
                                                                {
                                                                    ref: "ForcePathStyle",
                                                                },
                                                                true,
                                                            ],
                                                        },
                                                    ],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [
                                                                        {
                                                                            fn: "aws.parseArn",
                                                                            argv: [
                                                                                {
                                                                                    ref: "Bucket",
                                                                                },
                                                                            ],
                                                                        },
                                                                    ],
                                                                    error: "Path-style addressing cannot be used with ARN buckets",
                                                                    type: "error",
                                                                },
                                                                {
                                                                    conditions: [
                                                                        {
                                                                            fn: "uriEncode",
                                                                            argv: [
                                                                                {
                                                                                    ref: "Bucket",
                                                                                },
                                                                            ],
                                                                            assign: "uri_encoded_bucket",
                                                                        },
                                                                    ],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "booleanEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "UseDualStack",
                                                                                        },
                                                                                        true,
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    fn: "isSet",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            error: "Cannot set dual-stack in combination with a custom endpoint.",
                                                                            type: "error",
                                                                        },
                                                                        {
                                                                            conditions: [],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "aws.partition",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                            ],
                                                                                            assign: "partitionResult",
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "booleanEquals",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "Accelerate",
                                                                                                                },
                                                                                                                false,
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseFIPS",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            type: "tree",
                                                                                                                            rules: [
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "stringEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Region",
                                                                                                                                                },
                                                                                                                                                "aws-global",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "stringEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Region",
                                                                                                                                                },
                                                                                                                                                "aws-global",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "isSet",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "parseURL",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            assign: "url",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "stringEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Region",
                                                                                                                                                },
                                                                                                                                                "aws-global",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "isSet",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "parseURL",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            assign: "url",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "stringEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Region",
                                                                                                                                                },
                                                                                                                                                "aws-global",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "isSet",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "parseURL",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            assign: "url",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "us-east-1",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "isSet",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "parseURL",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            assign: "url",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "stringEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Region",
                                                                                                                                                },
                                                                                                                                                "aws-global",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "stringEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Region",
                                                                                                                                                },
                                                                                                                                                "aws-global",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "us-east-1",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    endpoint: {
                                                                                                                                        url: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                        properties: {
                                                                                                                                            authSchemes: [
                                                                                                                                                {
                                                                                                                                                    name: "sigv4",
                                                                                                                                                    signingName: "s3",
                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        headers: {},
                                                                                                                                    },
                                                                                                                                    type: "endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [],
                                                                                                                    error: "Path-style addressing cannot be used with FIPS",
                                                                                                                    type: "error",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    error: "Path-style addressing cannot be used with S3 Accelerate",
                                                                                                    type: "error",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [],
                                                                                    error: "A valid partition could not be determined",
                                                                                    type: "error",
                                                                                },
                                                                            ],
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                    ],
                                                },
                                                {
                                                    conditions: [
                                                        {
                                                            fn: "aws.isVirtualHostableS3Bucket",
                                                            argv: [
                                                                {
                                                                    ref: "Bucket",
                                                                },
                                                                false,
                                                            ],
                                                        },
                                                    ],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "aws.partition",
                                                                    argv: [
                                                                        {
                                                                            ref: "Region",
                                                                        },
                                                                    ],
                                                                    assign: "partitionResult",
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "isValidHostLabel",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Region",
                                                                                        },
                                                                                        false,
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [
                                                                                                {
                                                                                                    fn: "booleanEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "UseFIPS",
                                                                                                        },
                                                                                                        true,
                                                                                                    ],
                                                                                                },
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            fn: "getAttr",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "partitionResult",
                                                                                                                },
                                                                                                                "name",
                                                                                                            ],
                                                                                                        },
                                                                                                        "aws-cn",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                            error: "Partition does not support FIPS",
                                                                                            type: "error",
                                                                                        },
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "booleanEquals",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "Accelerate",
                                                                                                                },
                                                                                                                true,
                                                                                                            ],
                                                                                                        },
                                                                                                        {
                                                                                                            fn: "booleanEquals",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "UseFIPS",
                                                                                                                },
                                                                                                                true,
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    error: "Accelerate cannot be used with FIPS",
                                                                                                    type: "error",
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [
                                                                                                                {
                                                                                                                    fn: "booleanEquals",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            ref: "Accelerate",
                                                                                                                        },
                                                                                                                        true,
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    fn: "stringEquals",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            fn: "getAttr",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "partitionResult",
                                                                                                                                },
                                                                                                                                "name",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        "aws-cn",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                            error: "S3 Accelerate cannot be used in this region",
                                                                                                            type: "error",
                                                                                                        },
                                                                                                        {
                                                                                                            conditions: [],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "isSet",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    error: "Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate",
                                                                                                                    type: "error",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    fn: "booleanEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "UseFIPS",
                                                                                                                                        },
                                                                                                                                        true,
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            error: "Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate",
                                                                                                                            type: "error",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            type: "tree",
                                                                                                                            rules: [
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "isSet",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "Accelerate",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    error: "Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate",
                                                                                                                                    type: "error",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "us-east-1",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "us-east-1",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "isSet",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "parseURL",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    assign: "url",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "url",
                                                                                                                                                                },
                                                                                                                                                                "isIp",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "us-east-1",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Region",
                                                                                                                                                        },
                                                                                                                                                        "aws-global",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "us-east-1",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "us-east-1",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    endpoint: {
                                                                                                                                                        url: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                        properties: {
                                                                                                                                                            authSchemes: [
                                                                                                                                                                {
                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        headers: {},
                                                                                                                                                    },
                                                                                                                                                    type: "endpoint",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "Region",
                                                                                                                                                                },
                                                                                                                                                                "aws-global",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "UseGlobalEndpoint",
                                                                                                                                                        },
                                                                                                                                                        false,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            endpoint: {
                                                                                                                                                url: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}",
                                                                                                                                                properties: {
                                                                                                                                                    authSchemes: [
                                                                                                                                                        {
                                                                                                                                                            name: "sigv4",
                                                                                                                                                            signingName: "s3",
                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                                headers: {},
                                                                                                                                            },
                                                                                                                                            type: "endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ],
                                                                        },
                                                                        {
                                                                            conditions: [],
                                                                            error: "Invalid region: region was not a valid DNS name.",
                                                                            type: "error",
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [],
                                                            error: "A valid partition could not be determined",
                                                            type: "error",
                                                        },
                                                    ],
                                                },
                                                {
                                                    conditions: [
                                                        {
                                                            fn: "isSet",
                                                            argv: [
                                                                {
                                                                    ref: "Endpoint",
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            fn: "parseURL",
                                                            argv: [
                                                                {
                                                                    ref: "Endpoint",
                                                                },
                                                            ],
                                                            assign: "url",
                                                        },
                                                        {
                                                            fn: "stringEquals",
                                                            argv: [
                                                                {
                                                                    fn: "getAttr",
                                                                    argv: [
                                                                        {
                                                                            ref: "url",
                                                                        },
                                                                        "scheme",
                                                                    ],
                                                                },
                                                                "http",
                                                            ],
                                                        },
                                                        {
                                                            fn: "aws.isVirtualHostableS3Bucket",
                                                            argv: [
                                                                {
                                                                    ref: "Bucket",
                                                                },
                                                                true,
                                                            ],
                                                        },
                                                        {
                                                            fn: "booleanEquals",
                                                            argv: [
                                                                {
                                                                    ref: "UseFIPS",
                                                                },
                                                                false,
                                                            ],
                                                        },
                                                        {
                                                            fn: "booleanEquals",
                                                            argv: [
                                                                {
                                                                    ref: "UseDualStack",
                                                                },
                                                                false,
                                                            ],
                                                        },
                                                        {
                                                            fn: "booleanEquals",
                                                            argv: [
                                                                {
                                                                    ref: "Accelerate",
                                                                },
                                                                false,
                                                            ],
                                                        },
                                                    ],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "aws.partition",
                                                                    argv: [
                                                                        {
                                                                            ref: "Region",
                                                                        },
                                                                    ],
                                                                    assign: "partitionResult",
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "isValidHostLabel",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "Region",
                                                                                        },
                                                                                        false,
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                            ],
                                                                        },
                                                                        {
                                                                            conditions: [],
                                                                            error: "Invalid region: region was not a valid DNS name.",
                                                                            type: "error",
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [],
                                                            error: "A valid partition could not be determined",
                                                            type: "error",
                                                        },
                                                    ],
                                                },
                                                {
                                                    conditions: [
                                                        {
                                                            fn: "aws.parseArn",
                                                            argv: [
                                                                {
                                                                    ref: "Bucket",
                                                                },
                                                            ],
                                                            assign: "bucketArn",
                                                        },
                                                    ],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "getAttr",
                                                                    argv: [
                                                                        {
                                                                            ref: "bucketArn",
                                                                        },
                                                                        "resourceId[0]",
                                                                    ],
                                                                    assign: "arnType",
                                                                },
                                                                {
                                                                    fn: "not",
                                                                    argv: [
                                                                        {
                                                                            fn: "stringEquals",
                                                                            argv: [
                                                                                {
                                                                                    ref: "arnType",
                                                                                },
                                                                                "",
                                                                            ],
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "stringEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            fn: "getAttr",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "bucketArn",
                                                                                                },
                                                                                                "service",
                                                                                            ],
                                                                                        },
                                                                                        "s3-object-lambda",
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "arnType",
                                                                                                },
                                                                                                "accesspoint",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "getAttr",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "bucketArn",
                                                                                                                },
                                                                                                                "resourceId[1]",
                                                                                                            ],
                                                                                                            assign: "accessPointName",
                                                                                                        },
                                                                                                        {
                                                                                                            fn: "not",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    fn: "stringEquals",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            ref: "accessPointName",
                                                                                                                        },
                                                                                                                        "",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    error: "S3 Object Lambda does not support Dual-stack",
                                                                                                                    type: "error",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [
                                                                                                                                {
                                                                                                                                    fn: "booleanEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Accelerate",
                                                                                                                                        },
                                                                                                                                        true,
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            error: "S3 Object Lambda does not support S3 Accelerate",
                                                                                                                            type: "error",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            type: "tree",
                                                                                                                            rules: [
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "not",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "getAttr",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                },
                                                                                                                                                                "region",
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        "",
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "DisableAccessPoints",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            fn: "booleanEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "DisableAccessPoints",
                                                                                                                                                                },
                                                                                                                                                                true,
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    error: "Access points are not supported for this operation",
                                                                                                                                                    type: "error",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    type: "tree",
                                                                                                                                                    rules: [
                                                                                                                                                        {
                                                                                                                                                            conditions: [
                                                                                                                                                                {
                                                                                                                                                                    fn: "not",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            fn: "isSet",
                                                                                                                                                                            argv: [
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                        },
                                                                                                                                                                                        "resourceId[2]",
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                            type: "tree",
                                                                                                                                                            rules: [
                                                                                                                                                                {
                                                                                                                                                                    conditions: [],
                                                                                                                                                                    type: "tree",
                                                                                                                                                                    rules: [
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "isSet",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            ref: "UseArnRegion",
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            ref: "UseArnRegion",
                                                                                                                                                                                        },
                                                                                                                                                                                        false,
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "not",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                                                            argv: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                        },
                                                                                                                                                                                                        "region",
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                                "{Region}",
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                            error: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
                                                                                                                                                                            type: "error",
                                                                                                                                                                        },
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [],
                                                                                                                                                                            type: "tree",
                                                                                                                                                                            rules: [
                                                                                                                                                                                {
                                                                                                                                                                                    conditions: [
                                                                                                                                                                                        {
                                                                                                                                                                                            fn: "aws.partition",
                                                                                                                                                                                            argv: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                        },
                                                                                                                                                                                                        "region",
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                            assign: "bucketPartition",
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                    rules: [
                                                                                                                                                                                        {
                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                            rules: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            fn: "aws.partition",
                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    ref: "Region",
                                                                                                                                                                                                                },
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            assign: "partitionResult",
                                                                                                                                                                                                        },
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            ref: "bucketPartition",
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        "name",
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            ref: "partitionResult",
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        "name",
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            fn: "isValidHostLabel",
                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        "region",
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                true,
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        "accountId",
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                "",
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    error: "Invalid ARN: Missing account id",
                                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    fn: "isValidHostLabel",
                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                "accountId",
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    fn: "isValidHostLabel",
                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            ref: "accessPointName",
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "bucketPartition",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                "name",
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        "aws-cn",
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                            error: "Partition does not support FIPS",
                                                                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "isSet",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "parseURL",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            assign: "url",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                                                                                                                                        url: "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}",
                                                                                                                                                                                                                                                                                                        properties: {
                                                                                                                                                                                                                                                                                                            authSchemes: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                                                                                                                                                                    signingName: "s3-object-lambda",
                                                                                                                                                                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                    signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        headers: {},
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    type: "endpoint",
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                true,
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                                                                                                                                        url: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                        properties: {
                                                                                                                                                                                                                                                                                                            authSchemes: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                                                                                                                                                                    signingName: "s3-object-lambda",
                                                                                                                                                                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                    signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        headers: {},
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    type: "endpoint",
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                                                                                                                                        url: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                        properties: {
                                                                                                                                                                                                                                                                                                            authSchemes: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    name: "sigv4",
                                                                                                                                                                                                                                                                                                                    signingName: "s3-object-lambda",
                                                                                                                                                                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                    signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        headers: {},
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    type: "endpoint",
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                                            error: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`",
                                                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                            error: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`",
                                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                    error: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)",
                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                },
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                    error: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`",
                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                },
                                                                                                                                                                                                            ],
                                                                                                                                                                                                        },
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                                {
                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                    error: "A valid partition could not be determined",
                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                                {
                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                    error: "Could not load partition for ARN region `{bucketArn#region}`",
                                                                                                                                                                                    type: "error",
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            conditions: [],
                                                                                                                                                            error: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.",
                                                                                                                                                            type: "error",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [],
                                                                                                                                    error: "Invalid ARN: bucket ARN is missing a region",
                                                                                                                                    type: "error",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    error: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided",
                                                                                                    type: "error",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [],
                                                                                    error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`",
                                                                                    type: "error",
                                                                                },
                                                                            ],
                                                                        },
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "stringEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "arnType",
                                                                                        },
                                                                                        "accesspoint",
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "getAttr",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "bucketArn",
                                                                                                },
                                                                                                "resourceId[1]",
                                                                                            ],
                                                                                            assign: "accessPointName",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "accessPointName",
                                                                                                        },
                                                                                                        "",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "not",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    fn: "stringEquals",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            fn: "getAttr",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "bucketArn",
                                                                                                                                },
                                                                                                                                "region",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        "",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [
                                                                                                                {
                                                                                                                    fn: "stringEquals",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            ref: "arnType",
                                                                                                                        },
                                                                                                                        "accesspoint",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            fn: "getAttr",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                },
                                                                                                                                                "region",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        "",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            type: "tree",
                                                                                                                            rules: [
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "isSet",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "DisableAccessPoints",
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "DisableAccessPoints",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    error: "Access points are not supported for this operation",
                                                                                                                                    type: "error",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "not",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                        },
                                                                                                                                                                        "resourceId[2]",
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    type: "tree",
                                                                                                                                                    rules: [
                                                                                                                                                        {
                                                                                                                                                            conditions: [
                                                                                                                                                                {
                                                                                                                                                                    fn: "isSet",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            ref: "UseArnRegion",
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            ref: "UseArnRegion",
                                                                                                                                                                        },
                                                                                                                                                                        false,
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    fn: "not",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                                            argv: [
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                        },
                                                                                                                                                                                        "region",
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                                "{Region}",
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                            error: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
                                                                                                                                                            type: "error",
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            conditions: [],
                                                                                                                                                            type: "tree",
                                                                                                                                                            rules: [
                                                                                                                                                                {
                                                                                                                                                                    conditions: [
                                                                                                                                                                        {
                                                                                                                                                                            fn: "aws.partition",
                                                                                                                                                                            argv: [
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                        },
                                                                                                                                                                                        "region",
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                            assign: "bucketPartition",
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                    type: "tree",
                                                                                                                                                                    rules: [
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [],
                                                                                                                                                                            type: "tree",
                                                                                                                                                                            rules: [
                                                                                                                                                                                {
                                                                                                                                                                                    conditions: [
                                                                                                                                                                                        {
                                                                                                                                                                                            fn: "aws.partition",
                                                                                                                                                                                            argv: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    ref: "Region",
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                            assign: "partitionResult",
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                    rules: [
                                                                                                                                                                                        {
                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                            rules: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            ref: "bucketPartition",
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        "name",
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "{partitionResult#name}",
                                                                                                                                                                                                            ],
                                                                                                                                                                                                        },
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            fn: "isValidHostLabel",
                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        "region",
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                true,
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            fn: "stringEquals",
                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        "service",
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "s3",
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            fn: "isValidHostLabel",
                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        "accountId",
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                false,
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            fn: "isValidHostLabel",
                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    ref: "accessPointName",
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                false,
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            fn: "booleanEquals",
                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    ref: "Accelerate",
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                true,
                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                    error: "Access Points do not support S3 Accelerate",
                                                                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "bucketPartition",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                "name",
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        "aws-cn",
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                            error: "Partition does not support FIPS",
                                                                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    conditions: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "UseDualStack",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                true,
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            fn: "isSet",
                                                                                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    ref: "Endpoint",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                    error: "DualStack cannot be combined with a Host override (PrivateLink)",
                                                                                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                url: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                                            signingName: "s3",
                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                url: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                                            signingName: "s3",
                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                url: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                                            signingName: "s3",
                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "isSet",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "parseURL",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                    assign: "url",
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                url: "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}",
                                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                                            signingName: "s3",
                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseFIPS",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ref: "UseDualStack",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                url: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                                            signingName: "s3",
                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                    error: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`",
                                                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                    error: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`",
                                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                    error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}",
                                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                },
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                    error: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)",
                                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                                },
                                                                                                                                                                                                            ],
                                                                                                                                                                                                        },
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                                {
                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                    error: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`",
                                                                                                                                                                                                    type: "error",
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                                {
                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                    error: "A valid partition could not be determined",
                                                                                                                                                                                    type: "error",
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    conditions: [],
                                                                                                                                                                    error: "Could not load partition for ARN region `{bucketArn#region}`",
                                                                                                                                                                    type: "error",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            error: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.",
                                                                                                                                            type: "error",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [],
                                                                                                                    error: "Invalid ARN: bucket ARN is missing a region",
                                                                                                                    type: "error",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [
                                                                                                                {
                                                                                                                    fn: "isValidHostLabel",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            ref: "accessPointName",
                                                                                                                        },
                                                                                                                        true,
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [
                                                                                                                                {
                                                                                                                                    fn: "booleanEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "UseDualStack",
                                                                                                                                        },
                                                                                                                                        true,
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            error: "S3 MRAP does not support dual-stack",
                                                                                                                            type: "error",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            type: "tree",
                                                                                                                            rules: [
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "booleanEquals",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "UseFIPS",
                                                                                                                                                },
                                                                                                                                                true,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    error: "S3 MRAP does not support FIPS",
                                                                                                                                    type: "error",
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [
                                                                                                                                                {
                                                                                                                                                    fn: "booleanEquals",
                                                                                                                                                    argv: [
                                                                                                                                                        {
                                                                                                                                                            ref: "Accelerate",
                                                                                                                                                        },
                                                                                                                                                        true,
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                            error: "S3 MRAP does not support S3 Accelerate",
                                                                                                                                            type: "error",
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "booleanEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "DisableMultiRegionAccessPoints",
                                                                                                                                                                },
                                                                                                                                                                true,
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.",
                                                                                                                                                    type: "error",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    type: "tree",
                                                                                                                                                    rules: [
                                                                                                                                                        {
                                                                                                                                                            conditions: [
                                                                                                                                                                {
                                                                                                                                                                    fn: "aws.partition",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            ref: "Region",
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                    assign: "mrapPartition",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                            type: "tree",
                                                                                                                                                            rules: [
                                                                                                                                                                {
                                                                                                                                                                    conditions: [],
                                                                                                                                                                    type: "tree",
                                                                                                                                                                    rules: [
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                            argv: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    ref: "mrapPartition",
                                                                                                                                                                                                },
                                                                                                                                                                                                "name",
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                            argv: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                                                },
                                                                                                                                                                                                "partition",
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                            type: "tree",
                                                                                                                                                                            rules: [
                                                                                                                                                                                {
                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                        url: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}",
                                                                                                                                                                                        properties: {
                                                                                                                                                                                            authSchemes: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    name: "sigv4a",
                                                                                                                                                                                                    signingName: "s3",
                                                                                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                                                                                    signingRegionSet: [
                                                                                                                                                                                                        "*",
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                        headers: {},
                                                                                                                                                                                    },
                                                                                                                                                                                    type: "endpoint",
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [],
                                                                                                                                                                            error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`",
                                                                                                                                                                            type: "error",
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            conditions: [],
                                                                                                                                                            error: "{Region} was not a valid region",
                                                                                                                                                            type: "error",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                        {
                                                                                                            conditions: [],
                                                                                                            error: "Invalid Access Point Name",
                                                                                                            type: "error",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [],
                                                                                    error: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided",
                                                                                    type: "error",
                                                                                },
                                                                            ],
                                                                        },
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "stringEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            fn: "getAttr",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "bucketArn",
                                                                                                },
                                                                                                "service",
                                                                                            ],
                                                                                        },
                                                                                        "s3-outposts",
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    error: "S3 Outposts does not support Dual-stack",
                                                                                    type: "error",
                                                                                },
                                                                                {
                                                                                    conditions: [],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [
                                                                                                {
                                                                                                    fn: "booleanEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "UseFIPS",
                                                                                                        },
                                                                                                        true,
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                            error: "S3 Outposts does not support FIPS",
                                                                                            type: "error",
                                                                                        },
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "booleanEquals",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "Accelerate",
                                                                                                                },
                                                                                                                true,
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    error: "S3 Outposts does not support S3 Accelerate",
                                                                                                    type: "error",
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [
                                                                                                                {
                                                                                                                    fn: "isSet",
                                                                                                                    argv: [
                                                                                                                        {
                                                                                                                            fn: "getAttr",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "bucketArn",
                                                                                                                                },
                                                                                                                                "resourceId[4]",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ],
                                                                                                            error: "Invalid Arn: Outpost Access Point ARN contains sub resources",
                                                                                                            type: "error",
                                                                                                        },
                                                                                                        {
                                                                                                            conditions: [],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "getAttr",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "bucketArn",
                                                                                                                                },
                                                                                                                                "resourceId[1]",
                                                                                                                            ],
                                                                                                                            assign: "outpostId",
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            type: "tree",
                                                                                                                            rules: [
                                                                                                                                {
                                                                                                                                    conditions: [
                                                                                                                                        {
                                                                                                                                            fn: "isValidHostLabel",
                                                                                                                                            argv: [
                                                                                                                                                {
                                                                                                                                                    ref: "outpostId",
                                                                                                                                                },
                                                                                                                                                false,
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                    type: "tree",
                                                                                                                                    rules: [
                                                                                                                                        {
                                                                                                                                            conditions: [],
                                                                                                                                            type: "tree",
                                                                                                                                            rules: [
                                                                                                                                                {
                                                                                                                                                    conditions: [
                                                                                                                                                        {
                                                                                                                                                            fn: "isSet",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "UseArnRegion",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            fn: "booleanEquals",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    ref: "UseArnRegion",
                                                                                                                                                                },
                                                                                                                                                                false,
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            fn: "not",
                                                                                                                                                            argv: [
                                                                                                                                                                {
                                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                            argv: [
                                                                                                                                                                                {
                                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                                },
                                                                                                                                                                                "region",
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                        "{Region}",
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                    error: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
                                                                                                                                                    type: "error",
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    conditions: [],
                                                                                                                                                    type: "tree",
                                                                                                                                                    rules: [
                                                                                                                                                        {
                                                                                                                                                            conditions: [
                                                                                                                                                                {
                                                                                                                                                                    fn: "aws.partition",
                                                                                                                                                                    argv: [
                                                                                                                                                                        {
                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                            argv: [
                                                                                                                                                                                {
                                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                                },
                                                                                                                                                                                "region",
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                    assign: "bucketPartition",
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                            type: "tree",
                                                                                                                                                            rules: [
                                                                                                                                                                {
                                                                                                                                                                    conditions: [],
                                                                                                                                                                    type: "tree",
                                                                                                                                                                    rules: [
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [
                                                                                                                                                                                {
                                                                                                                                                                                    fn: "aws.partition",
                                                                                                                                                                                    argv: [
                                                                                                                                                                                        {
                                                                                                                                                                                            ref: "Region",
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                    assign: "partitionResult",
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                            type: "tree",
                                                                                                                                                                            rules: [
                                                                                                                                                                                {
                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                    rules: [
                                                                                                                                                                                        {
                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    ref: "bucketPartition",
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "name",
                                                                                                                                                                                                            ],
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    ref: "partitionResult",
                                                                                                                                                                                                                },
                                                                                                                                                                                                                "name",
                                                                                                                                                                                                            ],
                                                                                                                                                                                                        },
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                            rules: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    fn: "isValidHostLabel",
                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                "region",
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        true,
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                },
                                                                                                                                                                                                            ],
                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    fn: "isValidHostLabel",
                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            fn: "getAttr",
                                                                                                                                                                                                                                            argv: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    ref: "bucketArn",
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                "accountId",
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        false,
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        "resourceId[2]",
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    assign: "outpostType",
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    fn: "getAttr",
                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            ref: "bucketArn",
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        "resourceId[3]",
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                    assign: "accessPointName",
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    fn: "stringEquals",
                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            ref: "outpostType",
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        "accesspoint",
                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                            type: "tree",
                                                                                                                                                                                                                                                                            rules: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    conditions: [],
                                                                                                                                                                                                                                                                                    type: "tree",
                                                                                                                                                                                                                                                                                    rules: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            conditions: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    fn: "isSet",
                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    fn: "parseURL",
                                                                                                                                                                                                                                                                                                    argv: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            ref: "Endpoint",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                    assign: "url",
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                url: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}",
                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                            signingName: "s3-outposts",
                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                url: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                properties: {
                                                                                                                                                                                                                                                                                                    authSchemes: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            name: "sigv4",
                                                                                                                                                                                                                                                                                                            signingName: "s3-outposts",
                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                                                                                                                                                                                            signingRegion: "{bucketArn#region}",
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                headers: {},
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                            type: "endpoint",
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                                            error: "Expected an outpost type `accesspoint`, found {outpostType}",
                                                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                                            error: "Invalid ARN: expected an access point name",
                                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                                            error: "Invalid ARN: Expected a 4-component resource",
                                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                                            error: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`",
                                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                },
                                                                                                                                                                                                            ],
                                                                                                                                                                                                        },
                                                                                                                                                                                                        {
                                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                                            error: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)",
                                                                                                                                                                                                            type: "error",
                                                                                                                                                                                                        },
                                                                                                                                                                                                    ],
                                                                                                                                                                                                },
                                                                                                                                                                                            ],
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            conditions: [],
                                                                                                                                                                                            error: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`",
                                                                                                                                                                                            type: "error",
                                                                                                                                                                                        },
                                                                                                                                                                                    ],
                                                                                                                                                                                },
                                                                                                                                                                            ],
                                                                                                                                                                        },
                                                                                                                                                                        {
                                                                                                                                                                            conditions: [],
                                                                                                                                                                            error: "A valid partition could not be determined",
                                                                                                                                                                            type: "error",
                                                                                                                                                                        },
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            conditions: [],
                                                                                                                                                            error: "Could not load partition for ARN region {bucketArn#region}",
                                                                                                                                                            type: "error",
                                                                                                                                                        },
                                                                                                                                                    ],
                                                                                                                                                },
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    conditions: [],
                                                                                                                                    error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`",
                                                                                                                                    type: "error",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [],
                                                                                                                    error: "Invalid ARN: The Outpost Id was not set",
                                                                                                                    type: "error",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ],
                                                                        },
                                                                        {
                                                                            conditions: [],
                                                                            error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})",
                                                                            type: "error",
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [],
                                                            error: "Invalid ARN: No ARN type specified",
                                                            type: "error",
                                                        },
                                                    ],
                                                },
                                                {
                                                    conditions: [
                                                        {
                                                            fn: "substring",
                                                            argv: [
                                                                {
                                                                    ref: "Bucket",
                                                                },
                                                                0,
                                                                4,
                                                                false,
                                                            ],
                                                            assign: "arnPrefix",
                                                        },
                                                        {
                                                            fn: "stringEquals",
                                                            argv: [
                                                                {
                                                                    ref: "arnPrefix",
                                                                },
                                                                "arn:",
                                                            ],
                                                        },
                                                        {
                                                            fn: "not",
                                                            argv: [
                                                                {
                                                                    fn: "isSet",
                                                                    argv: [
                                                                        {
                                                                            fn: "aws.parseArn",
                                                                            argv: [
                                                                                {
                                                                                    ref: "Bucket",
                                                                                },
                                                                            ],
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                    ],
                                                    error: "Invalid ARN: `{Bucket}` was not a valid ARN",
                                                    type: "error",
                                                },
                                                {
                                                    conditions: [
                                                        {
                                                            fn: "uriEncode",
                                                            argv: [
                                                                {
                                                                    ref: "Bucket",
                                                                },
                                                            ],
                                                            assign: "uri_encoded_bucket",
                                                        },
                                                    ],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "booleanEquals",
                                                                    argv: [
                                                                        {
                                                                            ref: "UseDualStack",
                                                                        },
                                                                        true,
                                                                    ],
                                                                },
                                                                {
                                                                    fn: "isSet",
                                                                    argv: [
                                                                        {
                                                                            ref: "Endpoint",
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                            error: "Cannot set dual-stack in combination with a custom endpoint.",
                                                            type: "error",
                                                        },
                                                        {
                                                            conditions: [],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [
                                                                        {
                                                                            fn: "aws.partition",
                                                                            argv: [
                                                                                {
                                                                                    ref: "Region",
                                                                                },
                                                                            ],
                                                                            assign: "partitionResult",
                                                                        },
                                                                    ],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Accelerate",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "booleanEquals",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "UseFIPS",
                                                                                                                },
                                                                                                                false,
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    type: "tree",
                                                                                                    rules: [
                                                                                                        {
                                                                                                            conditions: [],
                                                                                                            type: "tree",
                                                                                                            rules: [
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "stringEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Region",
                                                                                                                                },
                                                                                                                                "aws-global",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "stringEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Region",
                                                                                                                                },
                                                                                                                                "aws-global",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "aws-global",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            endpoint: {
                                                                                                                                url: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                properties: {
                                                                                                                                    authSchemes: [
                                                                                                                                        {
                                                                                                                                            name: "sigv4",
                                                                                                                                            signingName: "s3",
                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                headers: {},
                                                                                                                            },
                                                                                                                            type: "endpoint",
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "aws-global",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "isSet",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "parseURL",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            assign: "url",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "stringEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Region",
                                                                                                                                },
                                                                                                                                "aws-global",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "isSet",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "parseURL",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            assign: "url",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "stringEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Region",
                                                                                                                                },
                                                                                                                                "aws-global",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "isSet",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "parseURL",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            assign: "url",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "aws-global",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "us-east-1",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            endpoint: {
                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                properties: {
                                                                                                                                    authSchemes: [
                                                                                                                                        {
                                                                                                                                            name: "sigv4",
                                                                                                                                            signingName: "s3",
                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                headers: {},
                                                                                                                            },
                                                                                                                            type: "endpoint",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            endpoint: {
                                                                                                                                url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                                properties: {
                                                                                                                                    authSchemes: [
                                                                                                                                        {
                                                                                                                                            name: "sigv4",
                                                                                                                                            signingName: "s3",
                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                headers: {},
                                                                                                                            },
                                                                                                                            type: "endpoint",
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "isSet",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "parseURL",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Endpoint",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            assign: "url",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "aws-global",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "stringEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Region",
                                                                                                                                },
                                                                                                                                "aws-global",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "stringEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "Region",
                                                                                                                                },
                                                                                                                                "aws-global",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "us-east-1",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "aws-global",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                },
                                                                                                                                true,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    type: "tree",
                                                                                                                    rules: [
                                                                                                                        {
                                                                                                                            conditions: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "us-east-1",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                            endpoint: {
                                                                                                                                url: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                properties: {
                                                                                                                                    authSchemes: [
                                                                                                                                        {
                                                                                                                                            name: "sigv4",
                                                                                                                                            signingName: "s3",
                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                headers: {},
                                                                                                                            },
                                                                                                                            type: "endpoint",
                                                                                                                        },
                                                                                                                        {
                                                                                                                            conditions: [],
                                                                                                                            endpoint: {
                                                                                                                                url: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                                properties: {
                                                                                                                                    authSchemes: [
                                                                                                                                        {
                                                                                                                                            name: "sigv4",
                                                                                                                                            signingName: "s3",
                                                                                                                                            disableDoubleEncoding: true,
                                                                                                                                            signingRegion: "{Region}",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                                headers: {},
                                                                                                                            },
                                                                                                                            type: "endpoint",
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                                {
                                                                                                                    conditions: [
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseDualStack",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "isSet",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Endpoint",
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "not",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    fn: "stringEquals",
                                                                                                                                    argv: [
                                                                                                                                        {
                                                                                                                                            ref: "Region",
                                                                                                                                        },
                                                                                                                                        "aws-global",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        {
                                                                                                                            fn: "booleanEquals",
                                                                                                                            argv: [
                                                                                                                                {
                                                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                                                },
                                                                                                                                false,
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ],
                                                                                                                    endpoint: {
                                                                                                                        url: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                                                                        properties: {
                                                                                                                            authSchemes: [
                                                                                                                                {
                                                                                                                                    name: "sigv4",
                                                                                                                                    signingName: "s3",
                                                                                                                                    disableDoubleEncoding: true,
                                                                                                                                    signingRegion: "{Region}",
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                        headers: {},
                                                                                                                    },
                                                                                                                    type: "endpoint",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    error: "Path-style addressing cannot be used with FIPS",
                                                                                                    type: "error",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [],
                                                                                    error: "Path-style addressing cannot be used with S3 Accelerate",
                                                                                    type: "error",
                                                                                },
                                                                            ],
                                                                        },
                                                                    ],
                                                                },
                                                                {
                                                                    conditions: [],
                                                                    error: "A valid partition could not be determined",
                                                                    type: "error",
                                                                },
                                                            ],
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                    ],
                                },
                                {
                                    conditions: [
                                        {
                                            fn: "isSet",
                                            argv: [
                                                {
                                                    ref: "UseObjectLambdaEndpoint",
                                                },
                                            ],
                                        },
                                        {
                                            fn: "booleanEquals",
                                            argv: [
                                                {
                                                    ref: "UseObjectLambdaEndpoint",
                                                },
                                                true,
                                            ],
                                        },
                                    ],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    fn: "aws.partition",
                                                    argv: [
                                                        {
                                                            ref: "Region",
                                                        },
                                                    ],
                                                    assign: "partitionResult",
                                                },
                                            ],
                                            type: "tree",
                                            rules: [
                                                {
                                                    conditions: [],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "isValidHostLabel",
                                                                    argv: [
                                                                        {
                                                                            ref: "Region",
                                                                        },
                                                                        true,
                                                                    ],
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "booleanEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "UseDualStack",
                                                                                        },
                                                                                        true,
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            error: "S3 Object Lambda does not support Dual-stack",
                                                                            type: "error",
                                                                        },
                                                                        {
                                                                            conditions: [],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Accelerate",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    error: "S3 Object Lambda does not support S3 Accelerate",
                                                                                    type: "error",
                                                                                },
                                                                                {
                                                                                    conditions: [],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [
                                                                                                {
                                                                                                    fn: "booleanEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "UseFIPS",
                                                                                                        },
                                                                                                        true,
                                                                                                    ],
                                                                                                },
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            fn: "getAttr",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "partitionResult",
                                                                                                                },
                                                                                                                "name",
                                                                                                            ],
                                                                                                        },
                                                                                                        "aws-cn",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                            error: "Partition does not support FIPS",
                                                                                            type: "error",
                                                                                        },
                                                                                        {
                                                                                            conditions: [],
                                                                                            type: "tree",
                                                                                            rules: [
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "isSet",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "Endpoint",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                        {
                                                                                                            fn: "parseURL",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "Endpoint",
                                                                                                                },
                                                                                                            ],
                                                                                                            assign: "url",
                                                                                                        },
                                                                                                    ],
                                                                                                    endpoint: {
                                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                                        properties: {
                                                                                                            authSchemes: [
                                                                                                                {
                                                                                                                    name: "sigv4",
                                                                                                                    signingName: "s3-object-lambda",
                                                                                                                    disableDoubleEncoding: true,
                                                                                                                    signingRegion: "{Region}",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                        headers: {},
                                                                                                    },
                                                                                                    type: "endpoint",
                                                                                                },
                                                                                                {
                                                                                                    conditions: [
                                                                                                        {
                                                                                                            fn: "booleanEquals",
                                                                                                            argv: [
                                                                                                                {
                                                                                                                    ref: "UseFIPS",
                                                                                                                },
                                                                                                                true,
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    endpoint: {
                                                                                                        url: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}",
                                                                                                        properties: {
                                                                                                            authSchemes: [
                                                                                                                {
                                                                                                                    name: "sigv4",
                                                                                                                    signingName: "s3-object-lambda",
                                                                                                                    disableDoubleEncoding: true,
                                                                                                                    signingRegion: "{Region}",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                        headers: {},
                                                                                                    },
                                                                                                    type: "endpoint",
                                                                                                },
                                                                                                {
                                                                                                    conditions: [],
                                                                                                    endpoint: {
                                                                                                        url: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}",
                                                                                                        properties: {
                                                                                                            authSchemes: [
                                                                                                                {
                                                                                                                    name: "sigv4",
                                                                                                                    signingName: "s3-object-lambda",
                                                                                                                    disableDoubleEncoding: true,
                                                                                                                    signingRegion: "{Region}",
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                        headers: {},
                                                                                                    },
                                                                                                    type: "endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ],
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [],
                                                            error: "Invalid region: region was not a valid DNS name.",
                                                            type: "error",
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                        {
                                            conditions: [],
                                            error: "A valid partition could not be determined",
                                            type: "error",
                                        },
                                    ],
                                },
                                {
                                    conditions: [
                                        {
                                            fn: "not",
                                            argv: [
                                                {
                                                    fn: "isSet",
                                                    argv: [
                                                        {
                                                            ref: "Bucket",
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                    ],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    fn: "aws.partition",
                                                    argv: [
                                                        {
                                                            ref: "Region",
                                                        },
                                                    ],
                                                    assign: "partitionResult",
                                                },
                                            ],
                                            type: "tree",
                                            rules: [
                                                {
                                                    conditions: [],
                                                    type: "tree",
                                                    rules: [
                                                        {
                                                            conditions: [
                                                                {
                                                                    fn: "isValidHostLabel",
                                                                    argv: [
                                                                        {
                                                                            ref: "Region",
                                                                        },
                                                                        true,
                                                                    ],
                                                                },
                                                            ],
                                                            type: "tree",
                                                            rules: [
                                                                {
                                                                    conditions: [],
                                                                    type: "tree",
                                                                    rules: [
                                                                        {
                                                                            conditions: [
                                                                                {
                                                                                    fn: "booleanEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            ref: "UseFIPS",
                                                                                        },
                                                                                        true,
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    fn: "stringEquals",
                                                                                    argv: [
                                                                                        {
                                                                                            fn: "getAttr",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "partitionResult",
                                                                                                },
                                                                                                "name",
                                                                                            ],
                                                                                        },
                                                                                        "aws-cn",
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            error: "Partition does not support FIPS",
                                                                            type: "error",
                                                                        },
                                                                        {
                                                                            conditions: [],
                                                                            type: "tree",
                                                                            rules: [
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "{url#scheme}://{url#authority}{url#path}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "{url#scheme}://{url#authority}{url#path}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "{url#scheme}://{url#authority}{url#path}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "us-east-1",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                            endpoint: {
                                                                                                url: "{url#scheme}://{url#authority}{url#path}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "{url#scheme}://{url#authority}{url#path}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "isSet",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "parseURL",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Endpoint",
                                                                                                },
                                                                                            ],
                                                                                            assign: "url",
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "{url#scheme}://{url#authority}{url#path}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "stringEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "Region",
                                                                                                },
                                                                                                "aws-global",
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "us-east-1",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                true,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    type: "tree",
                                                                                    rules: [
                                                                                        {
                                                                                            conditions: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "us-east-1",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                            endpoint: {
                                                                                                url: "https://s3.{partitionResult#dnsSuffix}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                        {
                                                                                            conditions: [],
                                                                                            endpoint: {
                                                                                                url: "https://s3.{Region}.{partitionResult#dnsSuffix}",
                                                                                                properties: {
                                                                                                    authSchemes: [
                                                                                                        {
                                                                                                            name: "sigv4",
                                                                                                            signingName: "s3",
                                                                                                            disableDoubleEncoding: true,
                                                                                                            signingRegion: "{Region}",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                                headers: {},
                                                                                            },
                                                                                            type: "endpoint",
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                {
                                                                                    conditions: [
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseFIPS",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseDualStack",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "isSet",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Endpoint",
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "not",
                                                                                            argv: [
                                                                                                {
                                                                                                    fn: "stringEquals",
                                                                                                    argv: [
                                                                                                        {
                                                                                                            ref: "Region",
                                                                                                        },
                                                                                                        "aws-global",
                                                                                                    ],
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        {
                                                                                            fn: "booleanEquals",
                                                                                            argv: [
                                                                                                {
                                                                                                    ref: "UseGlobalEndpoint",
                                                                                                },
                                                                                                false,
                                                                                            ],
                                                                                        },
                                                                                    ],
                                                                                    endpoint: {
                                                                                        url: "https://s3.{Region}.{partitionResult#dnsSuffix}",
                                                                                        properties: {
                                                                                            authSchemes: [
                                                                                                {
                                                                                                    name: "sigv4",
                                                                                                    signingName: "s3",
                                                                                                    disableDoubleEncoding: true,
                                                                                                    signingRegion: "{Region}",
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        headers: {},
                                                                                    },
                                                                                    type: "endpoint",
                                                                                },
                                                                            ],
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                        {
                                                            conditions: [],
                                                            error: "Invalid region: region was not a valid DNS name.",
                                                            type: "error",
                                                        },
                                                    ],
                                                },
                                            ],
                                        },
                                        {
                                            conditions: [],
                                            error: "A valid partition could not be determined",
                                            type: "error",
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                {
                    conditions: [],
                    error: "A region must be set when sending requests to S3.",
                    type: "error",
                },
            ],
        },
    ],
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbortIncompleteMultipartUploadFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AbortIncompleteMultipartUploadFilterSensitiveLog),
/* harmony export */   "AbortMultipartUploadCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.AbortMultipartUploadCommand),
/* harmony export */   "AbortMultipartUploadOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "AbortMultipartUploadRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "AccelerateConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AccelerateConfigurationFilterSensitiveLog),
/* harmony export */   "AccessControlPolicyFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AccessControlPolicyFilterSensitiveLog),
/* harmony export */   "AccessControlTranslationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AccessControlTranslationFilterSensitiveLog),
/* harmony export */   "AnalyticsAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsAndOperatorFilterSensitiveLog),
/* harmony export */   "AnalyticsConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsConfigurationFilterSensitiveLog),
/* harmony export */   "AnalyticsExportDestinationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsExportDestinationFilterSensitiveLog),
/* harmony export */   "AnalyticsFilter": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsFilter),
/* harmony export */   "AnalyticsFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsFilterFilterSensitiveLog),
/* harmony export */   "AnalyticsS3BucketDestinationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsS3BucketDestinationFilterSensitiveLog),
/* harmony export */   "AnalyticsS3ExportFileFormat": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsS3ExportFileFormat),
/* harmony export */   "ArchiveStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ArchiveStatus),
/* harmony export */   "BucketAccelerateStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketAccelerateStatus),
/* harmony export */   "BucketAlreadyExists": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketAlreadyExists),
/* harmony export */   "BucketAlreadyOwnedByYou": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketAlreadyOwnedByYou),
/* harmony export */   "BucketCannedACL": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketCannedACL),
/* harmony export */   "BucketFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketFilterSensitiveLog),
/* harmony export */   "BucketLifecycleConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLifecycleConfigurationFilterSensitiveLog),
/* harmony export */   "BucketLocationConstraint": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLocationConstraint),
/* harmony export */   "BucketLoggingStatusFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLoggingStatusFilterSensitiveLog),
/* harmony export */   "BucketLogsPermission": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLogsPermission),
/* harmony export */   "BucketVersioningStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketVersioningStatus),
/* harmony export */   "CORSConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CORSConfigurationFilterSensitiveLog),
/* harmony export */   "CORSRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CORSRuleFilterSensitiveLog),
/* harmony export */   "CSVInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CSVInputFilterSensitiveLog),
/* harmony export */   "CSVOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CSVOutputFilterSensitiveLog),
/* harmony export */   "ChecksumAlgorithm": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ChecksumAlgorithm),
/* harmony export */   "ChecksumFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ChecksumFilterSensitiveLog),
/* harmony export */   "ChecksumMode": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ChecksumMode),
/* harmony export */   "CommonPrefixFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CommonPrefixFilterSensitiveLog),
/* harmony export */   "CompleteMultipartUploadCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CompleteMultipartUploadCommand),
/* harmony export */   "CompleteMultipartUploadOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompleteMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "CompleteMultipartUploadRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompleteMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "CompletedMultipartUploadFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompletedMultipartUploadFilterSensitiveLog),
/* harmony export */   "CompletedPartFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompletedPartFilterSensitiveLog),
/* harmony export */   "CompressionType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompressionType),
/* harmony export */   "ConditionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ConditionFilterSensitiveLog),
/* harmony export */   "ContinuationEventFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ContinuationEventFilterSensitiveLog),
/* harmony export */   "CopyObjectCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CopyObjectCommand),
/* harmony export */   "CopyObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyObjectOutputFilterSensitiveLog),
/* harmony export */   "CopyObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyObjectRequestFilterSensitiveLog),
/* harmony export */   "CopyObjectResultFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyObjectResultFilterSensitiveLog),
/* harmony export */   "CopyPartResultFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyPartResultFilterSensitiveLog),
/* harmony export */   "CreateBucketCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CreateBucketCommand),
/* harmony export */   "CreateBucketConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateBucketConfigurationFilterSensitiveLog),
/* harmony export */   "CreateBucketOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateBucketOutputFilterSensitiveLog),
/* harmony export */   "CreateBucketRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateBucketRequestFilterSensitiveLog),
/* harmony export */   "CreateMultipartUploadCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CreateMultipartUploadCommand),
/* harmony export */   "CreateMultipartUploadOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "CreateMultipartUploadRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "DefaultRetentionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DefaultRetentionFilterSensitiveLog),
/* harmony export */   "DeleteBucketAnalyticsConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketAnalyticsConfigurationCommand),
/* harmony export */   "DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketCommand),
/* harmony export */   "DeleteBucketCorsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketCorsCommand),
/* harmony export */   "DeleteBucketCorsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketEncryptionCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketEncryptionCommand),
/* harmony export */   "DeleteBucketEncryptionRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketIntelligentTieringConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketInventoryConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketInventoryConfigurationCommand),
/* harmony export */   "DeleteBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketLifecycleCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketLifecycleCommand),
/* harmony export */   "DeleteBucketLifecycleRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketLifecycleRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketMetricsConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketMetricsConfigurationCommand),
/* harmony export */   "DeleteBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketOwnershipControlsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketOwnershipControlsCommand),
/* harmony export */   "DeleteBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketPolicyCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketPolicyCommand),
/* harmony export */   "DeleteBucketPolicyRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketReplicationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketReplicationCommand),
/* harmony export */   "DeleteBucketReplicationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketTaggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketTaggingCommand),
/* harmony export */   "DeleteBucketTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketWebsiteCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketWebsiteCommand),
/* harmony export */   "DeleteBucketWebsiteRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "DeleteFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteFilterSensitiveLog),
/* harmony export */   "DeleteMarkerEntryFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteMarkerEntryFilterSensitiveLog),
/* harmony export */   "DeleteMarkerReplicationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteMarkerReplicationFilterSensitiveLog),
/* harmony export */   "DeleteMarkerReplicationStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteMarkerReplicationStatus),
/* harmony export */   "DeleteObjectCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteObjectCommand),
/* harmony export */   "DeleteObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectRequestFilterSensitiveLog),
/* harmony export */   "DeleteObjectTaggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteObjectTaggingCommand),
/* harmony export */   "DeleteObjectTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "DeleteObjectsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteObjectsCommand),
/* harmony export */   "DeleteObjectsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectsOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectsRequestFilterSensitiveLog),
/* harmony export */   "DeletePublicAccessBlockCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeletePublicAccessBlockCommand),
/* harmony export */   "DeletePublicAccessBlockRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeletePublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "DeletedObjectFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeletedObjectFilterSensitiveLog),
/* harmony export */   "DestinationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DestinationFilterSensitiveLog),
/* harmony export */   "EncodingType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EncodingType),
/* harmony export */   "EncryptionConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EncryptionConfigurationFilterSensitiveLog),
/* harmony export */   "EncryptionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EncryptionFilterSensitiveLog),
/* harmony export */   "EndEventFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EndEventFilterSensitiveLog),
/* harmony export */   "ErrorDocumentFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ErrorDocumentFilterSensitiveLog),
/* harmony export */   "EventBridgeConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EventBridgeConfigurationFilterSensitiveLog),
/* harmony export */   "ExistingObjectReplicationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExistingObjectReplicationFilterSensitiveLog),
/* harmony export */   "ExistingObjectReplicationStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExistingObjectReplicationStatus),
/* harmony export */   "ExpirationStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExpirationStatus),
/* harmony export */   "ExpressionType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExpressionType),
/* harmony export */   "FileHeaderInfo": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.FileHeaderInfo),
/* harmony export */   "FilterRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.FilterRuleFilterSensitiveLog),
/* harmony export */   "FilterRuleName": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.FilterRuleName),
/* harmony export */   "GetBucketAccelerateConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketAccelerateConfigurationCommand),
/* harmony export */   "GetBucketAccelerateConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAccelerateConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketAclCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketAclCommand),
/* harmony export */   "GetBucketAclOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclRequestFilterSensitiveLog),
/* harmony export */   "GetBucketAnalyticsConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketAnalyticsConfigurationCommand),
/* harmony export */   "GetBucketAnalyticsConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketCorsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketCorsCommand),
/* harmony export */   "GetBucketCorsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsOutputFilterSensitiveLog),
/* harmony export */   "GetBucketCorsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "GetBucketEncryptionCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketEncryptionCommand),
/* harmony export */   "GetBucketEncryptionOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionOutputFilterSensitiveLog),
/* harmony export */   "GetBucketEncryptionRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "GetBucketIntelligentTieringConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketInventoryConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketInventoryConfigurationCommand),
/* harmony export */   "GetBucketInventoryConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLifecycleConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketLifecycleConfigurationCommand),
/* harmony export */   "GetBucketLifecycleConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLifecycleConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLocationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketLocationCommand),
/* harmony export */   "GetBucketLocationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLocationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLoggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketLoggingCommand),
/* harmony export */   "GetBucketLoggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLoggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingRequestFilterSensitiveLog),
/* harmony export */   "GetBucketMetricsConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketMetricsConfigurationCommand),
/* harmony export */   "GetBucketMetricsConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketNotificationConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketNotificationConfigurationCommand),
/* harmony export */   "GetBucketNotificationConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketNotificationConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketOwnershipControlsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketOwnershipControlsCommand),
/* harmony export */   "GetBucketOwnershipControlsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsOutputFilterSensitiveLog),
/* harmony export */   "GetBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketPolicyCommand),
/* harmony export */   "GetBucketPolicyOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyOutputFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyStatusCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketPolicyStatusCommand),
/* harmony export */   "GetBucketPolicyStatusOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusOutputFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyStatusRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusRequestFilterSensitiveLog),
/* harmony export */   "GetBucketReplicationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketReplicationCommand),
/* harmony export */   "GetBucketReplicationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketReplicationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketRequestPaymentCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketRequestPaymentCommand),
/* harmony export */   "GetBucketRequestPaymentOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentOutputFilterSensitiveLog),
/* harmony export */   "GetBucketRequestPaymentRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentRequestFilterSensitiveLog),
/* harmony export */   "GetBucketTaggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketTaggingCommand),
/* harmony export */   "GetBucketTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingOutputFilterSensitiveLog),
/* harmony export */   "GetBucketTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "GetBucketVersioningCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketVersioningCommand),
/* harmony export */   "GetBucketVersioningOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningOutputFilterSensitiveLog),
/* harmony export */   "GetBucketVersioningRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningRequestFilterSensitiveLog),
/* harmony export */   "GetBucketWebsiteCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketWebsiteCommand),
/* harmony export */   "GetBucketWebsiteOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteOutputFilterSensitiveLog),
/* harmony export */   "GetBucketWebsiteRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "GetObjectAclCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectAclCommand),
/* harmony export */   "GetObjectAclOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclOutputFilterSensitiveLog),
/* harmony export */   "GetObjectAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclRequestFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectAttributesCommand),
/* harmony export */   "GetObjectAttributesOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAttributesOutputFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesPartsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAttributesPartsFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAttributesRequestFilterSensitiveLog),
/* harmony export */   "GetObjectCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectCommand),
/* harmony export */   "GetObjectLegalHoldCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectLegalHoldCommand),
/* harmony export */   "GetObjectLegalHoldOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldOutputFilterSensitiveLog),
/* harmony export */   "GetObjectLegalHoldRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldRequestFilterSensitiveLog),
/* harmony export */   "GetObjectLockConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectLockConfigurationCommand),
/* harmony export */   "GetObjectLockConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetObjectLockConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectOutputFilterSensitiveLog),
/* harmony export */   "GetObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectRequestFilterSensitiveLog),
/* harmony export */   "GetObjectRetentionCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectRetentionCommand),
/* harmony export */   "GetObjectRetentionOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionOutputFilterSensitiveLog),
/* harmony export */   "GetObjectRetentionRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionRequestFilterSensitiveLog),
/* harmony export */   "GetObjectTaggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectTaggingCommand),
/* harmony export */   "GetObjectTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "GetObjectTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "GetObjectTorrentCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectTorrentCommand),
/* harmony export */   "GetObjectTorrentOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentOutputFilterSensitiveLog),
/* harmony export */   "GetObjectTorrentRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentRequestFilterSensitiveLog),
/* harmony export */   "GetPublicAccessBlockCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetPublicAccessBlockCommand),
/* harmony export */   "GetPublicAccessBlockOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockOutputFilterSensitiveLog),
/* harmony export */   "GetPublicAccessBlockRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "GlacierJobParametersFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GlacierJobParametersFilterSensitiveLog),
/* harmony export */   "GrantFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GrantFilterSensitiveLog),
/* harmony export */   "GranteeFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GranteeFilterSensitiveLog),
/* harmony export */   "HeadBucketCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.HeadBucketCommand),
/* harmony export */   "HeadBucketRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.HeadBucketRequestFilterSensitiveLog),
/* harmony export */   "HeadObjectCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.HeadObjectCommand),
/* harmony export */   "HeadObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.HeadObjectOutputFilterSensitiveLog),
/* harmony export */   "HeadObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.HeadObjectRequestFilterSensitiveLog),
/* harmony export */   "IndexDocumentFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IndexDocumentFilterSensitiveLog),
/* harmony export */   "InitiatorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InitiatorFilterSensitiveLog),
/* harmony export */   "InputSerializationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InputSerializationFilterSensitiveLog),
/* harmony export */   "IntelligentTieringAccessTier": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringAccessTier),
/* harmony export */   "IntelligentTieringAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringAndOperatorFilterSensitiveLog),
/* harmony export */   "IntelligentTieringConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringConfigurationFilterSensitiveLog),
/* harmony export */   "IntelligentTieringFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringFilterFilterSensitiveLog),
/* harmony export */   "IntelligentTieringStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringStatus),
/* harmony export */   "InvalidObjectState": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectState),
/* harmony export */   "InventoryConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryConfigurationFilterSensitiveLog),
/* harmony export */   "InventoryDestinationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryDestinationFilterSensitiveLog),
/* harmony export */   "InventoryEncryptionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryEncryptionFilterSensitiveLog),
/* harmony export */   "InventoryFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryFilterFilterSensitiveLog),
/* harmony export */   "InventoryFormat": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryFormat),
/* harmony export */   "InventoryFrequency": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryFrequency),
/* harmony export */   "InventoryIncludedObjectVersions": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryIncludedObjectVersions),
/* harmony export */   "InventoryOptionalField": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryOptionalField),
/* harmony export */   "InventoryS3BucketDestinationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryS3BucketDestinationFilterSensitiveLog),
/* harmony export */   "InventoryScheduleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryScheduleFilterSensitiveLog),
/* harmony export */   "JSONInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.JSONInputFilterSensitiveLog),
/* harmony export */   "JSONOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.JSONOutputFilterSensitiveLog),
/* harmony export */   "JSONType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.JSONType),
/* harmony export */   "LambdaFunctionConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LambdaFunctionConfigurationFilterSensitiveLog),
/* harmony export */   "LifecycleExpirationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleExpirationFilterSensitiveLog),
/* harmony export */   "LifecycleRuleAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleAndOperatorFilterSensitiveLog),
/* harmony export */   "LifecycleRuleFilter": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleFilter),
/* harmony export */   "LifecycleRuleFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleFilterFilterSensitiveLog),
/* harmony export */   "LifecycleRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleFilterSensitiveLog),
/* harmony export */   "ListBucketAnalyticsConfigurationsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketAnalyticsConfigurationsCommand),
/* harmony export */   "ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketIntelligentTieringConfigurationsCommand),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketInventoryConfigurationsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketInventoryConfigurationsCommand),
/* harmony export */   "ListBucketInventoryConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketInventoryConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketMetricsConfigurationsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketMetricsConfigurationsCommand),
/* harmony export */   "ListBucketMetricsConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketMetricsConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketsCommand),
/* harmony export */   "ListBucketsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketsOutputFilterSensitiveLog),
/* harmony export */   "ListMultipartUploadsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListMultipartUploadsCommand),
/* harmony export */   "ListMultipartUploadsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsOutputFilterSensitiveLog),
/* harmony export */   "ListMultipartUploadsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectVersionsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListObjectVersionsCommand),
/* harmony export */   "ListObjectVersionsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsOutputFilterSensitiveLog),
/* harmony export */   "ListObjectVersionsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListObjectsCommand),
/* harmony export */   "ListObjectsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsOutputFilterSensitiveLog),
/* harmony export */   "ListObjectsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectsV2Command": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListObjectsV2Command),
/* harmony export */   "ListObjectsV2OutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2OutputFilterSensitiveLog),
/* harmony export */   "ListObjectsV2RequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2RequestFilterSensitiveLog),
/* harmony export */   "ListPartsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListPartsCommand),
/* harmony export */   "ListPartsOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListPartsOutputFilterSensitiveLog),
/* harmony export */   "ListPartsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListPartsRequestFilterSensitiveLog),
/* harmony export */   "LoggingEnabledFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LoggingEnabledFilterSensitiveLog),
/* harmony export */   "MFADelete": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MFADelete),
/* harmony export */   "MFADeleteStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MFADeleteStatus),
/* harmony export */   "MetadataDirective": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetadataDirective),
/* harmony export */   "MetadataEntryFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetadataEntryFilterSensitiveLog),
/* harmony export */   "MetricsAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsAndOperatorFilterSensitiveLog),
/* harmony export */   "MetricsConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsConfigurationFilterSensitiveLog),
/* harmony export */   "MetricsFilter": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsFilter),
/* harmony export */   "MetricsFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsFilterFilterSensitiveLog),
/* harmony export */   "MetricsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsFilterSensitiveLog),
/* harmony export */   "MetricsStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsStatus),
/* harmony export */   "MultipartUploadFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MultipartUploadFilterSensitiveLog),
/* harmony export */   "NoSuchBucket": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoSuchBucket),
/* harmony export */   "NoSuchKey": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoSuchKey),
/* harmony export */   "NoSuchUpload": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoSuchUpload),
/* harmony export */   "NoncurrentVersionExpirationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoncurrentVersionExpirationFilterSensitiveLog),
/* harmony export */   "NoncurrentVersionTransitionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoncurrentVersionTransitionFilterSensitiveLog),
/* harmony export */   "NotFound": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotFound),
/* harmony export */   "NotificationConfigurationFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotificationConfigurationFilterFilterSensitiveLog),
/* harmony export */   "NotificationConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotificationConfigurationFilterSensitiveLog),
/* harmony export */   "ObjectAlreadyInActiveTierError": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectAlreadyInActiveTierError),
/* harmony export */   "ObjectAttributes": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectAttributes),
/* harmony export */   "ObjectCannedACL": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectCannedACL),
/* harmony export */   "ObjectIdentifierFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectIdentifierFilterSensitiveLog),
/* harmony export */   "ObjectLockConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockConfigurationFilterSensitiveLog),
/* harmony export */   "ObjectLockEnabled": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockEnabled),
/* harmony export */   "ObjectLockLegalHoldFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockLegalHoldFilterSensitiveLog),
/* harmony export */   "ObjectLockLegalHoldStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockLegalHoldStatus),
/* harmony export */   "ObjectLockMode": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockMode),
/* harmony export */   "ObjectLockRetentionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockRetentionFilterSensitiveLog),
/* harmony export */   "ObjectLockRetentionMode": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockRetentionMode),
/* harmony export */   "ObjectLockRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockRuleFilterSensitiveLog),
/* harmony export */   "ObjectNotInActiveTierError": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectNotInActiveTierError),
/* harmony export */   "ObjectOwnership": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectOwnership),
/* harmony export */   "ObjectPartFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectPartFilterSensitiveLog),
/* harmony export */   "ObjectStorageClass": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectStorageClass),
/* harmony export */   "ObjectVersionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectVersionFilterSensitiveLog),
/* harmony export */   "ObjectVersionStorageClass": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectVersionStorageClass),
/* harmony export */   "OutputLocationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OutputLocationFilterSensitiveLog),
/* harmony export */   "OutputSerializationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OutputSerializationFilterSensitiveLog),
/* harmony export */   "OwnerFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnerFilterSensitiveLog),
/* harmony export */   "OwnerOverride": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnerOverride),
/* harmony export */   "OwnershipControlsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnershipControlsFilterSensitiveLog),
/* harmony export */   "OwnershipControlsRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnershipControlsRuleFilterSensitiveLog),
/* harmony export */   "ParquetInputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ParquetInputFilterSensitiveLog),
/* harmony export */   "PartFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PartFilterSensitiveLog),
/* harmony export */   "Payer": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Payer),
/* harmony export */   "Permission": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Permission),
/* harmony export */   "PolicyStatusFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PolicyStatusFilterSensitiveLog),
/* harmony export */   "ProgressEventFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ProgressEventFilterSensitiveLog),
/* harmony export */   "ProgressFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ProgressFilterSensitiveLog),
/* harmony export */   "Protocol": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Protocol),
/* harmony export */   "PublicAccessBlockConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PublicAccessBlockConfigurationFilterSensitiveLog),
/* harmony export */   "PutBucketAccelerateConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketAccelerateConfigurationCommand),
/* harmony export */   "PutBucketAccelerateConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketAccelerateConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketAclCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketAclCommand),
/* harmony export */   "PutBucketAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketAclRequestFilterSensitiveLog),
/* harmony export */   "PutBucketAnalyticsConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketAnalyticsConfigurationCommand),
/* harmony export */   "PutBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketCorsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketCorsCommand),
/* harmony export */   "PutBucketCorsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "PutBucketEncryptionCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketEncryptionCommand),
/* harmony export */   "PutBucketEncryptionRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "PutBucketIntelligentTieringConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketInventoryConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketInventoryConfigurationCommand),
/* harmony export */   "PutBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketLifecycleConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketLifecycleConfigurationCommand),
/* harmony export */   "PutBucketLifecycleConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketLifecycleConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketLoggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketLoggingCommand),
/* harmony export */   "PutBucketLoggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketLoggingRequestFilterSensitiveLog),
/* harmony export */   "PutBucketMetricsConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketMetricsConfigurationCommand),
/* harmony export */   "PutBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketNotificationConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketNotificationConfigurationCommand),
/* harmony export */   "PutBucketNotificationConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketNotificationConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketOwnershipControlsCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketOwnershipControlsCommand),
/* harmony export */   "PutBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "PutBucketPolicyCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketPolicyCommand),
/* harmony export */   "PutBucketPolicyRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "PutBucketReplicationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketReplicationCommand),
/* harmony export */   "PutBucketReplicationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketRequestPaymentCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketRequestPaymentCommand),
/* harmony export */   "PutBucketRequestPaymentRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketRequestPaymentRequestFilterSensitiveLog),
/* harmony export */   "PutBucketTaggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketTaggingCommand),
/* harmony export */   "PutBucketTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "PutBucketVersioningCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketVersioningCommand),
/* harmony export */   "PutBucketVersioningRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketVersioningRequestFilterSensitiveLog),
/* harmony export */   "PutBucketWebsiteCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketWebsiteCommand),
/* harmony export */   "PutBucketWebsiteRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "PutObjectAclCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectAclCommand),
/* harmony export */   "PutObjectAclOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectAclOutputFilterSensitiveLog),
/* harmony export */   "PutObjectAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectAclRequestFilterSensitiveLog),
/* harmony export */   "PutObjectCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectCommand),
/* harmony export */   "PutObjectLegalHoldCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectLegalHoldCommand),
/* harmony export */   "PutObjectLegalHoldOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLegalHoldOutputFilterSensitiveLog),
/* harmony export */   "PutObjectLegalHoldRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLegalHoldRequestFilterSensitiveLog),
/* harmony export */   "PutObjectLockConfigurationCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectLockConfigurationCommand),
/* harmony export */   "PutObjectLockConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLockConfigurationOutputFilterSensitiveLog),
/* harmony export */   "PutObjectLockConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLockConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectOutputFilterSensitiveLog),
/* harmony export */   "PutObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectRequestFilterSensitiveLog),
/* harmony export */   "PutObjectRetentionCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectRetentionCommand),
/* harmony export */   "PutObjectRetentionOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectRetentionOutputFilterSensitiveLog),
/* harmony export */   "PutObjectRetentionRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectRetentionRequestFilterSensitiveLog),
/* harmony export */   "PutObjectTaggingCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectTaggingCommand),
/* harmony export */   "PutObjectTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "PutObjectTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "PutPublicAccessBlockCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutPublicAccessBlockCommand),
/* harmony export */   "PutPublicAccessBlockRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutPublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "QueueConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.QueueConfigurationFilterSensitiveLog),
/* harmony export */   "QuoteFields": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.QuoteFields),
/* harmony export */   "RecordsEventFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RecordsEventFilterSensitiveLog),
/* harmony export */   "RedirectAllRequestsToFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RedirectAllRequestsToFilterSensitiveLog),
/* harmony export */   "RedirectFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RedirectFilterSensitiveLog),
/* harmony export */   "ReplicaModificationsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicaModificationsFilterSensitiveLog),
/* harmony export */   "ReplicaModificationsStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicaModificationsStatus),
/* harmony export */   "ReplicationConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationConfigurationFilterSensitiveLog),
/* harmony export */   "ReplicationRuleAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleAndOperatorFilterSensitiveLog),
/* harmony export */   "ReplicationRuleFilter": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleFilter),
/* harmony export */   "ReplicationRuleFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleFilterFilterSensitiveLog),
/* harmony export */   "ReplicationRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleFilterSensitiveLog),
/* harmony export */   "ReplicationRuleStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleStatus),
/* harmony export */   "ReplicationStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationStatus),
/* harmony export */   "ReplicationTimeFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationTimeFilterSensitiveLog),
/* harmony export */   "ReplicationTimeStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationTimeStatus),
/* harmony export */   "ReplicationTimeValueFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationTimeValueFilterSensitiveLog),
/* harmony export */   "RequestCharged": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestCharged),
/* harmony export */   "RequestPayer": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestPayer),
/* harmony export */   "RequestPaymentConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestPaymentConfigurationFilterSensitiveLog),
/* harmony export */   "RequestProgressFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestProgressFilterSensitiveLog),
/* harmony export */   "RestoreObjectCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.RestoreObjectCommand),
/* harmony export */   "RestoreObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreObjectOutputFilterSensitiveLog),
/* harmony export */   "RestoreObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreObjectRequestFilterSensitiveLog),
/* harmony export */   "RestoreRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreRequestFilterSensitiveLog),
/* harmony export */   "RestoreRequestType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreRequestType),
/* harmony export */   "RoutingRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RoutingRuleFilterSensitiveLog),
/* harmony export */   "S3": () => (/* reexport safe */ _S3__WEBPACK_IMPORTED_MODULE_0__.S3),
/* harmony export */   "S3Client": () => (/* reexport safe */ _S3Client__WEBPACK_IMPORTED_MODULE_1__.S3Client),
/* harmony export */   "S3KeyFilterFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.S3KeyFilterFilterSensitiveLog),
/* harmony export */   "S3LocationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.S3LocationFilterSensitiveLog),
/* harmony export */   "S3ServiceException": () => (/* reexport safe */ _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_6__.S3ServiceException),
/* harmony export */   "SSEKMSFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SSEKMSFilterSensitiveLog),
/* harmony export */   "SSES3FilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SSES3FilterSensitiveLog),
/* harmony export */   "ScanRangeFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ScanRangeFilterSensitiveLog),
/* harmony export */   "SelectObjectContentCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.SelectObjectContentCommand),
/* harmony export */   "SelectObjectContentEventStream": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentEventStream),
/* harmony export */   "SelectObjectContentEventStreamFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentEventStreamFilterSensitiveLog),
/* harmony export */   "SelectObjectContentOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentOutputFilterSensitiveLog),
/* harmony export */   "SelectObjectContentRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentRequestFilterSensitiveLog),
/* harmony export */   "SelectParametersFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectParametersFilterSensitiveLog),
/* harmony export */   "ServerSideEncryption": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryption),
/* harmony export */   "ServerSideEncryptionByDefaultFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryptionByDefaultFilterSensitiveLog),
/* harmony export */   "ServerSideEncryptionConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryptionConfigurationFilterSensitiveLog),
/* harmony export */   "ServerSideEncryptionRuleFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryptionRuleFilterSensitiveLog),
/* harmony export */   "SourceSelectionCriteriaFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SourceSelectionCriteriaFilterSensitiveLog),
/* harmony export */   "SseKmsEncryptedObjectsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SseKmsEncryptedObjectsFilterSensitiveLog),
/* harmony export */   "SseKmsEncryptedObjectsStatus": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SseKmsEncryptedObjectsStatus),
/* harmony export */   "StatsEventFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StatsEventFilterSensitiveLog),
/* harmony export */   "StatsFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StatsFilterSensitiveLog),
/* harmony export */   "StorageClass": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClass),
/* harmony export */   "StorageClassAnalysisDataExportFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClassAnalysisDataExportFilterSensitiveLog),
/* harmony export */   "StorageClassAnalysisFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClassAnalysisFilterSensitiveLog),
/* harmony export */   "StorageClassAnalysisSchemaVersion": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClassAnalysisSchemaVersion),
/* harmony export */   "TagFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TagFilterSensitiveLog),
/* harmony export */   "TaggingDirective": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TaggingDirective),
/* harmony export */   "TaggingFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TaggingFilterSensitiveLog),
/* harmony export */   "TargetGrantFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TargetGrantFilterSensitiveLog),
/* harmony export */   "Tier": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Tier),
/* harmony export */   "TieringFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TieringFilterSensitiveLog),
/* harmony export */   "TopicConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TopicConfigurationFilterSensitiveLog),
/* harmony export */   "TransitionFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TransitionFilterSensitiveLog),
/* harmony export */   "TransitionStorageClass": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TransitionStorageClass),
/* harmony export */   "Type": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Type),
/* harmony export */   "UploadPartCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UploadPartCommand),
/* harmony export */   "UploadPartCopyCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UploadPartCopyCommand),
/* harmony export */   "UploadPartCopyOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartCopyOutputFilterSensitiveLog),
/* harmony export */   "UploadPartCopyRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartCopyRequestFilterSensitiveLog),
/* harmony export */   "UploadPartOutputFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartOutputFilterSensitiveLog),
/* harmony export */   "UploadPartRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartRequestFilterSensitiveLog),
/* harmony export */   "VersioningConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.VersioningConfigurationFilterSensitiveLog),
/* harmony export */   "WebsiteConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.WebsiteConfigurationFilterSensitiveLog),
/* harmony export */   "WriteGetObjectResponseCommand": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.WriteGetObjectResponseCommand),
/* harmony export */   "WriteGetObjectResponseRequestFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.WriteGetObjectResponseRequestFilterSensitiveLog),
/* harmony export */   "_ErrorFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__._ErrorFilterSensitiveLog),
/* harmony export */   "_ObjectFilterSensitiveLog": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__._ObjectFilterSensitiveLog),
/* harmony export */   "paginateListObjectsV2": () => (/* reexport safe */ _pagination__WEBPACK_IMPORTED_MODULE_4__.paginateListObjectsV2),
/* harmony export */   "paginateListParts": () => (/* reexport safe */ _pagination__WEBPACK_IMPORTED_MODULE_4__.paginateListParts),
/* harmony export */   "waitForBucketExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForBucketExists),
/* harmony export */   "waitForBucketNotExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForBucketNotExists),
/* harmony export */   "waitForObjectExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForObjectExists),
/* harmony export */   "waitForObjectNotExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForObjectNotExists),
/* harmony export */   "waitUntilBucketExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilBucketExists),
/* harmony export */   "waitUntilBucketNotExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilBucketNotExists),
/* harmony export */   "waitUntilObjectExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilObjectExists),
/* harmony export */   "waitUntilObjectNotExists": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilObjectNotExists)
/* harmony export */ });
/* harmony import */ var _S3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./S3 */ "./node_modules/@aws-sdk/client-s3/dist-es/S3.js");
/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./S3Client */ "./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js");
/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models */ "./node_modules/@aws-sdk/client-s3/dist-es/models/index.js");
/* harmony import */ var _pagination__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination */ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js");
/* harmony import */ var _waiters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./waiters */ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js");
/* harmony import */ var _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./models/S3ServiceException */ "./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js");









/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S3ServiceException": () => (/* binding */ S3ServiceException)
/* harmony export */ });
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");

class S3ServiceException extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, S3ServiceException.prototype);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbortIncompleteMultipartUploadFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AbortIncompleteMultipartUploadFilterSensitiveLog),
/* harmony export */   "AbortMultipartUploadOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AbortMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "AbortMultipartUploadRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AbortMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "AccelerateConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AccelerateConfigurationFilterSensitiveLog),
/* harmony export */   "AccessControlPolicyFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AccessControlPolicyFilterSensitiveLog),
/* harmony export */   "AccessControlTranslationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AccessControlTranslationFilterSensitiveLog),
/* harmony export */   "AnalyticsAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsAndOperatorFilterSensitiveLog),
/* harmony export */   "AnalyticsConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsConfigurationFilterSensitiveLog),
/* harmony export */   "AnalyticsExportDestinationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsExportDestinationFilterSensitiveLog),
/* harmony export */   "AnalyticsFilter": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsFilter),
/* harmony export */   "AnalyticsFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsFilterFilterSensitiveLog),
/* harmony export */   "AnalyticsS3BucketDestinationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsS3BucketDestinationFilterSensitiveLog),
/* harmony export */   "AnalyticsS3ExportFileFormat": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsS3ExportFileFormat),
/* harmony export */   "ArchiveStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ArchiveStatus),
/* harmony export */   "BucketAccelerateStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketAccelerateStatus),
/* harmony export */   "BucketAlreadyExists": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketAlreadyExists),
/* harmony export */   "BucketAlreadyOwnedByYou": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketAlreadyOwnedByYou),
/* harmony export */   "BucketCannedACL": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketCannedACL),
/* harmony export */   "BucketFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketFilterSensitiveLog),
/* harmony export */   "BucketLifecycleConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLifecycleConfigurationFilterSensitiveLog),
/* harmony export */   "BucketLocationConstraint": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLocationConstraint),
/* harmony export */   "BucketLoggingStatusFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLoggingStatusFilterSensitiveLog),
/* harmony export */   "BucketLogsPermission": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLogsPermission),
/* harmony export */   "BucketVersioningStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketVersioningStatus),
/* harmony export */   "CORSConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CORSConfigurationFilterSensitiveLog),
/* harmony export */   "CORSRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CORSRuleFilterSensitiveLog),
/* harmony export */   "CSVInputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CSVInputFilterSensitiveLog),
/* harmony export */   "CSVOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CSVOutputFilterSensitiveLog),
/* harmony export */   "ChecksumAlgorithm": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm),
/* harmony export */   "ChecksumFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ChecksumFilterSensitiveLog),
/* harmony export */   "ChecksumMode": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ChecksumMode),
/* harmony export */   "CommonPrefixFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CommonPrefixFilterSensitiveLog),
/* harmony export */   "CompleteMultipartUploadOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompleteMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "CompleteMultipartUploadRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompleteMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "CompletedMultipartUploadFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompletedMultipartUploadFilterSensitiveLog),
/* harmony export */   "CompletedPartFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompletedPartFilterSensitiveLog),
/* harmony export */   "CompressionType": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CompressionType),
/* harmony export */   "ConditionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ConditionFilterSensitiveLog),
/* harmony export */   "ContinuationEventFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ContinuationEventFilterSensitiveLog),
/* harmony export */   "CopyObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CopyObjectOutputFilterSensitiveLog),
/* harmony export */   "CopyObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CopyObjectRequestFilterSensitiveLog),
/* harmony export */   "CopyObjectResultFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CopyObjectResultFilterSensitiveLog),
/* harmony export */   "CopyPartResultFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CopyPartResultFilterSensitiveLog),
/* harmony export */   "CreateBucketConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateBucketConfigurationFilterSensitiveLog),
/* harmony export */   "CreateBucketOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateBucketOutputFilterSensitiveLog),
/* harmony export */   "CreateBucketRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateBucketRequestFilterSensitiveLog),
/* harmony export */   "CreateMultipartUploadOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "CreateMultipartUploadRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "DefaultRetentionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DefaultRetentionFilterSensitiveLog),
/* harmony export */   "DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketCorsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketEncryptionRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketLifecycleRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketLifecycleRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketPolicyRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketReplicationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketWebsiteRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "DeleteFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteFilterSensitiveLog),
/* harmony export */   "DeleteMarkerEntryFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteMarkerEntryFilterSensitiveLog),
/* harmony export */   "DeleteMarkerReplicationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteMarkerReplicationFilterSensitiveLog),
/* harmony export */   "DeleteMarkerReplicationStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteMarkerReplicationStatus),
/* harmony export */   "DeleteObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectRequestFilterSensitiveLog),
/* harmony export */   "DeleteObjectTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "DeleteObjectsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectsOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectsRequestFilterSensitiveLog),
/* harmony export */   "DeletePublicAccessBlockRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeletePublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "DeletedObjectFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeletedObjectFilterSensitiveLog),
/* harmony export */   "DestinationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DestinationFilterSensitiveLog),
/* harmony export */   "EncodingType": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.EncodingType),
/* harmony export */   "EncryptionConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.EncryptionConfigurationFilterSensitiveLog),
/* harmony export */   "EncryptionFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.EncryptionFilterSensitiveLog),
/* harmony export */   "EndEventFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.EndEventFilterSensitiveLog),
/* harmony export */   "ErrorDocumentFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ErrorDocumentFilterSensitiveLog),
/* harmony export */   "EventBridgeConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.EventBridgeConfigurationFilterSensitiveLog),
/* harmony export */   "ExistingObjectReplicationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExistingObjectReplicationFilterSensitiveLog),
/* harmony export */   "ExistingObjectReplicationStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExistingObjectReplicationStatus),
/* harmony export */   "ExpirationStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExpirationStatus),
/* harmony export */   "ExpressionType": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ExpressionType),
/* harmony export */   "FileHeaderInfo": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.FileHeaderInfo),
/* harmony export */   "FilterRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.FilterRuleFilterSensitiveLog),
/* harmony export */   "FilterRuleName": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.FilterRuleName),
/* harmony export */   "GetBucketAccelerateConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAccelerateConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAccelerateConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAccelerateConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketAclOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAclOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAclRequestFilterSensitiveLog),
/* harmony export */   "GetBucketAnalyticsConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketCorsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketCorsOutputFilterSensitiveLog),
/* harmony export */   "GetBucketCorsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "GetBucketEncryptionOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketEncryptionOutputFilterSensitiveLog),
/* harmony export */   "GetBucketEncryptionRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketInventoryConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketInventoryConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLifecycleConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLifecycleConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLifecycleConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLifecycleConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLocationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLocationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLocationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLocationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLoggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLoggingOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLoggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLoggingRequestFilterSensitiveLog),
/* harmony export */   "GetBucketMetricsConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketMetricsConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketNotificationConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketNotificationConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketOwnershipControlsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketOwnershipControlsOutputFilterSensitiveLog),
/* harmony export */   "GetBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyOutputFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyStatusOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyStatusOutputFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyStatusRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyStatusRequestFilterSensitiveLog),
/* harmony export */   "GetBucketReplicationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketReplicationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketReplicationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketRequestPaymentOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketRequestPaymentOutputFilterSensitiveLog),
/* harmony export */   "GetBucketRequestPaymentRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketRequestPaymentRequestFilterSensitiveLog),
/* harmony export */   "GetBucketTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketTaggingOutputFilterSensitiveLog),
/* harmony export */   "GetBucketTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "GetBucketVersioningOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketVersioningOutputFilterSensitiveLog),
/* harmony export */   "GetBucketVersioningRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketVersioningRequestFilterSensitiveLog),
/* harmony export */   "GetBucketWebsiteOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketWebsiteOutputFilterSensitiveLog),
/* harmony export */   "GetBucketWebsiteRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "GetObjectAclOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAclOutputFilterSensitiveLog),
/* harmony export */   "GetObjectAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAclRequestFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAttributesOutputFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesPartsFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAttributesPartsFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAttributesRequestFilterSensitiveLog),
/* harmony export */   "GetObjectLegalHoldOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLegalHoldOutputFilterSensitiveLog),
/* harmony export */   "GetObjectLegalHoldRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLegalHoldRequestFilterSensitiveLog),
/* harmony export */   "GetObjectLockConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLockConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetObjectLockConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLockConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectOutputFilterSensitiveLog),
/* harmony export */   "GetObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectRequestFilterSensitiveLog),
/* harmony export */   "GetObjectRetentionOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectRetentionOutputFilterSensitiveLog),
/* harmony export */   "GetObjectRetentionRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectRetentionRequestFilterSensitiveLog),
/* harmony export */   "GetObjectTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "GetObjectTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "GetObjectTorrentOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTorrentOutputFilterSensitiveLog),
/* harmony export */   "GetObjectTorrentRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTorrentRequestFilterSensitiveLog),
/* harmony export */   "GetPublicAccessBlockOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetPublicAccessBlockOutputFilterSensitiveLog),
/* harmony export */   "GetPublicAccessBlockRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetPublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "GlacierJobParametersFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.GlacierJobParametersFilterSensitiveLog),
/* harmony export */   "GrantFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GrantFilterSensitiveLog),
/* harmony export */   "GranteeFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GranteeFilterSensitiveLog),
/* harmony export */   "HeadBucketRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.HeadBucketRequestFilterSensitiveLog),
/* harmony export */   "HeadObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.HeadObjectOutputFilterSensitiveLog),
/* harmony export */   "HeadObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.HeadObjectRequestFilterSensitiveLog),
/* harmony export */   "IndexDocumentFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IndexDocumentFilterSensitiveLog),
/* harmony export */   "InitiatorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InitiatorFilterSensitiveLog),
/* harmony export */   "InputSerializationFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.InputSerializationFilterSensitiveLog),
/* harmony export */   "IntelligentTieringAccessTier": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringAccessTier),
/* harmony export */   "IntelligentTieringAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringAndOperatorFilterSensitiveLog),
/* harmony export */   "IntelligentTieringConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringConfigurationFilterSensitiveLog),
/* harmony export */   "IntelligentTieringFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringFilterFilterSensitiveLog),
/* harmony export */   "IntelligentTieringStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringStatus),
/* harmony export */   "InvalidObjectState": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InvalidObjectState),
/* harmony export */   "InventoryConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryConfigurationFilterSensitiveLog),
/* harmony export */   "InventoryDestinationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryDestinationFilterSensitiveLog),
/* harmony export */   "InventoryEncryptionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryEncryptionFilterSensitiveLog),
/* harmony export */   "InventoryFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryFilterFilterSensitiveLog),
/* harmony export */   "InventoryFormat": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryFormat),
/* harmony export */   "InventoryFrequency": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryFrequency),
/* harmony export */   "InventoryIncludedObjectVersions": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryIncludedObjectVersions),
/* harmony export */   "InventoryOptionalField": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryOptionalField),
/* harmony export */   "InventoryS3BucketDestinationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryS3BucketDestinationFilterSensitiveLog),
/* harmony export */   "InventoryScheduleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryScheduleFilterSensitiveLog),
/* harmony export */   "JSONInputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.JSONInputFilterSensitiveLog),
/* harmony export */   "JSONOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.JSONOutputFilterSensitiveLog),
/* harmony export */   "JSONType": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.JSONType),
/* harmony export */   "LambdaFunctionConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LambdaFunctionConfigurationFilterSensitiveLog),
/* harmony export */   "LifecycleExpirationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleExpirationFilterSensitiveLog),
/* harmony export */   "LifecycleRuleAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleAndOperatorFilterSensitiveLog),
/* harmony export */   "LifecycleRuleFilter": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleFilter),
/* harmony export */   "LifecycleRuleFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleFilterFilterSensitiveLog),
/* harmony export */   "LifecycleRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleFilterSensitiveLog),
/* harmony export */   "ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketInventoryConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketInventoryConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketInventoryConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketInventoryConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketMetricsConfigurationsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketMetricsConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketMetricsConfigurationsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketMetricsConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketsOutputFilterSensitiveLog),
/* harmony export */   "ListMultipartUploadsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListMultipartUploadsOutputFilterSensitiveLog),
/* harmony export */   "ListMultipartUploadsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListMultipartUploadsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectVersionsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectVersionsOutputFilterSensitiveLog),
/* harmony export */   "ListObjectVersionsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectVersionsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsOutputFilterSensitiveLog),
/* harmony export */   "ListObjectsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectsV2OutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsV2OutputFilterSensitiveLog),
/* harmony export */   "ListObjectsV2RequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsV2RequestFilterSensitiveLog),
/* harmony export */   "ListPartsOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListPartsOutputFilterSensitiveLog),
/* harmony export */   "ListPartsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListPartsRequestFilterSensitiveLog),
/* harmony export */   "LoggingEnabledFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LoggingEnabledFilterSensitiveLog),
/* harmony export */   "MFADelete": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MFADelete),
/* harmony export */   "MFADeleteStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MFADeleteStatus),
/* harmony export */   "MetadataDirective": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetadataDirective),
/* harmony export */   "MetadataEntryFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.MetadataEntryFilterSensitiveLog),
/* harmony export */   "MetricsAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsAndOperatorFilterSensitiveLog),
/* harmony export */   "MetricsConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsConfigurationFilterSensitiveLog),
/* harmony export */   "MetricsFilter": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsFilter),
/* harmony export */   "MetricsFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsFilterFilterSensitiveLog),
/* harmony export */   "MetricsFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsFilterSensitiveLog),
/* harmony export */   "MetricsStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsStatus),
/* harmony export */   "MultipartUploadFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MultipartUploadFilterSensitiveLog),
/* harmony export */   "NoSuchBucket": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoSuchBucket),
/* harmony export */   "NoSuchKey": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoSuchKey),
/* harmony export */   "NoSuchUpload": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoSuchUpload),
/* harmony export */   "NoncurrentVersionExpirationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoncurrentVersionExpirationFilterSensitiveLog),
/* harmony export */   "NoncurrentVersionTransitionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoncurrentVersionTransitionFilterSensitiveLog),
/* harmony export */   "NotFound": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotFound),
/* harmony export */   "NotificationConfigurationFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotificationConfigurationFilterFilterSensitiveLog),
/* harmony export */   "NotificationConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotificationConfigurationFilterSensitiveLog),
/* harmony export */   "ObjectAlreadyInActiveTierError": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ObjectAlreadyInActiveTierError),
/* harmony export */   "ObjectAttributes": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectAttributes),
/* harmony export */   "ObjectCannedACL": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectCannedACL),
/* harmony export */   "ObjectIdentifierFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifierFilterSensitiveLog),
/* harmony export */   "ObjectLockConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockConfigurationFilterSensitiveLog),
/* harmony export */   "ObjectLockEnabled": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockEnabled),
/* harmony export */   "ObjectLockLegalHoldFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockLegalHoldFilterSensitiveLog),
/* harmony export */   "ObjectLockLegalHoldStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockLegalHoldStatus),
/* harmony export */   "ObjectLockMode": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockMode),
/* harmony export */   "ObjectLockRetentionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockRetentionFilterSensitiveLog),
/* harmony export */   "ObjectLockRetentionMode": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockRetentionMode),
/* harmony export */   "ObjectLockRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockRuleFilterSensitiveLog),
/* harmony export */   "ObjectNotInActiveTierError": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectNotInActiveTierError),
/* harmony export */   "ObjectOwnership": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectOwnership),
/* harmony export */   "ObjectPartFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectPartFilterSensitiveLog),
/* harmony export */   "ObjectStorageClass": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectStorageClass),
/* harmony export */   "ObjectVersionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectVersionFilterSensitiveLog),
/* harmony export */   "ObjectVersionStorageClass": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectVersionStorageClass),
/* harmony export */   "OutputLocationFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.OutputLocationFilterSensitiveLog),
/* harmony export */   "OutputSerializationFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.OutputSerializationFilterSensitiveLog),
/* harmony export */   "OwnerFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnerFilterSensitiveLog),
/* harmony export */   "OwnerOverride": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnerOverride),
/* harmony export */   "OwnershipControlsFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnershipControlsFilterSensitiveLog),
/* harmony export */   "OwnershipControlsRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnershipControlsRuleFilterSensitiveLog),
/* harmony export */   "ParquetInputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ParquetInputFilterSensitiveLog),
/* harmony export */   "PartFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PartFilterSensitiveLog),
/* harmony export */   "Payer": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Payer),
/* harmony export */   "Permission": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Permission),
/* harmony export */   "PolicyStatusFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PolicyStatusFilterSensitiveLog),
/* harmony export */   "ProgressEventFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ProgressEventFilterSensitiveLog),
/* harmony export */   "ProgressFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ProgressFilterSensitiveLog),
/* harmony export */   "Protocol": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Protocol),
/* harmony export */   "PublicAccessBlockConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PublicAccessBlockConfigurationFilterSensitiveLog),
/* harmony export */   "PutBucketAccelerateConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketAccelerateConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketAclRequestFilterSensitiveLog),
/* harmony export */   "PutBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketCorsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "PutBucketEncryptionRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketLifecycleConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketLifecycleConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketLoggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketLoggingRequestFilterSensitiveLog),
/* harmony export */   "PutBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketNotificationConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketNotificationConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "PutBucketPolicyRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "PutBucketReplicationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketRequestPaymentRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketRequestPaymentRequestFilterSensitiveLog),
/* harmony export */   "PutBucketTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "PutBucketVersioningRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketVersioningRequestFilterSensitiveLog),
/* harmony export */   "PutBucketWebsiteRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "PutObjectAclOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectAclOutputFilterSensitiveLog),
/* harmony export */   "PutObjectAclRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectAclRequestFilterSensitiveLog),
/* harmony export */   "PutObjectLegalHoldOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLegalHoldOutputFilterSensitiveLog),
/* harmony export */   "PutObjectLegalHoldRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLegalHoldRequestFilterSensitiveLog),
/* harmony export */   "PutObjectLockConfigurationOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLockConfigurationOutputFilterSensitiveLog),
/* harmony export */   "PutObjectLockConfigurationRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLockConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectOutputFilterSensitiveLog),
/* harmony export */   "PutObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectRequestFilterSensitiveLog),
/* harmony export */   "PutObjectRetentionOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectRetentionOutputFilterSensitiveLog),
/* harmony export */   "PutObjectRetentionRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectRetentionRequestFilterSensitiveLog),
/* harmony export */   "PutObjectTaggingOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "PutObjectTaggingRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "PutPublicAccessBlockRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutPublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "QueueConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.QueueConfigurationFilterSensitiveLog),
/* harmony export */   "QuoteFields": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.QuoteFields),
/* harmony export */   "RecordsEventFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RecordsEventFilterSensitiveLog),
/* harmony export */   "RedirectAllRequestsToFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RedirectAllRequestsToFilterSensitiveLog),
/* harmony export */   "RedirectFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RedirectFilterSensitiveLog),
/* harmony export */   "ReplicaModificationsFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicaModificationsFilterSensitiveLog),
/* harmony export */   "ReplicaModificationsStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicaModificationsStatus),
/* harmony export */   "ReplicationConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationConfigurationFilterSensitiveLog),
/* harmony export */   "ReplicationRuleAndOperatorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleAndOperatorFilterSensitiveLog),
/* harmony export */   "ReplicationRuleFilter": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleFilter),
/* harmony export */   "ReplicationRuleFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleFilterFilterSensitiveLog),
/* harmony export */   "ReplicationRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleFilterSensitiveLog),
/* harmony export */   "ReplicationRuleStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleStatus),
/* harmony export */   "ReplicationStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationStatus),
/* harmony export */   "ReplicationTimeFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationTimeFilterSensitiveLog),
/* harmony export */   "ReplicationTimeStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationTimeStatus),
/* harmony export */   "ReplicationTimeValueFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationTimeValueFilterSensitiveLog),
/* harmony export */   "RequestCharged": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RequestCharged),
/* harmony export */   "RequestPayer": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RequestPayer),
/* harmony export */   "RequestPaymentConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RequestPaymentConfigurationFilterSensitiveLog),
/* harmony export */   "RequestProgressFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RequestProgressFilterSensitiveLog),
/* harmony export */   "RestoreObjectOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreObjectOutputFilterSensitiveLog),
/* harmony export */   "RestoreObjectRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreObjectRequestFilterSensitiveLog),
/* harmony export */   "RestoreRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreRequestFilterSensitiveLog),
/* harmony export */   "RestoreRequestType": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreRequestType),
/* harmony export */   "RoutingRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RoutingRuleFilterSensitiveLog),
/* harmony export */   "S3KeyFilterFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.S3KeyFilterFilterSensitiveLog),
/* harmony export */   "S3LocationFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.S3LocationFilterSensitiveLog),
/* harmony export */   "SSEKMSFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SSEKMSFilterSensitiveLog),
/* harmony export */   "SSES3FilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SSES3FilterSensitiveLog),
/* harmony export */   "ScanRangeFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ScanRangeFilterSensitiveLog),
/* harmony export */   "SelectObjectContentEventStream": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentEventStream),
/* harmony export */   "SelectObjectContentEventStreamFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentEventStreamFilterSensitiveLog),
/* harmony export */   "SelectObjectContentOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentOutputFilterSensitiveLog),
/* harmony export */   "SelectObjectContentRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentRequestFilterSensitiveLog),
/* harmony export */   "SelectParametersFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectParametersFilterSensitiveLog),
/* harmony export */   "ServerSideEncryption": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryption),
/* harmony export */   "ServerSideEncryptionByDefaultFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryptionByDefaultFilterSensitiveLog),
/* harmony export */   "ServerSideEncryptionConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryptionConfigurationFilterSensitiveLog),
/* harmony export */   "ServerSideEncryptionRuleFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryptionRuleFilterSensitiveLog),
/* harmony export */   "SourceSelectionCriteriaFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SourceSelectionCriteriaFilterSensitiveLog),
/* harmony export */   "SseKmsEncryptedObjectsFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SseKmsEncryptedObjectsFilterSensitiveLog),
/* harmony export */   "SseKmsEncryptedObjectsStatus": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SseKmsEncryptedObjectsStatus),
/* harmony export */   "StatsEventFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.StatsEventFilterSensitiveLog),
/* harmony export */   "StatsFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.StatsFilterSensitiveLog),
/* harmony export */   "StorageClass": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClass),
/* harmony export */   "StorageClassAnalysisDataExportFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClassAnalysisDataExportFilterSensitiveLog),
/* harmony export */   "StorageClassAnalysisFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClassAnalysisFilterSensitiveLog),
/* harmony export */   "StorageClassAnalysisSchemaVersion": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClassAnalysisSchemaVersion),
/* harmony export */   "TagFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TagFilterSensitiveLog),
/* harmony export */   "TaggingDirective": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TaggingDirective),
/* harmony export */   "TaggingFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TaggingFilterSensitiveLog),
/* harmony export */   "TargetGrantFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TargetGrantFilterSensitiveLog),
/* harmony export */   "Tier": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.Tier),
/* harmony export */   "TieringFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TieringFilterSensitiveLog),
/* harmony export */   "TopicConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TopicConfigurationFilterSensitiveLog),
/* harmony export */   "TransitionFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TransitionFilterSensitiveLog),
/* harmony export */   "TransitionStorageClass": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TransitionStorageClass),
/* harmony export */   "Type": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Type),
/* harmony export */   "UploadPartCopyOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartCopyOutputFilterSensitiveLog),
/* harmony export */   "UploadPartCopyRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartCopyRequestFilterSensitiveLog),
/* harmony export */   "UploadPartOutputFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartOutputFilterSensitiveLog),
/* harmony export */   "UploadPartRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartRequestFilterSensitiveLog),
/* harmony export */   "VersioningConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.VersioningConfigurationFilterSensitiveLog),
/* harmony export */   "WebsiteConfigurationFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.WebsiteConfigurationFilterSensitiveLog),
/* harmony export */   "WriteGetObjectResponseRequestFilterSensitiveLog": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.WriteGetObjectResponseRequestFilterSensitiveLog),
/* harmony export */   "_ErrorFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__._ErrorFilterSensitiveLog),
/* harmony export */   "_ObjectFilterSensitiveLog": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__._ObjectFilterSensitiveLog)
/* harmony export */ });
/* harmony import */ var _models_0__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _models_1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbortIncompleteMultipartUploadFilterSensitiveLog": () => (/* binding */ AbortIncompleteMultipartUploadFilterSensitiveLog),
/* harmony export */   "AbortMultipartUploadOutputFilterSensitiveLog": () => (/* binding */ AbortMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "AbortMultipartUploadRequestFilterSensitiveLog": () => (/* binding */ AbortMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "AccelerateConfigurationFilterSensitiveLog": () => (/* binding */ AccelerateConfigurationFilterSensitiveLog),
/* harmony export */   "AccessControlPolicyFilterSensitiveLog": () => (/* binding */ AccessControlPolicyFilterSensitiveLog),
/* harmony export */   "AccessControlTranslationFilterSensitiveLog": () => (/* binding */ AccessControlTranslationFilterSensitiveLog),
/* harmony export */   "AnalyticsAndOperatorFilterSensitiveLog": () => (/* binding */ AnalyticsAndOperatorFilterSensitiveLog),
/* harmony export */   "AnalyticsConfigurationFilterSensitiveLog": () => (/* binding */ AnalyticsConfigurationFilterSensitiveLog),
/* harmony export */   "AnalyticsExportDestinationFilterSensitiveLog": () => (/* binding */ AnalyticsExportDestinationFilterSensitiveLog),
/* harmony export */   "AnalyticsFilter": () => (/* binding */ AnalyticsFilter),
/* harmony export */   "AnalyticsFilterFilterSensitiveLog": () => (/* binding */ AnalyticsFilterFilterSensitiveLog),
/* harmony export */   "AnalyticsS3BucketDestinationFilterSensitiveLog": () => (/* binding */ AnalyticsS3BucketDestinationFilterSensitiveLog),
/* harmony export */   "AnalyticsS3ExportFileFormat": () => (/* binding */ AnalyticsS3ExportFileFormat),
/* harmony export */   "ArchiveStatus": () => (/* binding */ ArchiveStatus),
/* harmony export */   "BucketAccelerateStatus": () => (/* binding */ BucketAccelerateStatus),
/* harmony export */   "BucketAlreadyExists": () => (/* binding */ BucketAlreadyExists),
/* harmony export */   "BucketAlreadyOwnedByYou": () => (/* binding */ BucketAlreadyOwnedByYou),
/* harmony export */   "BucketCannedACL": () => (/* binding */ BucketCannedACL),
/* harmony export */   "BucketFilterSensitiveLog": () => (/* binding */ BucketFilterSensitiveLog),
/* harmony export */   "BucketLifecycleConfigurationFilterSensitiveLog": () => (/* binding */ BucketLifecycleConfigurationFilterSensitiveLog),
/* harmony export */   "BucketLocationConstraint": () => (/* binding */ BucketLocationConstraint),
/* harmony export */   "BucketLoggingStatusFilterSensitiveLog": () => (/* binding */ BucketLoggingStatusFilterSensitiveLog),
/* harmony export */   "BucketLogsPermission": () => (/* binding */ BucketLogsPermission),
/* harmony export */   "BucketVersioningStatus": () => (/* binding */ BucketVersioningStatus),
/* harmony export */   "CORSConfigurationFilterSensitiveLog": () => (/* binding */ CORSConfigurationFilterSensitiveLog),
/* harmony export */   "CORSRuleFilterSensitiveLog": () => (/* binding */ CORSRuleFilterSensitiveLog),
/* harmony export */   "ChecksumAlgorithm": () => (/* binding */ ChecksumAlgorithm),
/* harmony export */   "ChecksumFilterSensitiveLog": () => (/* binding */ ChecksumFilterSensitiveLog),
/* harmony export */   "ChecksumMode": () => (/* binding */ ChecksumMode),
/* harmony export */   "CommonPrefixFilterSensitiveLog": () => (/* binding */ CommonPrefixFilterSensitiveLog),
/* harmony export */   "CompleteMultipartUploadOutputFilterSensitiveLog": () => (/* binding */ CompleteMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "CompleteMultipartUploadRequestFilterSensitiveLog": () => (/* binding */ CompleteMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "CompletedMultipartUploadFilterSensitiveLog": () => (/* binding */ CompletedMultipartUploadFilterSensitiveLog),
/* harmony export */   "CompletedPartFilterSensitiveLog": () => (/* binding */ CompletedPartFilterSensitiveLog),
/* harmony export */   "ConditionFilterSensitiveLog": () => (/* binding */ ConditionFilterSensitiveLog),
/* harmony export */   "CopyObjectOutputFilterSensitiveLog": () => (/* binding */ CopyObjectOutputFilterSensitiveLog),
/* harmony export */   "CopyObjectRequestFilterSensitiveLog": () => (/* binding */ CopyObjectRequestFilterSensitiveLog),
/* harmony export */   "CopyObjectResultFilterSensitiveLog": () => (/* binding */ CopyObjectResultFilterSensitiveLog),
/* harmony export */   "CreateBucketConfigurationFilterSensitiveLog": () => (/* binding */ CreateBucketConfigurationFilterSensitiveLog),
/* harmony export */   "CreateBucketOutputFilterSensitiveLog": () => (/* binding */ CreateBucketOutputFilterSensitiveLog),
/* harmony export */   "CreateBucketRequestFilterSensitiveLog": () => (/* binding */ CreateBucketRequestFilterSensitiveLog),
/* harmony export */   "CreateMultipartUploadOutputFilterSensitiveLog": () => (/* binding */ CreateMultipartUploadOutputFilterSensitiveLog),
/* harmony export */   "CreateMultipartUploadRequestFilterSensitiveLog": () => (/* binding */ CreateMultipartUploadRequestFilterSensitiveLog),
/* harmony export */   "DefaultRetentionFilterSensitiveLog": () => (/* binding */ DefaultRetentionFilterSensitiveLog),
/* harmony export */   "DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketCorsRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketEncryptionRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketLifecycleRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketLifecycleRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketPolicyRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketReplicationRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketTaggingRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "DeleteBucketWebsiteRequestFilterSensitiveLog": () => (/* binding */ DeleteBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "DeleteFilterSensitiveLog": () => (/* binding */ DeleteFilterSensitiveLog),
/* harmony export */   "DeleteMarkerEntryFilterSensitiveLog": () => (/* binding */ DeleteMarkerEntryFilterSensitiveLog),
/* harmony export */   "DeleteMarkerReplicationFilterSensitiveLog": () => (/* binding */ DeleteMarkerReplicationFilterSensitiveLog),
/* harmony export */   "DeleteMarkerReplicationStatus": () => (/* binding */ DeleteMarkerReplicationStatus),
/* harmony export */   "DeleteObjectOutputFilterSensitiveLog": () => (/* binding */ DeleteObjectOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectRequestFilterSensitiveLog": () => (/* binding */ DeleteObjectRequestFilterSensitiveLog),
/* harmony export */   "DeleteObjectTaggingOutputFilterSensitiveLog": () => (/* binding */ DeleteObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectTaggingRequestFilterSensitiveLog": () => (/* binding */ DeleteObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "DeleteObjectsOutputFilterSensitiveLog": () => (/* binding */ DeleteObjectsOutputFilterSensitiveLog),
/* harmony export */   "DeleteObjectsRequestFilterSensitiveLog": () => (/* binding */ DeleteObjectsRequestFilterSensitiveLog),
/* harmony export */   "DeletePublicAccessBlockRequestFilterSensitiveLog": () => (/* binding */ DeletePublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "DeletedObjectFilterSensitiveLog": () => (/* binding */ DeletedObjectFilterSensitiveLog),
/* harmony export */   "DestinationFilterSensitiveLog": () => (/* binding */ DestinationFilterSensitiveLog),
/* harmony export */   "EncodingType": () => (/* binding */ EncodingType),
/* harmony export */   "EncryptionConfigurationFilterSensitiveLog": () => (/* binding */ EncryptionConfigurationFilterSensitiveLog),
/* harmony export */   "ErrorDocumentFilterSensitiveLog": () => (/* binding */ ErrorDocumentFilterSensitiveLog),
/* harmony export */   "EventBridgeConfigurationFilterSensitiveLog": () => (/* binding */ EventBridgeConfigurationFilterSensitiveLog),
/* harmony export */   "ExistingObjectReplicationFilterSensitiveLog": () => (/* binding */ ExistingObjectReplicationFilterSensitiveLog),
/* harmony export */   "ExistingObjectReplicationStatus": () => (/* binding */ ExistingObjectReplicationStatus),
/* harmony export */   "ExpirationStatus": () => (/* binding */ ExpirationStatus),
/* harmony export */   "FilterRuleFilterSensitiveLog": () => (/* binding */ FilterRuleFilterSensitiveLog),
/* harmony export */   "FilterRuleName": () => (/* binding */ FilterRuleName),
/* harmony export */   "GetBucketAccelerateConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetBucketAccelerateConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAccelerateConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketAccelerateConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketAclOutputFilterSensitiveLog": () => (/* binding */ GetBucketAclOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAclRequestFilterSensitiveLog": () => (/* binding */ GetBucketAclRequestFilterSensitiveLog),
/* harmony export */   "GetBucketAnalyticsConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetBucketAnalyticsConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketCorsOutputFilterSensitiveLog": () => (/* binding */ GetBucketCorsOutputFilterSensitiveLog),
/* harmony export */   "GetBucketCorsRequestFilterSensitiveLog": () => (/* binding */ GetBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "GetBucketEncryptionOutputFilterSensitiveLog": () => (/* binding */ GetBucketEncryptionOutputFilterSensitiveLog),
/* harmony export */   "GetBucketEncryptionRequestFilterSensitiveLog": () => (/* binding */ GetBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketInventoryConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetBucketInventoryConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLifecycleConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetBucketLifecycleConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLifecycleConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketLifecycleConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLocationOutputFilterSensitiveLog": () => (/* binding */ GetBucketLocationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLocationRequestFilterSensitiveLog": () => (/* binding */ GetBucketLocationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketLoggingOutputFilterSensitiveLog": () => (/* binding */ GetBucketLoggingOutputFilterSensitiveLog),
/* harmony export */   "GetBucketLoggingRequestFilterSensitiveLog": () => (/* binding */ GetBucketLoggingRequestFilterSensitiveLog),
/* harmony export */   "GetBucketMetricsConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetBucketMetricsConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketNotificationConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetBucketNotificationConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketOwnershipControlsOutputFilterSensitiveLog": () => (/* binding */ GetBucketOwnershipControlsOutputFilterSensitiveLog),
/* harmony export */   "GetBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* binding */ GetBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyOutputFilterSensitiveLog": () => (/* binding */ GetBucketPolicyOutputFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyRequestFilterSensitiveLog": () => (/* binding */ GetBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyStatusOutputFilterSensitiveLog": () => (/* binding */ GetBucketPolicyStatusOutputFilterSensitiveLog),
/* harmony export */   "GetBucketPolicyStatusRequestFilterSensitiveLog": () => (/* binding */ GetBucketPolicyStatusRequestFilterSensitiveLog),
/* harmony export */   "GetBucketReplicationOutputFilterSensitiveLog": () => (/* binding */ GetBucketReplicationOutputFilterSensitiveLog),
/* harmony export */   "GetBucketReplicationRequestFilterSensitiveLog": () => (/* binding */ GetBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "GetBucketRequestPaymentOutputFilterSensitiveLog": () => (/* binding */ GetBucketRequestPaymentOutputFilterSensitiveLog),
/* harmony export */   "GetBucketRequestPaymentRequestFilterSensitiveLog": () => (/* binding */ GetBucketRequestPaymentRequestFilterSensitiveLog),
/* harmony export */   "GetBucketTaggingOutputFilterSensitiveLog": () => (/* binding */ GetBucketTaggingOutputFilterSensitiveLog),
/* harmony export */   "GetBucketTaggingRequestFilterSensitiveLog": () => (/* binding */ GetBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "GetBucketVersioningOutputFilterSensitiveLog": () => (/* binding */ GetBucketVersioningOutputFilterSensitiveLog),
/* harmony export */   "GetBucketVersioningRequestFilterSensitiveLog": () => (/* binding */ GetBucketVersioningRequestFilterSensitiveLog),
/* harmony export */   "GetBucketWebsiteOutputFilterSensitiveLog": () => (/* binding */ GetBucketWebsiteOutputFilterSensitiveLog),
/* harmony export */   "GetBucketWebsiteRequestFilterSensitiveLog": () => (/* binding */ GetBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "GetObjectAclOutputFilterSensitiveLog": () => (/* binding */ GetObjectAclOutputFilterSensitiveLog),
/* harmony export */   "GetObjectAclRequestFilterSensitiveLog": () => (/* binding */ GetObjectAclRequestFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesOutputFilterSensitiveLog": () => (/* binding */ GetObjectAttributesOutputFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesPartsFilterSensitiveLog": () => (/* binding */ GetObjectAttributesPartsFilterSensitiveLog),
/* harmony export */   "GetObjectAttributesRequestFilterSensitiveLog": () => (/* binding */ GetObjectAttributesRequestFilterSensitiveLog),
/* harmony export */   "GetObjectLegalHoldOutputFilterSensitiveLog": () => (/* binding */ GetObjectLegalHoldOutputFilterSensitiveLog),
/* harmony export */   "GetObjectLegalHoldRequestFilterSensitiveLog": () => (/* binding */ GetObjectLegalHoldRequestFilterSensitiveLog),
/* harmony export */   "GetObjectLockConfigurationOutputFilterSensitiveLog": () => (/* binding */ GetObjectLockConfigurationOutputFilterSensitiveLog),
/* harmony export */   "GetObjectLockConfigurationRequestFilterSensitiveLog": () => (/* binding */ GetObjectLockConfigurationRequestFilterSensitiveLog),
/* harmony export */   "GetObjectOutputFilterSensitiveLog": () => (/* binding */ GetObjectOutputFilterSensitiveLog),
/* harmony export */   "GetObjectRequestFilterSensitiveLog": () => (/* binding */ GetObjectRequestFilterSensitiveLog),
/* harmony export */   "GetObjectRetentionOutputFilterSensitiveLog": () => (/* binding */ GetObjectRetentionOutputFilterSensitiveLog),
/* harmony export */   "GetObjectRetentionRequestFilterSensitiveLog": () => (/* binding */ GetObjectRetentionRequestFilterSensitiveLog),
/* harmony export */   "GetObjectTaggingOutputFilterSensitiveLog": () => (/* binding */ GetObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "GetObjectTaggingRequestFilterSensitiveLog": () => (/* binding */ GetObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "GetObjectTorrentOutputFilterSensitiveLog": () => (/* binding */ GetObjectTorrentOutputFilterSensitiveLog),
/* harmony export */   "GetObjectTorrentRequestFilterSensitiveLog": () => (/* binding */ GetObjectTorrentRequestFilterSensitiveLog),
/* harmony export */   "GetPublicAccessBlockOutputFilterSensitiveLog": () => (/* binding */ GetPublicAccessBlockOutputFilterSensitiveLog),
/* harmony export */   "GetPublicAccessBlockRequestFilterSensitiveLog": () => (/* binding */ GetPublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "GrantFilterSensitiveLog": () => (/* binding */ GrantFilterSensitiveLog),
/* harmony export */   "GranteeFilterSensitiveLog": () => (/* binding */ GranteeFilterSensitiveLog),
/* harmony export */   "HeadBucketRequestFilterSensitiveLog": () => (/* binding */ HeadBucketRequestFilterSensitiveLog),
/* harmony export */   "HeadObjectOutputFilterSensitiveLog": () => (/* binding */ HeadObjectOutputFilterSensitiveLog),
/* harmony export */   "HeadObjectRequestFilterSensitiveLog": () => (/* binding */ HeadObjectRequestFilterSensitiveLog),
/* harmony export */   "IndexDocumentFilterSensitiveLog": () => (/* binding */ IndexDocumentFilterSensitiveLog),
/* harmony export */   "InitiatorFilterSensitiveLog": () => (/* binding */ InitiatorFilterSensitiveLog),
/* harmony export */   "IntelligentTieringAccessTier": () => (/* binding */ IntelligentTieringAccessTier),
/* harmony export */   "IntelligentTieringAndOperatorFilterSensitiveLog": () => (/* binding */ IntelligentTieringAndOperatorFilterSensitiveLog),
/* harmony export */   "IntelligentTieringConfigurationFilterSensitiveLog": () => (/* binding */ IntelligentTieringConfigurationFilterSensitiveLog),
/* harmony export */   "IntelligentTieringFilterFilterSensitiveLog": () => (/* binding */ IntelligentTieringFilterFilterSensitiveLog),
/* harmony export */   "IntelligentTieringStatus": () => (/* binding */ IntelligentTieringStatus),
/* harmony export */   "InvalidObjectState": () => (/* binding */ InvalidObjectState),
/* harmony export */   "InventoryConfigurationFilterSensitiveLog": () => (/* binding */ InventoryConfigurationFilterSensitiveLog),
/* harmony export */   "InventoryDestinationFilterSensitiveLog": () => (/* binding */ InventoryDestinationFilterSensitiveLog),
/* harmony export */   "InventoryEncryptionFilterSensitiveLog": () => (/* binding */ InventoryEncryptionFilterSensitiveLog),
/* harmony export */   "InventoryFilterFilterSensitiveLog": () => (/* binding */ InventoryFilterFilterSensitiveLog),
/* harmony export */   "InventoryFormat": () => (/* binding */ InventoryFormat),
/* harmony export */   "InventoryFrequency": () => (/* binding */ InventoryFrequency),
/* harmony export */   "InventoryIncludedObjectVersions": () => (/* binding */ InventoryIncludedObjectVersions),
/* harmony export */   "InventoryOptionalField": () => (/* binding */ InventoryOptionalField),
/* harmony export */   "InventoryS3BucketDestinationFilterSensitiveLog": () => (/* binding */ InventoryS3BucketDestinationFilterSensitiveLog),
/* harmony export */   "InventoryScheduleFilterSensitiveLog": () => (/* binding */ InventoryScheduleFilterSensitiveLog),
/* harmony export */   "LambdaFunctionConfigurationFilterSensitiveLog": () => (/* binding */ LambdaFunctionConfigurationFilterSensitiveLog),
/* harmony export */   "LifecycleExpirationFilterSensitiveLog": () => (/* binding */ LifecycleExpirationFilterSensitiveLog),
/* harmony export */   "LifecycleRuleAndOperatorFilterSensitiveLog": () => (/* binding */ LifecycleRuleAndOperatorFilterSensitiveLog),
/* harmony export */   "LifecycleRuleFilter": () => (/* binding */ LifecycleRuleFilter),
/* harmony export */   "LifecycleRuleFilterFilterSensitiveLog": () => (/* binding */ LifecycleRuleFilterFilterSensitiveLog),
/* harmony export */   "LifecycleRuleFilterSensitiveLog": () => (/* binding */ LifecycleRuleFilterSensitiveLog),
/* harmony export */   "ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog": () => (/* binding */ ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog": () => (/* binding */ ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog": () => (/* binding */ ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog": () => (/* binding */ ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketInventoryConfigurationsOutputFilterSensitiveLog": () => (/* binding */ ListBucketInventoryConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketInventoryConfigurationsRequestFilterSensitiveLog": () => (/* binding */ ListBucketInventoryConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketMetricsConfigurationsOutputFilterSensitiveLog": () => (/* binding */ ListBucketMetricsConfigurationsOutputFilterSensitiveLog),
/* harmony export */   "ListBucketMetricsConfigurationsRequestFilterSensitiveLog": () => (/* binding */ ListBucketMetricsConfigurationsRequestFilterSensitiveLog),
/* harmony export */   "ListBucketsOutputFilterSensitiveLog": () => (/* binding */ ListBucketsOutputFilterSensitiveLog),
/* harmony export */   "ListMultipartUploadsOutputFilterSensitiveLog": () => (/* binding */ ListMultipartUploadsOutputFilterSensitiveLog),
/* harmony export */   "ListMultipartUploadsRequestFilterSensitiveLog": () => (/* binding */ ListMultipartUploadsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectVersionsOutputFilterSensitiveLog": () => (/* binding */ ListObjectVersionsOutputFilterSensitiveLog),
/* harmony export */   "ListObjectVersionsRequestFilterSensitiveLog": () => (/* binding */ ListObjectVersionsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectsOutputFilterSensitiveLog": () => (/* binding */ ListObjectsOutputFilterSensitiveLog),
/* harmony export */   "ListObjectsRequestFilterSensitiveLog": () => (/* binding */ ListObjectsRequestFilterSensitiveLog),
/* harmony export */   "ListObjectsV2OutputFilterSensitiveLog": () => (/* binding */ ListObjectsV2OutputFilterSensitiveLog),
/* harmony export */   "ListObjectsV2RequestFilterSensitiveLog": () => (/* binding */ ListObjectsV2RequestFilterSensitiveLog),
/* harmony export */   "ListPartsOutputFilterSensitiveLog": () => (/* binding */ ListPartsOutputFilterSensitiveLog),
/* harmony export */   "ListPartsRequestFilterSensitiveLog": () => (/* binding */ ListPartsRequestFilterSensitiveLog),
/* harmony export */   "LoggingEnabledFilterSensitiveLog": () => (/* binding */ LoggingEnabledFilterSensitiveLog),
/* harmony export */   "MFADelete": () => (/* binding */ MFADelete),
/* harmony export */   "MFADeleteStatus": () => (/* binding */ MFADeleteStatus),
/* harmony export */   "MetadataDirective": () => (/* binding */ MetadataDirective),
/* harmony export */   "MetricsAndOperatorFilterSensitiveLog": () => (/* binding */ MetricsAndOperatorFilterSensitiveLog),
/* harmony export */   "MetricsConfigurationFilterSensitiveLog": () => (/* binding */ MetricsConfigurationFilterSensitiveLog),
/* harmony export */   "MetricsFilter": () => (/* binding */ MetricsFilter),
/* harmony export */   "MetricsFilterFilterSensitiveLog": () => (/* binding */ MetricsFilterFilterSensitiveLog),
/* harmony export */   "MetricsFilterSensitiveLog": () => (/* binding */ MetricsFilterSensitiveLog),
/* harmony export */   "MetricsStatus": () => (/* binding */ MetricsStatus),
/* harmony export */   "MultipartUploadFilterSensitiveLog": () => (/* binding */ MultipartUploadFilterSensitiveLog),
/* harmony export */   "NoSuchBucket": () => (/* binding */ NoSuchBucket),
/* harmony export */   "NoSuchKey": () => (/* binding */ NoSuchKey),
/* harmony export */   "NoSuchUpload": () => (/* binding */ NoSuchUpload),
/* harmony export */   "NoncurrentVersionExpirationFilterSensitiveLog": () => (/* binding */ NoncurrentVersionExpirationFilterSensitiveLog),
/* harmony export */   "NoncurrentVersionTransitionFilterSensitiveLog": () => (/* binding */ NoncurrentVersionTransitionFilterSensitiveLog),
/* harmony export */   "NotFound": () => (/* binding */ NotFound),
/* harmony export */   "NotificationConfigurationFilterFilterSensitiveLog": () => (/* binding */ NotificationConfigurationFilterFilterSensitiveLog),
/* harmony export */   "NotificationConfigurationFilterSensitiveLog": () => (/* binding */ NotificationConfigurationFilterSensitiveLog),
/* harmony export */   "ObjectAttributes": () => (/* binding */ ObjectAttributes),
/* harmony export */   "ObjectCannedACL": () => (/* binding */ ObjectCannedACL),
/* harmony export */   "ObjectIdentifierFilterSensitiveLog": () => (/* binding */ ObjectIdentifierFilterSensitiveLog),
/* harmony export */   "ObjectLockConfigurationFilterSensitiveLog": () => (/* binding */ ObjectLockConfigurationFilterSensitiveLog),
/* harmony export */   "ObjectLockEnabled": () => (/* binding */ ObjectLockEnabled),
/* harmony export */   "ObjectLockLegalHoldFilterSensitiveLog": () => (/* binding */ ObjectLockLegalHoldFilterSensitiveLog),
/* harmony export */   "ObjectLockLegalHoldStatus": () => (/* binding */ ObjectLockLegalHoldStatus),
/* harmony export */   "ObjectLockMode": () => (/* binding */ ObjectLockMode),
/* harmony export */   "ObjectLockRetentionFilterSensitiveLog": () => (/* binding */ ObjectLockRetentionFilterSensitiveLog),
/* harmony export */   "ObjectLockRetentionMode": () => (/* binding */ ObjectLockRetentionMode),
/* harmony export */   "ObjectLockRuleFilterSensitiveLog": () => (/* binding */ ObjectLockRuleFilterSensitiveLog),
/* harmony export */   "ObjectNotInActiveTierError": () => (/* binding */ ObjectNotInActiveTierError),
/* harmony export */   "ObjectOwnership": () => (/* binding */ ObjectOwnership),
/* harmony export */   "ObjectPartFilterSensitiveLog": () => (/* binding */ ObjectPartFilterSensitiveLog),
/* harmony export */   "ObjectStorageClass": () => (/* binding */ ObjectStorageClass),
/* harmony export */   "ObjectVersionFilterSensitiveLog": () => (/* binding */ ObjectVersionFilterSensitiveLog),
/* harmony export */   "ObjectVersionStorageClass": () => (/* binding */ ObjectVersionStorageClass),
/* harmony export */   "OwnerFilterSensitiveLog": () => (/* binding */ OwnerFilterSensitiveLog),
/* harmony export */   "OwnerOverride": () => (/* binding */ OwnerOverride),
/* harmony export */   "OwnershipControlsFilterSensitiveLog": () => (/* binding */ OwnershipControlsFilterSensitiveLog),
/* harmony export */   "OwnershipControlsRuleFilterSensitiveLog": () => (/* binding */ OwnershipControlsRuleFilterSensitiveLog),
/* harmony export */   "PartFilterSensitiveLog": () => (/* binding */ PartFilterSensitiveLog),
/* harmony export */   "Payer": () => (/* binding */ Payer),
/* harmony export */   "Permission": () => (/* binding */ Permission),
/* harmony export */   "PolicyStatusFilterSensitiveLog": () => (/* binding */ PolicyStatusFilterSensitiveLog),
/* harmony export */   "Protocol": () => (/* binding */ Protocol),
/* harmony export */   "PublicAccessBlockConfigurationFilterSensitiveLog": () => (/* binding */ PublicAccessBlockConfigurationFilterSensitiveLog),
/* harmony export */   "PutBucketAccelerateConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketAccelerateConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketAclRequestFilterSensitiveLog": () => (/* binding */ PutBucketAclRequestFilterSensitiveLog),
/* harmony export */   "PutBucketAnalyticsConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketAnalyticsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketCorsRequestFilterSensitiveLog": () => (/* binding */ PutBucketCorsRequestFilterSensitiveLog),
/* harmony export */   "PutBucketEncryptionRequestFilterSensitiveLog": () => (/* binding */ PutBucketEncryptionRequestFilterSensitiveLog),
/* harmony export */   "PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketInventoryConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketInventoryConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketLifecycleConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketLifecycleConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketLoggingRequestFilterSensitiveLog": () => (/* binding */ PutBucketLoggingRequestFilterSensitiveLog),
/* harmony export */   "PutBucketMetricsConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketMetricsConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketNotificationConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutBucketNotificationConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketOwnershipControlsRequestFilterSensitiveLog": () => (/* binding */ PutBucketOwnershipControlsRequestFilterSensitiveLog),
/* harmony export */   "PutBucketPolicyRequestFilterSensitiveLog": () => (/* binding */ PutBucketPolicyRequestFilterSensitiveLog),
/* harmony export */   "PutBucketReplicationRequestFilterSensitiveLog": () => (/* binding */ PutBucketReplicationRequestFilterSensitiveLog),
/* harmony export */   "PutBucketRequestPaymentRequestFilterSensitiveLog": () => (/* binding */ PutBucketRequestPaymentRequestFilterSensitiveLog),
/* harmony export */   "PutBucketTaggingRequestFilterSensitiveLog": () => (/* binding */ PutBucketTaggingRequestFilterSensitiveLog),
/* harmony export */   "PutBucketVersioningRequestFilterSensitiveLog": () => (/* binding */ PutBucketVersioningRequestFilterSensitiveLog),
/* harmony export */   "PutBucketWebsiteRequestFilterSensitiveLog": () => (/* binding */ PutBucketWebsiteRequestFilterSensitiveLog),
/* harmony export */   "PutObjectAclOutputFilterSensitiveLog": () => (/* binding */ PutObjectAclOutputFilterSensitiveLog),
/* harmony export */   "PutObjectAclRequestFilterSensitiveLog": () => (/* binding */ PutObjectAclRequestFilterSensitiveLog),
/* harmony export */   "PutObjectLegalHoldOutputFilterSensitiveLog": () => (/* binding */ PutObjectLegalHoldOutputFilterSensitiveLog),
/* harmony export */   "PutObjectLegalHoldRequestFilterSensitiveLog": () => (/* binding */ PutObjectLegalHoldRequestFilterSensitiveLog),
/* harmony export */   "PutObjectLockConfigurationOutputFilterSensitiveLog": () => (/* binding */ PutObjectLockConfigurationOutputFilterSensitiveLog),
/* harmony export */   "PutObjectLockConfigurationRequestFilterSensitiveLog": () => (/* binding */ PutObjectLockConfigurationRequestFilterSensitiveLog),
/* harmony export */   "PutObjectOutputFilterSensitiveLog": () => (/* binding */ PutObjectOutputFilterSensitiveLog),
/* harmony export */   "PutObjectRequestFilterSensitiveLog": () => (/* binding */ PutObjectRequestFilterSensitiveLog),
/* harmony export */   "QueueConfigurationFilterSensitiveLog": () => (/* binding */ QueueConfigurationFilterSensitiveLog),
/* harmony export */   "RedirectAllRequestsToFilterSensitiveLog": () => (/* binding */ RedirectAllRequestsToFilterSensitiveLog),
/* harmony export */   "RedirectFilterSensitiveLog": () => (/* binding */ RedirectFilterSensitiveLog),
/* harmony export */   "ReplicaModificationsFilterSensitiveLog": () => (/* binding */ ReplicaModificationsFilterSensitiveLog),
/* harmony export */   "ReplicaModificationsStatus": () => (/* binding */ ReplicaModificationsStatus),
/* harmony export */   "ReplicationConfigurationFilterSensitiveLog": () => (/* binding */ ReplicationConfigurationFilterSensitiveLog),
/* harmony export */   "ReplicationRuleAndOperatorFilterSensitiveLog": () => (/* binding */ ReplicationRuleAndOperatorFilterSensitiveLog),
/* harmony export */   "ReplicationRuleFilter": () => (/* binding */ ReplicationRuleFilter),
/* harmony export */   "ReplicationRuleFilterFilterSensitiveLog": () => (/* binding */ ReplicationRuleFilterFilterSensitiveLog),
/* harmony export */   "ReplicationRuleFilterSensitiveLog": () => (/* binding */ ReplicationRuleFilterSensitiveLog),
/* harmony export */   "ReplicationRuleStatus": () => (/* binding */ ReplicationRuleStatus),
/* harmony export */   "ReplicationStatus": () => (/* binding */ ReplicationStatus),
/* harmony export */   "ReplicationTimeFilterSensitiveLog": () => (/* binding */ ReplicationTimeFilterSensitiveLog),
/* harmony export */   "ReplicationTimeStatus": () => (/* binding */ ReplicationTimeStatus),
/* harmony export */   "ReplicationTimeValueFilterSensitiveLog": () => (/* binding */ ReplicationTimeValueFilterSensitiveLog),
/* harmony export */   "RequestCharged": () => (/* binding */ RequestCharged),
/* harmony export */   "RequestPayer": () => (/* binding */ RequestPayer),
/* harmony export */   "RequestPaymentConfigurationFilterSensitiveLog": () => (/* binding */ RequestPaymentConfigurationFilterSensitiveLog),
/* harmony export */   "RoutingRuleFilterSensitiveLog": () => (/* binding */ RoutingRuleFilterSensitiveLog),
/* harmony export */   "S3KeyFilterFilterSensitiveLog": () => (/* binding */ S3KeyFilterFilterSensitiveLog),
/* harmony export */   "SSEKMSFilterSensitiveLog": () => (/* binding */ SSEKMSFilterSensitiveLog),
/* harmony export */   "SSES3FilterSensitiveLog": () => (/* binding */ SSES3FilterSensitiveLog),
/* harmony export */   "ServerSideEncryption": () => (/* binding */ ServerSideEncryption),
/* harmony export */   "ServerSideEncryptionByDefaultFilterSensitiveLog": () => (/* binding */ ServerSideEncryptionByDefaultFilterSensitiveLog),
/* harmony export */   "ServerSideEncryptionConfigurationFilterSensitiveLog": () => (/* binding */ ServerSideEncryptionConfigurationFilterSensitiveLog),
/* harmony export */   "ServerSideEncryptionRuleFilterSensitiveLog": () => (/* binding */ ServerSideEncryptionRuleFilterSensitiveLog),
/* harmony export */   "SourceSelectionCriteriaFilterSensitiveLog": () => (/* binding */ SourceSelectionCriteriaFilterSensitiveLog),
/* harmony export */   "SseKmsEncryptedObjectsFilterSensitiveLog": () => (/* binding */ SseKmsEncryptedObjectsFilterSensitiveLog),
/* harmony export */   "SseKmsEncryptedObjectsStatus": () => (/* binding */ SseKmsEncryptedObjectsStatus),
/* harmony export */   "StorageClass": () => (/* binding */ StorageClass),
/* harmony export */   "StorageClassAnalysisDataExportFilterSensitiveLog": () => (/* binding */ StorageClassAnalysisDataExportFilterSensitiveLog),
/* harmony export */   "StorageClassAnalysisFilterSensitiveLog": () => (/* binding */ StorageClassAnalysisFilterSensitiveLog),
/* harmony export */   "StorageClassAnalysisSchemaVersion": () => (/* binding */ StorageClassAnalysisSchemaVersion),
/* harmony export */   "TagFilterSensitiveLog": () => (/* binding */ TagFilterSensitiveLog),
/* harmony export */   "TaggingDirective": () => (/* binding */ TaggingDirective),
/* harmony export */   "TaggingFilterSensitiveLog": () => (/* binding */ TaggingFilterSensitiveLog),
/* harmony export */   "TargetGrantFilterSensitiveLog": () => (/* binding */ TargetGrantFilterSensitiveLog),
/* harmony export */   "TieringFilterSensitiveLog": () => (/* binding */ TieringFilterSensitiveLog),
/* harmony export */   "TopicConfigurationFilterSensitiveLog": () => (/* binding */ TopicConfigurationFilterSensitiveLog),
/* harmony export */   "TransitionFilterSensitiveLog": () => (/* binding */ TransitionFilterSensitiveLog),
/* harmony export */   "TransitionStorageClass": () => (/* binding */ TransitionStorageClass),
/* harmony export */   "Type": () => (/* binding */ Type),
/* harmony export */   "VersioningConfigurationFilterSensitiveLog": () => (/* binding */ VersioningConfigurationFilterSensitiveLog),
/* harmony export */   "WebsiteConfigurationFilterSensitiveLog": () => (/* binding */ WebsiteConfigurationFilterSensitiveLog),
/* harmony export */   "_ErrorFilterSensitiveLog": () => (/* binding */ _ErrorFilterSensitiveLog),
/* harmony export */   "_ObjectFilterSensitiveLog": () => (/* binding */ _ObjectFilterSensitiveLog)
/* harmony export */ });
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./S3ServiceException */ "./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js");


var RequestCharged;
(function (RequestCharged) {
    RequestCharged["requester"] = "requester";
})(RequestCharged || (RequestCharged = {}));
var RequestPayer;
(function (RequestPayer) {
    RequestPayer["requester"] = "requester";
})(RequestPayer || (RequestPayer = {}));
class NoSuchUpload extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchUpload",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchUpload";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchUpload.prototype);
    }
}
var BucketAccelerateStatus;
(function (BucketAccelerateStatus) {
    BucketAccelerateStatus["Enabled"] = "Enabled";
    BucketAccelerateStatus["Suspended"] = "Suspended";
})(BucketAccelerateStatus || (BucketAccelerateStatus = {}));
var Type;
(function (Type) {
    Type["AmazonCustomerByEmail"] = "AmazonCustomerByEmail";
    Type["CanonicalUser"] = "CanonicalUser";
    Type["Group"] = "Group";
})(Type || (Type = {}));
var Permission;
(function (Permission) {
    Permission["FULL_CONTROL"] = "FULL_CONTROL";
    Permission["READ"] = "READ";
    Permission["READ_ACP"] = "READ_ACP";
    Permission["WRITE"] = "WRITE";
    Permission["WRITE_ACP"] = "WRITE_ACP";
})(Permission || (Permission = {}));
var OwnerOverride;
(function (OwnerOverride) {
    OwnerOverride["Destination"] = "Destination";
})(OwnerOverride || (OwnerOverride = {}));
var ServerSideEncryption;
(function (ServerSideEncryption) {
    ServerSideEncryption["AES256"] = "AES256";
    ServerSideEncryption["aws_kms"] = "aws:kms";
})(ServerSideEncryption || (ServerSideEncryption = {}));
var ObjectCannedACL;
(function (ObjectCannedACL) {
    ObjectCannedACL["authenticated_read"] = "authenticated-read";
    ObjectCannedACL["aws_exec_read"] = "aws-exec-read";
    ObjectCannedACL["bucket_owner_full_control"] = "bucket-owner-full-control";
    ObjectCannedACL["bucket_owner_read"] = "bucket-owner-read";
    ObjectCannedACL["private"] = "private";
    ObjectCannedACL["public_read"] = "public-read";
    ObjectCannedACL["public_read_write"] = "public-read-write";
})(ObjectCannedACL || (ObjectCannedACL = {}));
var ChecksumAlgorithm;
(function (ChecksumAlgorithm) {
    ChecksumAlgorithm["CRC32"] = "CRC32";
    ChecksumAlgorithm["CRC32C"] = "CRC32C";
    ChecksumAlgorithm["SHA1"] = "SHA1";
    ChecksumAlgorithm["SHA256"] = "SHA256";
})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
var MetadataDirective;
(function (MetadataDirective) {
    MetadataDirective["COPY"] = "COPY";
    MetadataDirective["REPLACE"] = "REPLACE";
})(MetadataDirective || (MetadataDirective = {}));
var ObjectLockLegalHoldStatus;
(function (ObjectLockLegalHoldStatus) {
    ObjectLockLegalHoldStatus["OFF"] = "OFF";
    ObjectLockLegalHoldStatus["ON"] = "ON";
})(ObjectLockLegalHoldStatus || (ObjectLockLegalHoldStatus = {}));
var ObjectLockMode;
(function (ObjectLockMode) {
    ObjectLockMode["COMPLIANCE"] = "COMPLIANCE";
    ObjectLockMode["GOVERNANCE"] = "GOVERNANCE";
})(ObjectLockMode || (ObjectLockMode = {}));
var StorageClass;
(function (StorageClass) {
    StorageClass["DEEP_ARCHIVE"] = "DEEP_ARCHIVE";
    StorageClass["GLACIER"] = "GLACIER";
    StorageClass["GLACIER_IR"] = "GLACIER_IR";
    StorageClass["INTELLIGENT_TIERING"] = "INTELLIGENT_TIERING";
    StorageClass["ONEZONE_IA"] = "ONEZONE_IA";
    StorageClass["OUTPOSTS"] = "OUTPOSTS";
    StorageClass["REDUCED_REDUNDANCY"] = "REDUCED_REDUNDANCY";
    StorageClass["STANDARD"] = "STANDARD";
    StorageClass["STANDARD_IA"] = "STANDARD_IA";
})(StorageClass || (StorageClass = {}));
var TaggingDirective;
(function (TaggingDirective) {
    TaggingDirective["COPY"] = "COPY";
    TaggingDirective["REPLACE"] = "REPLACE";
})(TaggingDirective || (TaggingDirective = {}));
class ObjectNotInActiveTierError extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "ObjectNotInActiveTierError",
            $fault: "client",
            ...opts,
        });
        this.name = "ObjectNotInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectNotInActiveTierError.prototype);
    }
}
class BucketAlreadyExists extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "BucketAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyExists.prototype);
    }
}
class BucketAlreadyOwnedByYou extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "BucketAlreadyOwnedByYou",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);
    }
}
var BucketCannedACL;
(function (BucketCannedACL) {
    BucketCannedACL["authenticated_read"] = "authenticated-read";
    BucketCannedACL["private"] = "private";
    BucketCannedACL["public_read"] = "public-read";
    BucketCannedACL["public_read_write"] = "public-read-write";
})(BucketCannedACL || (BucketCannedACL = {}));
var BucketLocationConstraint;
(function (BucketLocationConstraint) {
    BucketLocationConstraint["EU"] = "EU";
    BucketLocationConstraint["af_south_1"] = "af-south-1";
    BucketLocationConstraint["ap_east_1"] = "ap-east-1";
    BucketLocationConstraint["ap_northeast_1"] = "ap-northeast-1";
    BucketLocationConstraint["ap_northeast_2"] = "ap-northeast-2";
    BucketLocationConstraint["ap_northeast_3"] = "ap-northeast-3";
    BucketLocationConstraint["ap_south_1"] = "ap-south-1";
    BucketLocationConstraint["ap_southeast_1"] = "ap-southeast-1";
    BucketLocationConstraint["ap_southeast_2"] = "ap-southeast-2";
    BucketLocationConstraint["ap_southeast_3"] = "ap-southeast-3";
    BucketLocationConstraint["ca_central_1"] = "ca-central-1";
    BucketLocationConstraint["cn_north_1"] = "cn-north-1";
    BucketLocationConstraint["cn_northwest_1"] = "cn-northwest-1";
    BucketLocationConstraint["eu_central_1"] = "eu-central-1";
    BucketLocationConstraint["eu_north_1"] = "eu-north-1";
    BucketLocationConstraint["eu_south_1"] = "eu-south-1";
    BucketLocationConstraint["eu_west_1"] = "eu-west-1";
    BucketLocationConstraint["eu_west_2"] = "eu-west-2";
    BucketLocationConstraint["eu_west_3"] = "eu-west-3";
    BucketLocationConstraint["me_south_1"] = "me-south-1";
    BucketLocationConstraint["sa_east_1"] = "sa-east-1";
    BucketLocationConstraint["us_east_2"] = "us-east-2";
    BucketLocationConstraint["us_gov_east_1"] = "us-gov-east-1";
    BucketLocationConstraint["us_gov_west_1"] = "us-gov-west-1";
    BucketLocationConstraint["us_west_1"] = "us-west-1";
    BucketLocationConstraint["us_west_2"] = "us-west-2";
})(BucketLocationConstraint || (BucketLocationConstraint = {}));
var ObjectOwnership;
(function (ObjectOwnership) {
    ObjectOwnership["BucketOwnerEnforced"] = "BucketOwnerEnforced";
    ObjectOwnership["BucketOwnerPreferred"] = "BucketOwnerPreferred";
    ObjectOwnership["ObjectWriter"] = "ObjectWriter";
})(ObjectOwnership || (ObjectOwnership = {}));
var AnalyticsFilter;
(function (AnalyticsFilter) {
    AnalyticsFilter.visit = (value, visitor) => {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnalyticsFilter || (AnalyticsFilter = {}));
var AnalyticsS3ExportFileFormat;
(function (AnalyticsS3ExportFileFormat) {
    AnalyticsS3ExportFileFormat["CSV"] = "CSV";
})(AnalyticsS3ExportFileFormat || (AnalyticsS3ExportFileFormat = {}));
var StorageClassAnalysisSchemaVersion;
(function (StorageClassAnalysisSchemaVersion) {
    StorageClassAnalysisSchemaVersion["V_1"] = "V_1";
})(StorageClassAnalysisSchemaVersion || (StorageClassAnalysisSchemaVersion = {}));
var IntelligentTieringStatus;
(function (IntelligentTieringStatus) {
    IntelligentTieringStatus["Disabled"] = "Disabled";
    IntelligentTieringStatus["Enabled"] = "Enabled";
})(IntelligentTieringStatus || (IntelligentTieringStatus = {}));
var IntelligentTieringAccessTier;
(function (IntelligentTieringAccessTier) {
    IntelligentTieringAccessTier["ARCHIVE_ACCESS"] = "ARCHIVE_ACCESS";
    IntelligentTieringAccessTier["DEEP_ARCHIVE_ACCESS"] = "DEEP_ARCHIVE_ACCESS";
})(IntelligentTieringAccessTier || (IntelligentTieringAccessTier = {}));
var InventoryFormat;
(function (InventoryFormat) {
    InventoryFormat["CSV"] = "CSV";
    InventoryFormat["ORC"] = "ORC";
    InventoryFormat["Parquet"] = "Parquet";
})(InventoryFormat || (InventoryFormat = {}));
var InventoryIncludedObjectVersions;
(function (InventoryIncludedObjectVersions) {
    InventoryIncludedObjectVersions["All"] = "All";
    InventoryIncludedObjectVersions["Current"] = "Current";
})(InventoryIncludedObjectVersions || (InventoryIncludedObjectVersions = {}));
var InventoryOptionalField;
(function (InventoryOptionalField) {
    InventoryOptionalField["BucketKeyStatus"] = "BucketKeyStatus";
    InventoryOptionalField["ChecksumAlgorithm"] = "ChecksumAlgorithm";
    InventoryOptionalField["ETag"] = "ETag";
    InventoryOptionalField["EncryptionStatus"] = "EncryptionStatus";
    InventoryOptionalField["IntelligentTieringAccessTier"] = "IntelligentTieringAccessTier";
    InventoryOptionalField["IsMultipartUploaded"] = "IsMultipartUploaded";
    InventoryOptionalField["LastModifiedDate"] = "LastModifiedDate";
    InventoryOptionalField["ObjectLockLegalHoldStatus"] = "ObjectLockLegalHoldStatus";
    InventoryOptionalField["ObjectLockMode"] = "ObjectLockMode";
    InventoryOptionalField["ObjectLockRetainUntilDate"] = "ObjectLockRetainUntilDate";
    InventoryOptionalField["ReplicationStatus"] = "ReplicationStatus";
    InventoryOptionalField["Size"] = "Size";
    InventoryOptionalField["StorageClass"] = "StorageClass";
})(InventoryOptionalField || (InventoryOptionalField = {}));
var InventoryFrequency;
(function (InventoryFrequency) {
    InventoryFrequency["Daily"] = "Daily";
    InventoryFrequency["Weekly"] = "Weekly";
})(InventoryFrequency || (InventoryFrequency = {}));
var LifecycleRuleFilter;
(function (LifecycleRuleFilter) {
    LifecycleRuleFilter.visit = (value, visitor) => {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.ObjectSizeGreaterThan !== undefined)
            return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
        if (value.ObjectSizeLessThan !== undefined)
            return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
var TransitionStorageClass;
(function (TransitionStorageClass) {
    TransitionStorageClass["DEEP_ARCHIVE"] = "DEEP_ARCHIVE";
    TransitionStorageClass["GLACIER"] = "GLACIER";
    TransitionStorageClass["GLACIER_IR"] = "GLACIER_IR";
    TransitionStorageClass["INTELLIGENT_TIERING"] = "INTELLIGENT_TIERING";
    TransitionStorageClass["ONEZONE_IA"] = "ONEZONE_IA";
    TransitionStorageClass["STANDARD_IA"] = "STANDARD_IA";
})(TransitionStorageClass || (TransitionStorageClass = {}));
var ExpirationStatus;
(function (ExpirationStatus) {
    ExpirationStatus["Disabled"] = "Disabled";
    ExpirationStatus["Enabled"] = "Enabled";
})(ExpirationStatus || (ExpirationStatus = {}));
var BucketLogsPermission;
(function (BucketLogsPermission) {
    BucketLogsPermission["FULL_CONTROL"] = "FULL_CONTROL";
    BucketLogsPermission["READ"] = "READ";
    BucketLogsPermission["WRITE"] = "WRITE";
})(BucketLogsPermission || (BucketLogsPermission = {}));
var MetricsFilter;
(function (MetricsFilter) {
    MetricsFilter.visit = (value, visitor) => {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== undefined)
            return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(MetricsFilter || (MetricsFilter = {}));
var FilterRuleName;
(function (FilterRuleName) {
    FilterRuleName["prefix"] = "prefix";
    FilterRuleName["suffix"] = "suffix";
})(FilterRuleName || (FilterRuleName = {}));
var DeleteMarkerReplicationStatus;
(function (DeleteMarkerReplicationStatus) {
    DeleteMarkerReplicationStatus["Disabled"] = "Disabled";
    DeleteMarkerReplicationStatus["Enabled"] = "Enabled";
})(DeleteMarkerReplicationStatus || (DeleteMarkerReplicationStatus = {}));
var MetricsStatus;
(function (MetricsStatus) {
    MetricsStatus["Disabled"] = "Disabled";
    MetricsStatus["Enabled"] = "Enabled";
})(MetricsStatus || (MetricsStatus = {}));
var ReplicationTimeStatus;
(function (ReplicationTimeStatus) {
    ReplicationTimeStatus["Disabled"] = "Disabled";
    ReplicationTimeStatus["Enabled"] = "Enabled";
})(ReplicationTimeStatus || (ReplicationTimeStatus = {}));
var ExistingObjectReplicationStatus;
(function (ExistingObjectReplicationStatus) {
    ExistingObjectReplicationStatus["Disabled"] = "Disabled";
    ExistingObjectReplicationStatus["Enabled"] = "Enabled";
})(ExistingObjectReplicationStatus || (ExistingObjectReplicationStatus = {}));
var ReplicationRuleFilter;
(function (ReplicationRuleFilter) {
    ReplicationRuleFilter.visit = (value, visitor) => {
        if (value.Prefix !== undefined)
            return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined)
            return visitor.Tag(value.Tag);
        if (value.And !== undefined)
            return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
var ReplicaModificationsStatus;
(function (ReplicaModificationsStatus) {
    ReplicaModificationsStatus["Disabled"] = "Disabled";
    ReplicaModificationsStatus["Enabled"] = "Enabled";
})(ReplicaModificationsStatus || (ReplicaModificationsStatus = {}));
var SseKmsEncryptedObjectsStatus;
(function (SseKmsEncryptedObjectsStatus) {
    SseKmsEncryptedObjectsStatus["Disabled"] = "Disabled";
    SseKmsEncryptedObjectsStatus["Enabled"] = "Enabled";
})(SseKmsEncryptedObjectsStatus || (SseKmsEncryptedObjectsStatus = {}));
var ReplicationRuleStatus;
(function (ReplicationRuleStatus) {
    ReplicationRuleStatus["Disabled"] = "Disabled";
    ReplicationRuleStatus["Enabled"] = "Enabled";
})(ReplicationRuleStatus || (ReplicationRuleStatus = {}));
var Payer;
(function (Payer) {
    Payer["BucketOwner"] = "BucketOwner";
    Payer["Requester"] = "Requester";
})(Payer || (Payer = {}));
var MFADeleteStatus;
(function (MFADeleteStatus) {
    MFADeleteStatus["Disabled"] = "Disabled";
    MFADeleteStatus["Enabled"] = "Enabled";
})(MFADeleteStatus || (MFADeleteStatus = {}));
var BucketVersioningStatus;
(function (BucketVersioningStatus) {
    BucketVersioningStatus["Enabled"] = "Enabled";
    BucketVersioningStatus["Suspended"] = "Suspended";
})(BucketVersioningStatus || (BucketVersioningStatus = {}));
var Protocol;
(function (Protocol) {
    Protocol["http"] = "http";
    Protocol["https"] = "https";
})(Protocol || (Protocol = {}));
var ReplicationStatus;
(function (ReplicationStatus) {
    ReplicationStatus["COMPLETE"] = "COMPLETE";
    ReplicationStatus["FAILED"] = "FAILED";
    ReplicationStatus["PENDING"] = "PENDING";
    ReplicationStatus["REPLICA"] = "REPLICA";
})(ReplicationStatus || (ReplicationStatus = {}));
var ChecksumMode;
(function (ChecksumMode) {
    ChecksumMode["ENABLED"] = "ENABLED";
})(ChecksumMode || (ChecksumMode = {}));
class InvalidObjectState extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "InvalidObjectState",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidObjectState";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
    }
}
class NoSuchKey extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchKey",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchKey.prototype);
    }
}
var ObjectAttributes;
(function (ObjectAttributes) {
    ObjectAttributes["CHECKSUM"] = "Checksum";
    ObjectAttributes["ETAG"] = "ETag";
    ObjectAttributes["OBJECT_PARTS"] = "ObjectParts";
    ObjectAttributes["OBJECT_SIZE"] = "ObjectSize";
    ObjectAttributes["STORAGE_CLASS"] = "StorageClass";
})(ObjectAttributes || (ObjectAttributes = {}));
var ObjectLockEnabled;
(function (ObjectLockEnabled) {
    ObjectLockEnabled["Enabled"] = "Enabled";
})(ObjectLockEnabled || (ObjectLockEnabled = {}));
var ObjectLockRetentionMode;
(function (ObjectLockRetentionMode) {
    ObjectLockRetentionMode["COMPLIANCE"] = "COMPLIANCE";
    ObjectLockRetentionMode["GOVERNANCE"] = "GOVERNANCE";
})(ObjectLockRetentionMode || (ObjectLockRetentionMode = {}));
class NotFound extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "NotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFound.prototype);
    }
}
var ArchiveStatus;
(function (ArchiveStatus) {
    ArchiveStatus["ARCHIVE_ACCESS"] = "ARCHIVE_ACCESS";
    ArchiveStatus["DEEP_ARCHIVE_ACCESS"] = "DEEP_ARCHIVE_ACCESS";
})(ArchiveStatus || (ArchiveStatus = {}));
var EncodingType;
(function (EncodingType) {
    EncodingType["url"] = "url";
})(EncodingType || (EncodingType = {}));
var ObjectStorageClass;
(function (ObjectStorageClass) {
    ObjectStorageClass["DEEP_ARCHIVE"] = "DEEP_ARCHIVE";
    ObjectStorageClass["GLACIER"] = "GLACIER";
    ObjectStorageClass["GLACIER_IR"] = "GLACIER_IR";
    ObjectStorageClass["INTELLIGENT_TIERING"] = "INTELLIGENT_TIERING";
    ObjectStorageClass["ONEZONE_IA"] = "ONEZONE_IA";
    ObjectStorageClass["OUTPOSTS"] = "OUTPOSTS";
    ObjectStorageClass["REDUCED_REDUNDANCY"] = "REDUCED_REDUNDANCY";
    ObjectStorageClass["STANDARD"] = "STANDARD";
    ObjectStorageClass["STANDARD_IA"] = "STANDARD_IA";
})(ObjectStorageClass || (ObjectStorageClass = {}));
class NoSuchBucket extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "NoSuchBucket",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchBucket";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchBucket.prototype);
    }
}
var ObjectVersionStorageClass;
(function (ObjectVersionStorageClass) {
    ObjectVersionStorageClass["STANDARD"] = "STANDARD";
})(ObjectVersionStorageClass || (ObjectVersionStorageClass = {}));
var MFADelete;
(function (MFADelete) {
    MFADelete["Disabled"] = "Disabled";
    MFADelete["Enabled"] = "Enabled";
})(MFADelete || (MFADelete = {}));
const AbortIncompleteMultipartUploadFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AbortMultipartUploadOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AbortMultipartUploadRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AccelerateConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GranteeFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GrantFilterSensitiveLog = (obj) => ({
    ...obj,
});
const OwnerFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AccessControlPolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AccessControlTranslationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CompleteMultipartUploadOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const CompletedPartFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CompletedMultipartUploadFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CompleteMultipartUploadRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const CopyObjectResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CopyObjectOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const CopyObjectRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const CreateBucketOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CreateBucketConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CreateBucketRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CreateMultipartUploadOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const CreateMultipartUploadRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const DeleteBucketRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketCorsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketLifecycleRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketPolicyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketReplicationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketTaggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteBucketWebsiteRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteObjectOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteObjectRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeletedObjectFilterSensitiveLog = (obj) => ({
    ...obj,
});
const _ErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteObjectsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ObjectIdentifierFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteObjectsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteObjectTaggingOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteObjectTaggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeletePublicAccessBlockRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketAccelerateConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketAccelerateConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketAclOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketAclRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TagFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AnalyticsAndOperatorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AnalyticsFilterFilterSensitiveLog = (obj) => {
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.And !== undefined)
        return { And: AnalyticsAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const AnalyticsS3BucketDestinationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AnalyticsExportDestinationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const StorageClassAnalysisDataExportFilterSensitiveLog = (obj) => ({
    ...obj,
});
const StorageClassAnalysisFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AnalyticsConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filter && { Filter: AnalyticsFilterFilterSensitiveLog(obj.Filter) }),
});
const GetBucketAnalyticsConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AnalyticsConfiguration && {
        AnalyticsConfiguration: AnalyticsConfigurationFilterSensitiveLog(obj.AnalyticsConfiguration),
    }),
});
const GetBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CORSRuleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketCorsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketCorsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ServerSideEncryptionByDefaultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KMSMasterKeyID && { KMSMasterKeyID: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const ServerSideEncryptionRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault),
    }),
});
const ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }),
});
const GetBucketEncryptionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),
    }),
});
const GetBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IntelligentTieringAndOperatorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IntelligentTieringFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TieringFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IntelligentTieringConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SSEKMSFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyId && { KeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const SSES3FilterSensitiveLog = (obj) => ({
    ...obj,
});
const InventoryEncryptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }),
});
const InventoryS3BucketDestinationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }),
});
const InventoryDestinationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3BucketDestination && {
        S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination),
    }),
});
const InventoryFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const InventoryScheduleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const InventoryConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }),
});
const GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration),
    }),
});
const GetBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LifecycleExpirationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LifecycleRuleAndOperatorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LifecycleRuleFilterFilterSensitiveLog = (obj) => {
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.ObjectSizeGreaterThan !== undefined)
        return { ObjectSizeGreaterThan: obj.ObjectSizeGreaterThan };
    if (obj.ObjectSizeLessThan !== undefined)
        return { ObjectSizeLessThan: obj.ObjectSizeLessThan };
    if (obj.And !== undefined)
        return { And: LifecycleRuleAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const NoncurrentVersionExpirationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const NoncurrentVersionTransitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TransitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LifecycleRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filter && { Filter: LifecycleRuleFilterFilterSensitiveLog(obj.Filter) }),
});
const GetBucketLifecycleConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRuleFilterSensitiveLog(item)) }),
});
const GetBucketLifecycleConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketLocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketLocationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TargetGrantFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LoggingEnabledFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketLoggingOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketLoggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MetricsAndOperatorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MetricsFilterFilterSensitiveLog = (obj) => {
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.AccessPointArn !== undefined)
        return { AccessPointArn: obj.AccessPointArn };
    if (obj.And !== undefined)
        return { And: MetricsAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const MetricsConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filter && { Filter: MetricsFilterFilterSensitiveLog(obj.Filter) }),
});
const GetBucketMetricsConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MetricsConfiguration && {
        MetricsConfiguration: MetricsConfigurationFilterSensitiveLog(obj.MetricsConfiguration),
    }),
});
const GetBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketNotificationConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const EventBridgeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const FilterRuleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const S3KeyFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const NotificationConfigurationFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LambdaFunctionConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const QueueConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TopicConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const NotificationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const OwnershipControlsRuleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const OwnershipControlsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketOwnershipControlsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketPolicyOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketPolicyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PolicyStatusFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketPolicyStatusOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketPolicyStatusRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteMarkerReplicationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const EncryptionConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReplicationTimeValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MetricsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReplicationTimeFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DestinationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ExistingObjectReplicationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReplicationRuleAndOperatorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReplicationRuleFilterFilterSensitiveLog = (obj) => {
    if (obj.Prefix !== undefined)
        return { Prefix: obj.Prefix };
    if (obj.Tag !== undefined)
        return { Tag: TagFilterSensitiveLog(obj.Tag) };
    if (obj.And !== undefined)
        return { And: ReplicationRuleAndOperatorFilterSensitiveLog(obj.And) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const ReplicaModificationsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SseKmsEncryptedObjectsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SourceSelectionCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReplicationRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filter && { Filter: ReplicationRuleFilterFilterSensitiveLog(obj.Filter) }),
});
const ReplicationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Rules && { Rules: obj.Rules.map((item) => ReplicationRuleFilterSensitiveLog(item)) }),
});
const GetBucketReplicationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReplicationConfiguration && {
        ReplicationConfiguration: ReplicationConfigurationFilterSensitiveLog(obj.ReplicationConfiguration),
    }),
});
const GetBucketReplicationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketRequestPaymentOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketRequestPaymentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketTaggingOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketTaggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketVersioningOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketVersioningRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ErrorDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
});
const IndexDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RedirectAllRequestsToFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RedirectFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RoutingRuleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketWebsiteOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetBucketWebsiteRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const GetObjectRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const GetObjectAclOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectAclRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ChecksumFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ObjectPartFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectAttributesPartsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectAttributesOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const ObjectLockLegalHoldFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectLegalHoldOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectLegalHoldRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DefaultRetentionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ObjectLockRuleFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ObjectLockConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectLockConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectLockConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ObjectLockRetentionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectRetentionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectRetentionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectTaggingOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectTaggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectTorrentOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetObjectTorrentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PublicAccessBlockConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetPublicAccessBlockOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GetPublicAccessBlockRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const HeadBucketRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const HeadObjectOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const HeadObjectRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AnalyticsConfigurationList && {
        AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map((item) => AnalyticsConfigurationFilterSensitiveLog(item)),
    }),
});
const ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item)),
    }),
});
const ListBucketInventoryConfigurationsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListBucketMetricsConfigurationsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MetricsConfigurationList && {
        MetricsConfigurationList: obj.MetricsConfigurationList.map((item) => MetricsConfigurationFilterSensitiveLog(item)),
    }),
});
const ListBucketMetricsConfigurationsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const BucketFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListBucketsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CommonPrefixFilterSensitiveLog = (obj) => ({
    ...obj,
});
const InitiatorFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MultipartUploadFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListMultipartUploadsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListMultipartUploadsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const _ObjectFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListObjectsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListObjectsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListObjectsV2OutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListObjectsV2RequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const DeleteMarkerEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ObjectVersionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListObjectVersionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListObjectVersionsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PartFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListPartsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ListPartsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const PutBucketAccelerateConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketAclRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AnalyticsConfiguration && {
        AnalyticsConfiguration: AnalyticsConfigurationFilterSensitiveLog(obj.AnalyticsConfiguration),
    }),
});
const CORSConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketCorsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),
    }),
});
const PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration),
    }),
});
const BucketLifecycleConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRuleFilterSensitiveLog(item)) }),
});
const PutBucketLifecycleConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LifecycleConfiguration && {
        LifecycleConfiguration: BucketLifecycleConfigurationFilterSensitiveLog(obj.LifecycleConfiguration),
    }),
});
const BucketLoggingStatusFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketLoggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MetricsConfiguration && {
        MetricsConfiguration: MetricsConfigurationFilterSensitiveLog(obj.MetricsConfiguration),
    }),
});
const PutBucketNotificationConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketPolicyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketReplicationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReplicationConfiguration && {
        ReplicationConfiguration: ReplicationConfigurationFilterSensitiveLog(obj.ReplicationConfiguration),
    }),
});
const RequestPaymentConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketRequestPaymentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TaggingFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketTaggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const VersioningConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketVersioningRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const WebsiteConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutBucketWebsiteRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const PutObjectRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const PutObjectAclOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectAclRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectLegalHoldOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectLegalHoldRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectLockConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectLockConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSVInputFilterSensitiveLog": () => (/* binding */ CSVInputFilterSensitiveLog),
/* harmony export */   "CSVOutputFilterSensitiveLog": () => (/* binding */ CSVOutputFilterSensitiveLog),
/* harmony export */   "CompressionType": () => (/* binding */ CompressionType),
/* harmony export */   "ContinuationEventFilterSensitiveLog": () => (/* binding */ ContinuationEventFilterSensitiveLog),
/* harmony export */   "CopyPartResultFilterSensitiveLog": () => (/* binding */ CopyPartResultFilterSensitiveLog),
/* harmony export */   "EncryptionFilterSensitiveLog": () => (/* binding */ EncryptionFilterSensitiveLog),
/* harmony export */   "EndEventFilterSensitiveLog": () => (/* binding */ EndEventFilterSensitiveLog),
/* harmony export */   "ExpressionType": () => (/* binding */ ExpressionType),
/* harmony export */   "FileHeaderInfo": () => (/* binding */ FileHeaderInfo),
/* harmony export */   "GlacierJobParametersFilterSensitiveLog": () => (/* binding */ GlacierJobParametersFilterSensitiveLog),
/* harmony export */   "InputSerializationFilterSensitiveLog": () => (/* binding */ InputSerializationFilterSensitiveLog),
/* harmony export */   "JSONInputFilterSensitiveLog": () => (/* binding */ JSONInputFilterSensitiveLog),
/* harmony export */   "JSONOutputFilterSensitiveLog": () => (/* binding */ JSONOutputFilterSensitiveLog),
/* harmony export */   "JSONType": () => (/* binding */ JSONType),
/* harmony export */   "MetadataEntryFilterSensitiveLog": () => (/* binding */ MetadataEntryFilterSensitiveLog),
/* harmony export */   "ObjectAlreadyInActiveTierError": () => (/* binding */ ObjectAlreadyInActiveTierError),
/* harmony export */   "OutputLocationFilterSensitiveLog": () => (/* binding */ OutputLocationFilterSensitiveLog),
/* harmony export */   "OutputSerializationFilterSensitiveLog": () => (/* binding */ OutputSerializationFilterSensitiveLog),
/* harmony export */   "ParquetInputFilterSensitiveLog": () => (/* binding */ ParquetInputFilterSensitiveLog),
/* harmony export */   "ProgressEventFilterSensitiveLog": () => (/* binding */ ProgressEventFilterSensitiveLog),
/* harmony export */   "ProgressFilterSensitiveLog": () => (/* binding */ ProgressFilterSensitiveLog),
/* harmony export */   "PutObjectRetentionOutputFilterSensitiveLog": () => (/* binding */ PutObjectRetentionOutputFilterSensitiveLog),
/* harmony export */   "PutObjectRetentionRequestFilterSensitiveLog": () => (/* binding */ PutObjectRetentionRequestFilterSensitiveLog),
/* harmony export */   "PutObjectTaggingOutputFilterSensitiveLog": () => (/* binding */ PutObjectTaggingOutputFilterSensitiveLog),
/* harmony export */   "PutObjectTaggingRequestFilterSensitiveLog": () => (/* binding */ PutObjectTaggingRequestFilterSensitiveLog),
/* harmony export */   "PutPublicAccessBlockRequestFilterSensitiveLog": () => (/* binding */ PutPublicAccessBlockRequestFilterSensitiveLog),
/* harmony export */   "QuoteFields": () => (/* binding */ QuoteFields),
/* harmony export */   "RecordsEventFilterSensitiveLog": () => (/* binding */ RecordsEventFilterSensitiveLog),
/* harmony export */   "RequestProgressFilterSensitiveLog": () => (/* binding */ RequestProgressFilterSensitiveLog),
/* harmony export */   "RestoreObjectOutputFilterSensitiveLog": () => (/* binding */ RestoreObjectOutputFilterSensitiveLog),
/* harmony export */   "RestoreObjectRequestFilterSensitiveLog": () => (/* binding */ RestoreObjectRequestFilterSensitiveLog),
/* harmony export */   "RestoreRequestFilterSensitiveLog": () => (/* binding */ RestoreRequestFilterSensitiveLog),
/* harmony export */   "RestoreRequestType": () => (/* binding */ RestoreRequestType),
/* harmony export */   "S3LocationFilterSensitiveLog": () => (/* binding */ S3LocationFilterSensitiveLog),
/* harmony export */   "ScanRangeFilterSensitiveLog": () => (/* binding */ ScanRangeFilterSensitiveLog),
/* harmony export */   "SelectObjectContentEventStream": () => (/* binding */ SelectObjectContentEventStream),
/* harmony export */   "SelectObjectContentEventStreamFilterSensitiveLog": () => (/* binding */ SelectObjectContentEventStreamFilterSensitiveLog),
/* harmony export */   "SelectObjectContentOutputFilterSensitiveLog": () => (/* binding */ SelectObjectContentOutputFilterSensitiveLog),
/* harmony export */   "SelectObjectContentRequestFilterSensitiveLog": () => (/* binding */ SelectObjectContentRequestFilterSensitiveLog),
/* harmony export */   "SelectParametersFilterSensitiveLog": () => (/* binding */ SelectParametersFilterSensitiveLog),
/* harmony export */   "StatsEventFilterSensitiveLog": () => (/* binding */ StatsEventFilterSensitiveLog),
/* harmony export */   "StatsFilterSensitiveLog": () => (/* binding */ StatsFilterSensitiveLog),
/* harmony export */   "Tier": () => (/* binding */ Tier),
/* harmony export */   "UploadPartCopyOutputFilterSensitiveLog": () => (/* binding */ UploadPartCopyOutputFilterSensitiveLog),
/* harmony export */   "UploadPartCopyRequestFilterSensitiveLog": () => (/* binding */ UploadPartCopyRequestFilterSensitiveLog),
/* harmony export */   "UploadPartOutputFilterSensitiveLog": () => (/* binding */ UploadPartOutputFilterSensitiveLog),
/* harmony export */   "UploadPartRequestFilterSensitiveLog": () => (/* binding */ UploadPartRequestFilterSensitiveLog),
/* harmony export */   "WriteGetObjectResponseRequestFilterSensitiveLog": () => (/* binding */ WriteGetObjectResponseRequestFilterSensitiveLog)
/* harmony export */ });
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./S3ServiceException */ "./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js");


class ObjectAlreadyInActiveTierError extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {
    constructor(opts) {
        super({
            name: "ObjectAlreadyInActiveTierError",
            $fault: "client",
            ...opts,
        });
        this.name = "ObjectAlreadyInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectAlreadyInActiveTierError.prototype);
    }
}
var Tier;
(function (Tier) {
    Tier["Bulk"] = "Bulk";
    Tier["Expedited"] = "Expedited";
    Tier["Standard"] = "Standard";
})(Tier || (Tier = {}));
var ExpressionType;
(function (ExpressionType) {
    ExpressionType["SQL"] = "SQL";
})(ExpressionType || (ExpressionType = {}));
var CompressionType;
(function (CompressionType) {
    CompressionType["BZIP2"] = "BZIP2";
    CompressionType["GZIP"] = "GZIP";
    CompressionType["NONE"] = "NONE";
})(CompressionType || (CompressionType = {}));
var FileHeaderInfo;
(function (FileHeaderInfo) {
    FileHeaderInfo["IGNORE"] = "IGNORE";
    FileHeaderInfo["NONE"] = "NONE";
    FileHeaderInfo["USE"] = "USE";
})(FileHeaderInfo || (FileHeaderInfo = {}));
var JSONType;
(function (JSONType) {
    JSONType["DOCUMENT"] = "DOCUMENT";
    JSONType["LINES"] = "LINES";
})(JSONType || (JSONType = {}));
var QuoteFields;
(function (QuoteFields) {
    QuoteFields["ALWAYS"] = "ALWAYS";
    QuoteFields["ASNEEDED"] = "ASNEEDED";
})(QuoteFields || (QuoteFields = {}));
var RestoreRequestType;
(function (RestoreRequestType) {
    RestoreRequestType["SELECT"] = "SELECT";
})(RestoreRequestType || (RestoreRequestType = {}));
var SelectObjectContentEventStream;
(function (SelectObjectContentEventStream) {
    SelectObjectContentEventStream.visit = (value, visitor) => {
        if (value.Records !== undefined)
            return visitor.Records(value.Records);
        if (value.Stats !== undefined)
            return visitor.Stats(value.Stats);
        if (value.Progress !== undefined)
            return visitor.Progress(value.Progress);
        if (value.Cont !== undefined)
            return visitor.Cont(value.Cont);
        if (value.End !== undefined)
            return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
const PutObjectRetentionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectRetentionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectTaggingOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutObjectTaggingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PutPublicAccessBlockRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RestoreObjectOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GlacierJobParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
const EncryptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KMSKeyId && { KMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const MetadataEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
const S3LocationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }),
});
const OutputLocationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }),
});
const CSVInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const JSONInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ParquetInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const InputSerializationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CSVOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const JSONOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const OutputSerializationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SelectParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RestoreRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }),
});
const RestoreObjectRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }),
});
const ContinuationEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const EndEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ProgressFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ProgressEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RecordsEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const StatsFilterSensitiveLog = (obj) => ({
    ...obj,
});
const StatsEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SelectObjectContentEventStreamFilterSensitiveLog = (obj) => {
    if (obj.Records !== undefined)
        return { Records: RecordsEventFilterSensitiveLog(obj.Records) };
    if (obj.Stats !== undefined)
        return { Stats: StatsEventFilterSensitiveLog(obj.Stats) };
    if (obj.Progress !== undefined)
        return { Progress: ProgressEventFilterSensitiveLog(obj.Progress) };
    if (obj.Cont !== undefined)
        return { Cont: ContinuationEventFilterSensitiveLog(obj.Cont) };
    if (obj.End !== undefined)
        return { End: EndEventFilterSensitiveLog(obj.End) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const SelectObjectContentOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Payload && { Payload: "STREAMING_CONTENT" }),
});
const RequestProgressFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ScanRangeFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SelectObjectContentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const UploadPartOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const UploadPartRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const CopyPartResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UploadPartCopyOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const UploadPartCopyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
    ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});
const WriteGetObjectResponseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),
});


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paginateListObjectsV2": () => (/* binding */ paginateListObjectsV2)
/* harmony export */ });
/* harmony import */ var _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commands/ListObjectsV2Command */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js");
/* harmony import */ var _S3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../S3 */ "./node_modules/@aws-sdk/client-s3/dist-es/S3.js");
/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../S3Client */ "./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js");



const makePagedClientRequest = async (client, input, ...args) => {
    return await client.send(new _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_0__.ListObjectsV2Command(input), ...args);
};
const makePagedRequest = async (client, input, ...args) => {
    return await client.listObjectsV2(input, ...args);
};
async function* paginateListObjectsV2(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while (hasNext) {
        input.ContinuationToken = token;
        input["MaxKeys"] = config.pageSize;
        if (config.client instanceof _S3__WEBPACK_IMPORTED_MODULE_1__.S3) {
            page = await makePagedRequest(config.client, input, ...additionalArguments);
        }
        else if (config.client instanceof _S3Client__WEBPACK_IMPORTED_MODULE_2__.S3Client) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        }
        else {
            throw new Error("Invalid client, expected S3 | S3Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextContinuationToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paginateListParts": () => (/* binding */ paginateListParts)
/* harmony export */ });
/* harmony import */ var _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commands/ListPartsCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js");
/* harmony import */ var _S3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../S3 */ "./node_modules/@aws-sdk/client-s3/dist-es/S3.js");
/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../S3Client */ "./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js");



const makePagedClientRequest = async (client, input, ...args) => {
    return await client.send(new _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_0__.ListPartsCommand(input), ...args);
};
const makePagedRequest = async (client, input, ...args) => {
    return await client.listParts(input, ...args);
};
async function* paginateListParts(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while (hasNext) {
        input.PartNumberMarker = token;
        input["MaxParts"] = config.pageSize;
        if (config.client instanceof _S3__WEBPACK_IMPORTED_MODULE_1__.S3) {
            page = await makePagedRequest(config.client, input, ...additionalArguments);
        }
        else if (config.client instanceof _S3Client__WEBPACK_IMPORTED_MODULE_2__.S3Client) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        }
        else {
            throw new Error("Invalid client, expected S3 | S3Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextPartNumberMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paginateListObjectsV2": () => (/* reexport safe */ _ListObjectsV2Paginator__WEBPACK_IMPORTED_MODULE_0__.paginateListObjectsV2),
/* harmony export */   "paginateListParts": () => (/* reexport safe */ _ListPartsPaginator__WEBPACK_IMPORTED_MODULE_1__.paginateListParts)
/* harmony export */ });
/* harmony import */ var _ListObjectsV2Paginator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListObjectsV2Paginator */ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js");
/* harmony import */ var _ListPartsPaginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListPartsPaginator */ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserializeAws_restXmlAbortMultipartUploadCommand": () => (/* binding */ deserializeAws_restXmlAbortMultipartUploadCommand),
/* harmony export */   "deserializeAws_restXmlCompleteMultipartUploadCommand": () => (/* binding */ deserializeAws_restXmlCompleteMultipartUploadCommand),
/* harmony export */   "deserializeAws_restXmlCopyObjectCommand": () => (/* binding */ deserializeAws_restXmlCopyObjectCommand),
/* harmony export */   "deserializeAws_restXmlCreateBucketCommand": () => (/* binding */ deserializeAws_restXmlCreateBucketCommand),
/* harmony export */   "deserializeAws_restXmlCreateMultipartUploadCommand": () => (/* binding */ deserializeAws_restXmlCreateMultipartUploadCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketCorsCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketCorsCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketEncryptionCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketEncryptionCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketLifecycleCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketLifecycleCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketOwnershipControlsCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketOwnershipControlsCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketPolicyCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketPolicyCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketReplicationCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketReplicationCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketTaggingCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketTaggingCommand),
/* harmony export */   "deserializeAws_restXmlDeleteBucketWebsiteCommand": () => (/* binding */ deserializeAws_restXmlDeleteBucketWebsiteCommand),
/* harmony export */   "deserializeAws_restXmlDeleteObjectCommand": () => (/* binding */ deserializeAws_restXmlDeleteObjectCommand),
/* harmony export */   "deserializeAws_restXmlDeleteObjectTaggingCommand": () => (/* binding */ deserializeAws_restXmlDeleteObjectTaggingCommand),
/* harmony export */   "deserializeAws_restXmlDeleteObjectsCommand": () => (/* binding */ deserializeAws_restXmlDeleteObjectsCommand),
/* harmony export */   "deserializeAws_restXmlDeletePublicAccessBlockCommand": () => (/* binding */ deserializeAws_restXmlDeletePublicAccessBlockCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketAccelerateConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketAccelerateConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketAclCommand": () => (/* binding */ deserializeAws_restXmlGetBucketAclCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketCorsCommand": () => (/* binding */ deserializeAws_restXmlGetBucketCorsCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketEncryptionCommand": () => (/* binding */ deserializeAws_restXmlGetBucketEncryptionCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketInventoryConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketInventoryConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketLifecycleConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketLifecycleConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketLocationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketLocationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketLoggingCommand": () => (/* binding */ deserializeAws_restXmlGetBucketLoggingCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketMetricsConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketMetricsConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketNotificationConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketNotificationConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketOwnershipControlsCommand": () => (/* binding */ deserializeAws_restXmlGetBucketOwnershipControlsCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketPolicyCommand": () => (/* binding */ deserializeAws_restXmlGetBucketPolicyCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketPolicyStatusCommand": () => (/* binding */ deserializeAws_restXmlGetBucketPolicyStatusCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketReplicationCommand": () => (/* binding */ deserializeAws_restXmlGetBucketReplicationCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketRequestPaymentCommand": () => (/* binding */ deserializeAws_restXmlGetBucketRequestPaymentCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketTaggingCommand": () => (/* binding */ deserializeAws_restXmlGetBucketTaggingCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketVersioningCommand": () => (/* binding */ deserializeAws_restXmlGetBucketVersioningCommand),
/* harmony export */   "deserializeAws_restXmlGetBucketWebsiteCommand": () => (/* binding */ deserializeAws_restXmlGetBucketWebsiteCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectAclCommand": () => (/* binding */ deserializeAws_restXmlGetObjectAclCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectAttributesCommand": () => (/* binding */ deserializeAws_restXmlGetObjectAttributesCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectCommand": () => (/* binding */ deserializeAws_restXmlGetObjectCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectLegalHoldCommand": () => (/* binding */ deserializeAws_restXmlGetObjectLegalHoldCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectLockConfigurationCommand": () => (/* binding */ deserializeAws_restXmlGetObjectLockConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectRetentionCommand": () => (/* binding */ deserializeAws_restXmlGetObjectRetentionCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectTaggingCommand": () => (/* binding */ deserializeAws_restXmlGetObjectTaggingCommand),
/* harmony export */   "deserializeAws_restXmlGetObjectTorrentCommand": () => (/* binding */ deserializeAws_restXmlGetObjectTorrentCommand),
/* harmony export */   "deserializeAws_restXmlGetPublicAccessBlockCommand": () => (/* binding */ deserializeAws_restXmlGetPublicAccessBlockCommand),
/* harmony export */   "deserializeAws_restXmlHeadBucketCommand": () => (/* binding */ deserializeAws_restXmlHeadBucketCommand),
/* harmony export */   "deserializeAws_restXmlHeadObjectCommand": () => (/* binding */ deserializeAws_restXmlHeadObjectCommand),
/* harmony export */   "deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand": () => (/* binding */ deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand),
/* harmony export */   "deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand": () => (/* binding */ deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand),
/* harmony export */   "deserializeAws_restXmlListBucketInventoryConfigurationsCommand": () => (/* binding */ deserializeAws_restXmlListBucketInventoryConfigurationsCommand),
/* harmony export */   "deserializeAws_restXmlListBucketMetricsConfigurationsCommand": () => (/* binding */ deserializeAws_restXmlListBucketMetricsConfigurationsCommand),
/* harmony export */   "deserializeAws_restXmlListBucketsCommand": () => (/* binding */ deserializeAws_restXmlListBucketsCommand),
/* harmony export */   "deserializeAws_restXmlListMultipartUploadsCommand": () => (/* binding */ deserializeAws_restXmlListMultipartUploadsCommand),
/* harmony export */   "deserializeAws_restXmlListObjectVersionsCommand": () => (/* binding */ deserializeAws_restXmlListObjectVersionsCommand),
/* harmony export */   "deserializeAws_restXmlListObjectsCommand": () => (/* binding */ deserializeAws_restXmlListObjectsCommand),
/* harmony export */   "deserializeAws_restXmlListObjectsV2Command": () => (/* binding */ deserializeAws_restXmlListObjectsV2Command),
/* harmony export */   "deserializeAws_restXmlListPartsCommand": () => (/* binding */ deserializeAws_restXmlListPartsCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketAccelerateConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketAccelerateConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketAclCommand": () => (/* binding */ deserializeAws_restXmlPutBucketAclCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketCorsCommand": () => (/* binding */ deserializeAws_restXmlPutBucketCorsCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketEncryptionCommand": () => (/* binding */ deserializeAws_restXmlPutBucketEncryptionCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketInventoryConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketInventoryConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketLifecycleConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketLifecycleConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketLoggingCommand": () => (/* binding */ deserializeAws_restXmlPutBucketLoggingCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketMetricsConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketMetricsConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketNotificationConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketNotificationConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketOwnershipControlsCommand": () => (/* binding */ deserializeAws_restXmlPutBucketOwnershipControlsCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketPolicyCommand": () => (/* binding */ deserializeAws_restXmlPutBucketPolicyCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketReplicationCommand": () => (/* binding */ deserializeAws_restXmlPutBucketReplicationCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketRequestPaymentCommand": () => (/* binding */ deserializeAws_restXmlPutBucketRequestPaymentCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketTaggingCommand": () => (/* binding */ deserializeAws_restXmlPutBucketTaggingCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketVersioningCommand": () => (/* binding */ deserializeAws_restXmlPutBucketVersioningCommand),
/* harmony export */   "deserializeAws_restXmlPutBucketWebsiteCommand": () => (/* binding */ deserializeAws_restXmlPutBucketWebsiteCommand),
/* harmony export */   "deserializeAws_restXmlPutObjectAclCommand": () => (/* binding */ deserializeAws_restXmlPutObjectAclCommand),
/* harmony export */   "deserializeAws_restXmlPutObjectCommand": () => (/* binding */ deserializeAws_restXmlPutObjectCommand),
/* harmony export */   "deserializeAws_restXmlPutObjectLegalHoldCommand": () => (/* binding */ deserializeAws_restXmlPutObjectLegalHoldCommand),
/* harmony export */   "deserializeAws_restXmlPutObjectLockConfigurationCommand": () => (/* binding */ deserializeAws_restXmlPutObjectLockConfigurationCommand),
/* harmony export */   "deserializeAws_restXmlPutObjectRetentionCommand": () => (/* binding */ deserializeAws_restXmlPutObjectRetentionCommand),
/* harmony export */   "deserializeAws_restXmlPutObjectTaggingCommand": () => (/* binding */ deserializeAws_restXmlPutObjectTaggingCommand),
/* harmony export */   "deserializeAws_restXmlPutPublicAccessBlockCommand": () => (/* binding */ deserializeAws_restXmlPutPublicAccessBlockCommand),
/* harmony export */   "deserializeAws_restXmlRestoreObjectCommand": () => (/* binding */ deserializeAws_restXmlRestoreObjectCommand),
/* harmony export */   "deserializeAws_restXmlSelectObjectContentCommand": () => (/* binding */ deserializeAws_restXmlSelectObjectContentCommand),
/* harmony export */   "deserializeAws_restXmlUploadPartCommand": () => (/* binding */ deserializeAws_restXmlUploadPartCommand),
/* harmony export */   "deserializeAws_restXmlUploadPartCopyCommand": () => (/* binding */ deserializeAws_restXmlUploadPartCopyCommand),
/* harmony export */   "deserializeAws_restXmlWriteGetObjectResponseCommand": () => (/* binding */ deserializeAws_restXmlWriteGetObjectResponseCommand),
/* harmony export */   "serializeAws_restXmlAbortMultipartUploadCommand": () => (/* binding */ serializeAws_restXmlAbortMultipartUploadCommand),
/* harmony export */   "serializeAws_restXmlCompleteMultipartUploadCommand": () => (/* binding */ serializeAws_restXmlCompleteMultipartUploadCommand),
/* harmony export */   "serializeAws_restXmlCopyObjectCommand": () => (/* binding */ serializeAws_restXmlCopyObjectCommand),
/* harmony export */   "serializeAws_restXmlCreateBucketCommand": () => (/* binding */ serializeAws_restXmlCreateBucketCommand),
/* harmony export */   "serializeAws_restXmlCreateMultipartUploadCommand": () => (/* binding */ serializeAws_restXmlCreateMultipartUploadCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketCorsCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketCorsCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketEncryptionCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketEncryptionCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketInventoryConfigurationCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketInventoryConfigurationCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketLifecycleCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketLifecycleCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketMetricsConfigurationCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketMetricsConfigurationCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketOwnershipControlsCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketOwnershipControlsCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketPolicyCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketPolicyCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketReplicationCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketReplicationCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketTaggingCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketTaggingCommand),
/* harmony export */   "serializeAws_restXmlDeleteBucketWebsiteCommand": () => (/* binding */ serializeAws_restXmlDeleteBucketWebsiteCommand),
/* harmony export */   "serializeAws_restXmlDeleteObjectCommand": () => (/* binding */ serializeAws_restXmlDeleteObjectCommand),
/* harmony export */   "serializeAws_restXmlDeleteObjectTaggingCommand": () => (/* binding */ serializeAws_restXmlDeleteObjectTaggingCommand),
/* harmony export */   "serializeAws_restXmlDeleteObjectsCommand": () => (/* binding */ serializeAws_restXmlDeleteObjectsCommand),
/* harmony export */   "serializeAws_restXmlDeletePublicAccessBlockCommand": () => (/* binding */ serializeAws_restXmlDeletePublicAccessBlockCommand),
/* harmony export */   "serializeAws_restXmlGetBucketAccelerateConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketAccelerateConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketAclCommand": () => (/* binding */ serializeAws_restXmlGetBucketAclCommand),
/* harmony export */   "serializeAws_restXmlGetBucketAnalyticsConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketAnalyticsConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketCorsCommand": () => (/* binding */ serializeAws_restXmlGetBucketCorsCommand),
/* harmony export */   "serializeAws_restXmlGetBucketEncryptionCommand": () => (/* binding */ serializeAws_restXmlGetBucketEncryptionCommand),
/* harmony export */   "serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketInventoryConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketInventoryConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketLifecycleConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketLifecycleConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketLocationCommand": () => (/* binding */ serializeAws_restXmlGetBucketLocationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketLoggingCommand": () => (/* binding */ serializeAws_restXmlGetBucketLoggingCommand),
/* harmony export */   "serializeAws_restXmlGetBucketMetricsConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketMetricsConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketNotificationConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetBucketNotificationConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketOwnershipControlsCommand": () => (/* binding */ serializeAws_restXmlGetBucketOwnershipControlsCommand),
/* harmony export */   "serializeAws_restXmlGetBucketPolicyCommand": () => (/* binding */ serializeAws_restXmlGetBucketPolicyCommand),
/* harmony export */   "serializeAws_restXmlGetBucketPolicyStatusCommand": () => (/* binding */ serializeAws_restXmlGetBucketPolicyStatusCommand),
/* harmony export */   "serializeAws_restXmlGetBucketReplicationCommand": () => (/* binding */ serializeAws_restXmlGetBucketReplicationCommand),
/* harmony export */   "serializeAws_restXmlGetBucketRequestPaymentCommand": () => (/* binding */ serializeAws_restXmlGetBucketRequestPaymentCommand),
/* harmony export */   "serializeAws_restXmlGetBucketTaggingCommand": () => (/* binding */ serializeAws_restXmlGetBucketTaggingCommand),
/* harmony export */   "serializeAws_restXmlGetBucketVersioningCommand": () => (/* binding */ serializeAws_restXmlGetBucketVersioningCommand),
/* harmony export */   "serializeAws_restXmlGetBucketWebsiteCommand": () => (/* binding */ serializeAws_restXmlGetBucketWebsiteCommand),
/* harmony export */   "serializeAws_restXmlGetObjectAclCommand": () => (/* binding */ serializeAws_restXmlGetObjectAclCommand),
/* harmony export */   "serializeAws_restXmlGetObjectAttributesCommand": () => (/* binding */ serializeAws_restXmlGetObjectAttributesCommand),
/* harmony export */   "serializeAws_restXmlGetObjectCommand": () => (/* binding */ serializeAws_restXmlGetObjectCommand),
/* harmony export */   "serializeAws_restXmlGetObjectLegalHoldCommand": () => (/* binding */ serializeAws_restXmlGetObjectLegalHoldCommand),
/* harmony export */   "serializeAws_restXmlGetObjectLockConfigurationCommand": () => (/* binding */ serializeAws_restXmlGetObjectLockConfigurationCommand),
/* harmony export */   "serializeAws_restXmlGetObjectRetentionCommand": () => (/* binding */ serializeAws_restXmlGetObjectRetentionCommand),
/* harmony export */   "serializeAws_restXmlGetObjectTaggingCommand": () => (/* binding */ serializeAws_restXmlGetObjectTaggingCommand),
/* harmony export */   "serializeAws_restXmlGetObjectTorrentCommand": () => (/* binding */ serializeAws_restXmlGetObjectTorrentCommand),
/* harmony export */   "serializeAws_restXmlGetPublicAccessBlockCommand": () => (/* binding */ serializeAws_restXmlGetPublicAccessBlockCommand),
/* harmony export */   "serializeAws_restXmlHeadBucketCommand": () => (/* binding */ serializeAws_restXmlHeadBucketCommand),
/* harmony export */   "serializeAws_restXmlHeadObjectCommand": () => (/* binding */ serializeAws_restXmlHeadObjectCommand),
/* harmony export */   "serializeAws_restXmlListBucketAnalyticsConfigurationsCommand": () => (/* binding */ serializeAws_restXmlListBucketAnalyticsConfigurationsCommand),
/* harmony export */   "serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand": () => (/* binding */ serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand),
/* harmony export */   "serializeAws_restXmlListBucketInventoryConfigurationsCommand": () => (/* binding */ serializeAws_restXmlListBucketInventoryConfigurationsCommand),
/* harmony export */   "serializeAws_restXmlListBucketMetricsConfigurationsCommand": () => (/* binding */ serializeAws_restXmlListBucketMetricsConfigurationsCommand),
/* harmony export */   "serializeAws_restXmlListBucketsCommand": () => (/* binding */ serializeAws_restXmlListBucketsCommand),
/* harmony export */   "serializeAws_restXmlListMultipartUploadsCommand": () => (/* binding */ serializeAws_restXmlListMultipartUploadsCommand),
/* harmony export */   "serializeAws_restXmlListObjectVersionsCommand": () => (/* binding */ serializeAws_restXmlListObjectVersionsCommand),
/* harmony export */   "serializeAws_restXmlListObjectsCommand": () => (/* binding */ serializeAws_restXmlListObjectsCommand),
/* harmony export */   "serializeAws_restXmlListObjectsV2Command": () => (/* binding */ serializeAws_restXmlListObjectsV2Command),
/* harmony export */   "serializeAws_restXmlListPartsCommand": () => (/* binding */ serializeAws_restXmlListPartsCommand),
/* harmony export */   "serializeAws_restXmlPutBucketAccelerateConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketAccelerateConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketAclCommand": () => (/* binding */ serializeAws_restXmlPutBucketAclCommand),
/* harmony export */   "serializeAws_restXmlPutBucketAnalyticsConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketAnalyticsConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketCorsCommand": () => (/* binding */ serializeAws_restXmlPutBucketCorsCommand),
/* harmony export */   "serializeAws_restXmlPutBucketEncryptionCommand": () => (/* binding */ serializeAws_restXmlPutBucketEncryptionCommand),
/* harmony export */   "serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketInventoryConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketInventoryConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketLifecycleConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketLifecycleConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketLoggingCommand": () => (/* binding */ serializeAws_restXmlPutBucketLoggingCommand),
/* harmony export */   "serializeAws_restXmlPutBucketMetricsConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketMetricsConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketNotificationConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutBucketNotificationConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketOwnershipControlsCommand": () => (/* binding */ serializeAws_restXmlPutBucketOwnershipControlsCommand),
/* harmony export */   "serializeAws_restXmlPutBucketPolicyCommand": () => (/* binding */ serializeAws_restXmlPutBucketPolicyCommand),
/* harmony export */   "serializeAws_restXmlPutBucketReplicationCommand": () => (/* binding */ serializeAws_restXmlPutBucketReplicationCommand),
/* harmony export */   "serializeAws_restXmlPutBucketRequestPaymentCommand": () => (/* binding */ serializeAws_restXmlPutBucketRequestPaymentCommand),
/* harmony export */   "serializeAws_restXmlPutBucketTaggingCommand": () => (/* binding */ serializeAws_restXmlPutBucketTaggingCommand),
/* harmony export */   "serializeAws_restXmlPutBucketVersioningCommand": () => (/* binding */ serializeAws_restXmlPutBucketVersioningCommand),
/* harmony export */   "serializeAws_restXmlPutBucketWebsiteCommand": () => (/* binding */ serializeAws_restXmlPutBucketWebsiteCommand),
/* harmony export */   "serializeAws_restXmlPutObjectAclCommand": () => (/* binding */ serializeAws_restXmlPutObjectAclCommand),
/* harmony export */   "serializeAws_restXmlPutObjectCommand": () => (/* binding */ serializeAws_restXmlPutObjectCommand),
/* harmony export */   "serializeAws_restXmlPutObjectLegalHoldCommand": () => (/* binding */ serializeAws_restXmlPutObjectLegalHoldCommand),
/* harmony export */   "serializeAws_restXmlPutObjectLockConfigurationCommand": () => (/* binding */ serializeAws_restXmlPutObjectLockConfigurationCommand),
/* harmony export */   "serializeAws_restXmlPutObjectRetentionCommand": () => (/* binding */ serializeAws_restXmlPutObjectRetentionCommand),
/* harmony export */   "serializeAws_restXmlPutObjectTaggingCommand": () => (/* binding */ serializeAws_restXmlPutObjectTaggingCommand),
/* harmony export */   "serializeAws_restXmlPutPublicAccessBlockCommand": () => (/* binding */ serializeAws_restXmlPutPublicAccessBlockCommand),
/* harmony export */   "serializeAws_restXmlRestoreObjectCommand": () => (/* binding */ serializeAws_restXmlRestoreObjectCommand),
/* harmony export */   "serializeAws_restXmlSelectObjectContentCommand": () => (/* binding */ serializeAws_restXmlSelectObjectContentCommand),
/* harmony export */   "serializeAws_restXmlUploadPartCommand": () => (/* binding */ serializeAws_restXmlUploadPartCommand),
/* harmony export */   "serializeAws_restXmlUploadPartCopyCommand": () => (/* binding */ serializeAws_restXmlUploadPartCopyCommand),
/* harmony export */   "serializeAws_restXmlWriteGetObjectResponseCommand": () => (/* binding */ serializeAws_restXmlWriteGetObjectResponseCommand)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/xml-builder */ "./node_modules/@aws-sdk/xml-builder/dist-es/index.js");
/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-xml-parser */ "./node_modules/fast-xml-parser/src/fxp.js");
/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js");
/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/models_1 */ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js");
/* harmony import */ var _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/S3ServiceException */ "./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js");







const serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "AbortMultipartUpload"],
        uploadId: [, input.UploadId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "CompleteMultipartUpload"],
        uploadId: [, input.UploadId],
    });
    let body;
    if (input.MultipartUpload !== undefined) {
        body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
    }
    let contents;
    if (input.MultipartUpload !== undefined) {
        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.withName("CompleteMultipartUpload");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlCopyObjectCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfModifiedSince).toString(),
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString(),
        ],
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-metadata-directive": input.MetadataDirective,
        "x-amz-tagging-directive": input.TaggingDirective,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
            () => isSerializableHeaderValue(input.BucketKeyEnabled),
            () => input.BucketKeyEnabled.toString(),
        ],
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
        ...(input.Metadata !== undefined &&
            Object.keys(input.Metadata).reduce((acc, suffix) => ({
                ...acc,
                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],
            }), {})),
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "CopyObject"],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlCreateBucketCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-bucket-object-lock-enabled": [
            () => isSerializableHeaderValue(input.ObjectLockEnabledForBucket),
            () => input.ObjectLockEnabledForBucket.toString(),
        ],
        "x-amz-object-ownership": input.ObjectOwnership,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    if (input.CreateBucketConfiguration !== undefined) {
        body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
    }
    let contents;
    if (input.CreateBucketConfiguration !== undefined) {
        contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
const serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
            () => isSerializableHeaderValue(input.BucketKeyEnabled),
            () => input.BucketKeyEnabled.toString(),
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        ...(input.Metadata !== undefined &&
            Object.keys(input.Metadata).reduce((acc, suffix) => ({
                ...acc,
                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],
            }), {})),
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        uploads: [, ""],
        "x-id": [, "CreateMultipartUpload"],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
const serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        analytics: [, ""],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        cors: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        encryption: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "intelligent-tiering": [, ""],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        inventory: [, ""],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        lifecycle: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        metrics: [, ""],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        ownershipControls: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        policy: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        replication: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        tagging: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        website: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteObjectCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
            () => isSerializableHeaderValue(input.BypassGovernanceRetention),
            () => input.BypassGovernanceRetention.toString(),
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "DeleteObject"],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
            () => isSerializableHeaderValue(input.BypassGovernanceRetention),
            () => input.BypassGovernanceRetention.toString(),
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        delete: [, ""],
        "x-id": [, "DeleteObjects"],
    });
    let body;
    if (input.Delete !== undefined) {
        body = serializeAws_restXmlDelete(input.Delete, context);
    }
    let contents;
    if (input.Delete !== undefined) {
        contents = serializeAws_restXmlDelete(input.Delete, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        publicAccessBlock: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        accelerate: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketAclCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        acl: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        analytics: [, ""],
        "x-id": [, "GetBucketAnalyticsConfiguration"],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        cors: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        encryption: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "intelligent-tiering": [, ""],
        "x-id": [, "GetBucketIntelligentTieringConfiguration"],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        inventory: [, ""],
        "x-id": [, "GetBucketInventoryConfiguration"],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        lifecycle: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        location: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        logging: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        metrics: [, ""],
        "x-id": [, "GetBucketMetricsConfiguration"],
        id: [, input.Id],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        notification: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        ownershipControls: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        policy: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        policyStatus: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        replication: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        requestPayment: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        tagging: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        versioning: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        website: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
            () => isSerializableHeaderValue(input.IfModifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfModifiedSince).toString(),
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
            () => isSerializableHeaderValue(input.IfUnmodifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfUnmodifiedSince).toString(),
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "GetObject"],
        "response-cache-control": [, input.ResponseCacheControl],
        "response-content-disposition": [, input.ResponseContentDisposition],
        "response-content-encoding": [, input.ResponseContentEncoding],
        "response-content-language": [, input.ResponseContentLanguage],
        "response-content-type": [, input.ResponseContentType],
        "response-expires": [
            () => input.ResponseExpires !== void 0,
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.ResponseExpires).toString(),
        ],
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectAclCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        acl: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectAttributesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-max-parts": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],
        "x-amz-part-number-marker": input.PartNumberMarker,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-object-attributes": [
            () => isSerializableHeaderValue(input.ObjectAttributes),
            () => (input.ObjectAttributes || []).map((_entry) => _entry).join(", "),
        ],
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        attributes: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "legal-hold": [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "object-lock": [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        retention: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        torrent: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        publicAccessBlock: [, ""],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlHeadBucketCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        body,
    });
};
const serializeAws_restXmlHeadObjectCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
            () => isSerializableHeaderValue(input.IfModifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfModifiedSince).toString(),
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
            () => isSerializableHeaderValue(input.IfUnmodifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfUnmodifiedSince).toString(),
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        analytics: [, ""],
        "x-id": [, "ListBucketAnalyticsConfigurations"],
        "continuation-token": [, input.ContinuationToken],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "intelligent-tiering": [, ""],
        "x-id": [, "ListBucketIntelligentTieringConfigurations"],
        "continuation-token": [, input.ContinuationToken],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        inventory: [, ""],
        "x-id": [, "ListBucketInventoryConfigurations"],
        "continuation-token": [, input.ContinuationToken],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        metrics: [, ""],
        "x-id": [, "ListBucketMetricsConfigurations"],
        "continuation-token": [, input.ContinuationToken],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListBucketsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    let body;
    body = "";
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
const serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        uploads: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-uploads": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],
        prefix: [, input.Prefix],
        "upload-id-marker": [, input.UploadIdMarker],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListObjectsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        marker: [, input.Marker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListObjectsV2Command = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "list-type": [, "2"],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "continuation-token": [, input.ContinuationToken],
        "fetch-owner": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],
        "start-after": [, input.StartAfter],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        versions: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "version-id-marker": [, input.VersionIdMarker],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlListPartsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "ListParts"],
        "max-parts": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],
        "part-number-marker": [, input.PartNumberMarker],
        uploadId: [, input.UploadId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        accelerate: [, ""],
    });
    let body;
    if (input.AccelerateConfiguration !== undefined) {
        body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
    }
    let contents;
    if (input.AccelerateConfiguration !== undefined) {
        contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketAclCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        acl: [, ""],
    });
    let body;
    if (input.AccessControlPolicy !== undefined) {
        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
    }
    let contents;
    if (input.AccessControlPolicy !== undefined) {
        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        analytics: [, ""],
        id: [, input.Id],
    });
    let body;
    if (input.AnalyticsConfiguration !== undefined) {
        body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
    }
    let contents;
    if (input.AnalyticsConfiguration !== undefined) {
        contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        cors: [, ""],
    });
    let body;
    if (input.CORSConfiguration !== undefined) {
        body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
    }
    let contents;
    if (input.CORSConfiguration !== undefined) {
        contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        encryption: [, ""],
    });
    let body;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
        body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
    }
    let contents;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
        contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "intelligent-tiering": [, ""],
        id: [, input.Id],
    });
    let body;
    if (input.IntelligentTieringConfiguration !== undefined) {
        body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
    }
    let contents;
    if (input.IntelligentTieringConfiguration !== undefined) {
        contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        inventory: [, ""],
        id: [, input.Id],
    });
    let body;
    if (input.InventoryConfiguration !== undefined) {
        body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
    }
    let contents;
    if (input.InventoryConfiguration !== undefined) {
        contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        lifecycle: [, ""],
    });
    let body;
    if (input.LifecycleConfiguration !== undefined) {
        body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
    }
    let contents;
    if (input.LifecycleConfiguration !== undefined) {
        contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.withName("LifecycleConfiguration");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        logging: [, ""],
    });
    let body;
    if (input.BucketLoggingStatus !== undefined) {
        body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
    }
    let contents;
    if (input.BucketLoggingStatus !== undefined) {
        contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        metrics: [, ""],
        id: [, input.Id],
    });
    let body;
    if (input.MetricsConfiguration !== undefined) {
        body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
    }
    let contents;
    if (input.MetricsConfiguration !== undefined) {
        contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-skip-destination-validation": [
            () => isSerializableHeaderValue(input.SkipDestinationValidation),
            () => input.SkipDestinationValidation.toString(),
        ],
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        notification: [, ""],
    });
    let body;
    if (input.NotificationConfiguration !== undefined) {
        body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
    }
    let contents;
    if (input.NotificationConfiguration !== undefined) {
        contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        ownershipControls: [, ""],
    });
    let body;
    if (input.OwnershipControls !== undefined) {
        body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
    }
    let contents;
    if (input.OwnershipControls !== undefined) {
        contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-confirm-remove-self-bucket-access": [
            () => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),
            () => input.ConfirmRemoveSelfBucketAccess.toString(),
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        policy: [, ""],
    });
    let body;
    if (input.Policy !== undefined) {
        body = input.Policy;
    }
    let contents;
    if (input.Policy !== undefined) {
        contents = input.Policy;
        body = contents;
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-bucket-object-lock-token": input.Token,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        replication: [, ""],
    });
    let body;
    if (input.ReplicationConfiguration !== undefined) {
        body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
    }
    let contents;
    if (input.ReplicationConfiguration !== undefined) {
        contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        requestPayment: [, ""],
    });
    let body;
    if (input.RequestPaymentConfiguration !== undefined) {
        body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
    }
    let contents;
    if (input.RequestPaymentConfiguration !== undefined) {
        contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        tagging: [, ""],
    });
    let body;
    if (input.Tagging !== undefined) {
        body = serializeAws_restXmlTagging(input.Tagging, context);
    }
    let contents;
    if (input.Tagging !== undefined) {
        contents = serializeAws_restXmlTagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-mfa": input.MFA,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        versioning: [, ""],
    });
    let body;
    if (input.VersioningConfiguration !== undefined) {
        body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
    }
    let contents;
    if (input.VersioningConfiguration !== undefined) {
        contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        website: [, ""],
    });
    let body;
    if (input.WebsiteConfiguration !== undefined) {
        body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
    }
    let contents;
    if (input.WebsiteConfiguration !== undefined) {
        contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutObjectCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": input.ContentType || "application/octet-stream",
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
            () => isSerializableHeaderValue(input.BucketKeyEnabled),
            () => input.BucketKeyEnabled.toString(),
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        ...(input.Metadata !== undefined &&
            Object.keys(input.Metadata).reduce((acc, suffix) => ({
                ...acc,
                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],
            }), {})),
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "PutObject"],
    });
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    let contents;
    if (input.Body !== undefined) {
        contents = input.Body;
        body = contents;
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutObjectAclCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        acl: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    if (input.AccessControlPolicy !== undefined) {
        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
    }
    let contents;
    if (input.AccessControlPolicy !== undefined) {
        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "legal-hold": [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    if (input.LegalHold !== undefined) {
        body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
    }
    let contents;
    if (input.LegalHold !== undefined) {
        contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
        contents = contents.withName("LegalHold");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bucket-object-lock-token": input.Token,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        "object-lock": [, ""],
    });
    let body;
    if (input.ObjectLockConfiguration !== undefined) {
        body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
    }
    let contents;
    if (input.ObjectLockConfiguration !== undefined) {
        contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
            () => isSerializableHeaderValue(input.BypassGovernanceRetention),
            () => input.BypassGovernanceRetention.toString(),
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        retention: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    if (input.Retention !== undefined) {
        body = serializeAws_restXmlObjectLockRetention(input.Retention, context);
    }
    let contents;
    if (input.Retention !== undefined) {
        contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);
        contents = contents.withName("Retention");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId],
    });
    let body;
    if (input.Tagging !== undefined) {
        body = serializeAws_restXmlTagging(input.Tagging, context);
    }
    let contents;
    if (input.Tagging !== undefined) {
        contents = serializeAws_restXmlTagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
        publicAccessBlock: [, ""],
    });
    let body;
    if (input.PublicAccessBlockConfiguration !== undefined) {
        body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
    }
    let contents;
    if (input.PublicAccessBlockConfiguration !== undefined) {
        contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlRestoreObjectCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        restore: [, ""],
        "x-id": [, "RestoreObject"],
        versionId: [, input.VersionId],
    });
    let body;
    if (input.RestoreRequest !== undefined) {
        body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
    }
    let contents;
    if (input.RestoreRequest !== undefined) {
        contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        select: [, ""],
        "select-type": [, "2"],
        "x-id": [, "SelectObjectContent"],
    });
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("SelectObjectContentRequest");
    bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
    if (input.Expression !== undefined) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
    }
    if (input.ExpressionType !== undefined) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
    }
    if (input.InputSerialization !== undefined) {
        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization !== undefined) {
        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.RequestProgress !== undefined) {
        const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName("RequestProgress");
        bodyNode.addChildNode(node);
    }
    if (input.ScanRange !== undefined) {
        const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName("ScanRange");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlUploadPartCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "UploadPart"],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],
        uploadId: [, input.UploadId],
    });
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    let contents;
    if (input.Body !== undefined) {
        contents = input.Body;
        body = contents;
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfModifiedSince).toString(),
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString(),
        ],
        "x-amz-copy-source-range": input.CopySourceRange,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
        "x-id": [, "UploadPartCopy"],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],
        uploadId: [, input.UploadId],
    });
    let body;
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const serializeAws_restXmlWriteGetObjectResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        "x-amz-request-route": input.RequestRoute,
        "x-amz-request-token": input.RequestToken,
        "x-amz-fwd-status": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],
        "x-amz-fwd-error-code": input.ErrorCode,
        "x-amz-fwd-error-message": input.ErrorMessage,
        "x-amz-fwd-header-accept-ranges": input.AcceptRanges,
        "x-amz-fwd-header-cache-control": input.CacheControl,
        "x-amz-fwd-header-content-disposition": input.ContentDisposition,
        "x-amz-fwd-header-content-encoding": input.ContentEncoding,
        "x-amz-fwd-header-content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "x-amz-fwd-header-content-range": input.ContentRange,
        "x-amz-fwd-header-content-type": input.ContentType,
        "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-fwd-header-x-amz-delete-marker": [
            () => isSerializableHeaderValue(input.DeleteMarker),
            () => input.DeleteMarker.toString(),
        ],
        "x-amz-fwd-header-etag": input.ETag,
        "x-amz-fwd-header-expires": [
            () => isSerializableHeaderValue(input.Expires),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString(),
        ],
        "x-amz-fwd-header-x-amz-expiration": input.Expiration,
        "x-amz-fwd-header-last-modified": [
            () => isSerializableHeaderValue(input.LastModified),
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.LastModified).toString(),
        ],
        "x-amz-fwd-header-x-amz-missing-meta": [
            () => isSerializableHeaderValue(input.MissingMeta),
            () => input.MissingMeta.toString(),
        ],
        "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [
            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString(),
        ],
        "x-amz-fwd-header-x-amz-mp-parts-count": [
            () => isSerializableHeaderValue(input.PartsCount),
            () => input.PartsCount.toString(),
        ],
        "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus,
        "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged,
        "x-amz-fwd-header-x-amz-restore": input.Restore,
        "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-fwd-header-x-amz-storage-class": input.StorageClass,
        "x-amz-fwd-header-x-amz-tagging-count": [
            () => isSerializableHeaderValue(input.TagCount),
            () => input.TagCount.toString(),
        ],
        "x-amz-fwd-header-x-amz-version-id": input.VersionId,
        "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [
            () => isSerializableHeaderValue(input.BucketKeyEnabled),
            () => input.BucketKeyEnabled.toString(),
        ],
        ...(input.Metadata !== undefined &&
            Object.keys(input.Metadata).reduce((acc, suffix) => ({
                ...acc,
                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],
            }), {})),
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/WriteGetObjectResponse";
    const query = map({
        "x-id": [, "WriteGetObjectResponse"],
    });
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    let contents;
    if (input.Body !== undefined) {
        contents = input.Body;
        body = contents;
    }
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === undefined) {
            throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!(0,_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.isValidHostname)(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
const deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
            throw await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Bucket"]);
    }
    if (data["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ChecksumCRC32"]);
    }
    if (data["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ChecksumCRC32C"]);
    }
    if (data["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ChecksumSHA1"]);
    }
    if (data["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ChecksumSHA256"]);
    }
    if (data["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ETag"]);
    }
    if (data["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Key"]);
    }
    if (data["Location"] !== undefined) {
        contents.Location = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Location"]);
    }
    return contents;
};
const deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlCopyObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCopyObjectCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);
    return contents;
};
const deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
            throw await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateBucketCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateBucketCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
            throw await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
            throw await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        AbortDate: [
            () => void 0 !== output.headers["x-amz-abort-date"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["x-amz-abort-date"])),
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ChecksumAlgorithm: [, output.headers["x-amz-checksum-algorithm"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Bucket"]);
    }
    if (data["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Key"]);
    }
    if (data["UploadId"] !== undefined) {
        contents.UploadId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["UploadId"]);
    }
    return contents;
};
const deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteObjectCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            () => void 0 !== output.headers["x-amz-delete-marker"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-delete-marker"]),
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteObjectsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Deleted === "") {
        contents.Deleted = [];
    }
    else if (data["Deleted"] !== undefined) {
        contents.Deleted = deserializeAws_restXmlDeletedObjects((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Deleted"]), context);
    }
    if (data.Error === "") {
        contents.Errors = [];
    }
    else if (data["Error"] !== undefined) {
        contents.Errors = deserializeAws_restXmlErrors((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Error"]), context);
    }
    return contents;
};
const deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketAclCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") {
        contents.Grants = [];
    }
    else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) {
        contents.Grants = deserializeAws_restXmlGrants((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
    }
    if (data["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketCorsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CORSRule === "") {
        contents.CORSRules = [];
    }
    else if (data["CORSRule"] !== undefined) {
        contents.CORSRules = deserializeAws_restXmlCORSRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["CORSRule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Rule === "") {
        contents.Rules = [];
    }
    else if (data["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlLifecycleRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Rule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketLocationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["LocationConstraint"] !== undefined) {
        contents.LocationConstraint = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["LocationConstraint"]);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["LoggingEnabled"] !== undefined) {
        contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data["LoggingEnabled"], context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["EventBridgeConfiguration"] !== undefined) {
        contents.EventBridgeConfiguration = deserializeAws_restXmlEventBridgeConfiguration(data["EventBridgeConfiguration"], context);
    }
    if (data.CloudFunctionConfiguration === "") {
        contents.LambdaFunctionConfigurations = [];
    }
    else if (data["CloudFunctionConfiguration"] !== undefined) {
        contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["CloudFunctionConfiguration"]), context);
    }
    if (data.QueueConfiguration === "") {
        contents.QueueConfigurations = [];
    }
    else if (data["QueueConfiguration"] !== undefined) {
        contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["QueueConfiguration"]), context);
    }
    if (data.TopicConfiguration === "") {
        contents.TopicConfigurations = [];
    }
    else if (data["TopicConfiguration"] !== undefined) {
        contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["TopicConfiguration"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBodyString(output.body, context);
    contents.Policy = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data);
    return contents;
};
const deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Payer"] !== undefined) {
        contents.Payer = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Payer"]);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") {
        contents.TagSet = [];
    }
    else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) {
        contents.TagSet = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["MfaDelete"] !== undefined) {
        contents.MFADelete = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["MfaDelete"]);
    }
    if (data["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ErrorDocument"] !== undefined) {
        contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data["ErrorDocument"], context);
    }
    if (data["IndexDocument"] !== undefined) {
        contents.IndexDocument = deserializeAws_restXmlIndexDocument(data["IndexDocument"], context);
    }
    if (data["RedirectAllRequestsTo"] !== undefined) {
        contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
    }
    if (data.RoutingRules === "") {
        contents.RoutingRules = [];
    }
    else if (data["RoutingRules"] !== undefined && data["RoutingRules"]["RoutingRule"] !== undefined) {
        contents.RoutingRules = deserializeAws_restXmlRoutingRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["RoutingRules"]["RoutingRule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            () => void 0 !== output.headers["x-amz-delete-marker"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-delete-marker"]),
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        LastModified: [
            () => void 0 !== output.headers["last-modified"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["last-modified"])),
        ],
        ContentLength: [
            () => void 0 !== output.headers["content-length"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output.headers["content-length"]),
        ],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        MissingMeta: [
            () => void 0 !== output.headers["x-amz-missing-meta"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers["x-amz-missing-meta"]),
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentRange: [, output.headers["content-range"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
            () => void 0 !== output.headers["expires"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["expires"])),
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
            () => void 0 !== output.headers["x-amz-mp-parts-count"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers["x-amz-mp-parts-count"]),
        ],
        TagCount: [
            () => void 0 !== output.headers["x-amz-tagging-count"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers["x-amz-tagging-count"]),
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
            () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output.headers["x-amz-object-lock-retain-until-date"])),
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
            ,
            Object.keys(output.headers)
                .filter((header) => header.startsWith("x-amz-meta-"))
                .reduce((acc, header) => {
                acc[header.substring(11)] = output.headers[header];
                return acc;
            }, {}),
        ],
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
};
const deserializeAws_restXmlGetObjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
            throw await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectAclCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") {
        contents.Grants = [];
    }
    else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) {
        contents.Grants = deserializeAws_restXmlGrants((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
    }
    if (data["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    return contents;
};
const deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetObjectAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectAttributesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            () => void 0 !== output.headers["x-amz-delete-marker"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-delete-marker"]),
        ],
        LastModified: [
            () => void 0 !== output.headers["last-modified"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["last-modified"])),
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Checksum"] !== undefined) {
        contents.Checksum = deserializeAws_restXmlChecksum(data["Checksum"], context);
    }
    if (data["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ETag"]);
    }
    if (data["ObjectParts"] !== undefined) {
        contents.ObjectParts = deserializeAws_restXmlGetObjectAttributesParts(data["ObjectParts"], context);
    }
    if (data["ObjectSize"] !== undefined) {
        contents.ObjectSize = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(data["ObjectSize"]);
    }
    if (data["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["StorageClass"]);
    }
    return contents;
};
const deserializeAws_restXmlGetObjectAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);
    return contents;
};
const deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);
    return contents;
};
const deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") {
        contents.TagSet = [];
    }
    else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) {
        contents.TagSet = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
};
const deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);
    return contents;
};
const deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlHeadBucketCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlHeadBucketCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
            throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlHeadObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlHeadObjectCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            () => void 0 !== output.headers["x-amz-delete-marker"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-delete-marker"]),
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        ArchiveStatus: [, output.headers["x-amz-archive-status"]],
        LastModified: [
            () => void 0 !== output.headers["last-modified"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["last-modified"])),
        ],
        ContentLength: [
            () => void 0 !== output.headers["content-length"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output.headers["content-length"]),
        ],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ETag: [, output.headers["etag"]],
        MissingMeta: [
            () => void 0 !== output.headers["x-amz-missing-meta"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers["x-amz-missing-meta"]),
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
            () => void 0 !== output.headers["expires"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["expires"])),
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
            () => void 0 !== output.headers["x-amz-mp-parts-count"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers["x-amz-mp-parts-count"]),
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
            () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output.headers["x-amz-object-lock-retain-until-date"])),
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
            ,
            Object.keys(output.headers)
                .filter((header) => header.startsWith("x-amz-meta-"))
                .reduce((acc, header) => {
                acc[header.substring(11)] = output.headers[header];
                return acc;
            }, {}),
        ],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
            throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AnalyticsConfiguration === "") {
        contents.AnalyticsConfigurationList = [];
    }
    else if (data["AnalyticsConfiguration"] !== undefined) {
        contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["AnalyticsConfiguration"]), context);
    }
    if (data["ContinuationToken"] !== undefined) {
        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ContinuationToken"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextContinuationToken"]);
    }
    return contents;
};
const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) {
        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ContinuationToken"]);
    }
    if (data.IntelligentTieringConfiguration === "") {
        contents.IntelligentTieringConfigurationList = [];
    }
    else if (data["IntelligentTieringConfiguration"] !== undefined) {
        contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["IntelligentTieringConfiguration"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextContinuationToken"]);
    }
    return contents;
};
const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) {
        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ContinuationToken"]);
    }
    if (data.InventoryConfiguration === "") {
        contents.InventoryConfigurationList = [];
    }
    else if (data["InventoryConfiguration"] !== undefined) {
        contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["InventoryConfiguration"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextContinuationToken"]);
    }
    return contents;
};
const deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) {
        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ContinuationToken"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data.MetricsConfiguration === "") {
        contents.MetricsConfigurationList = [];
    }
    else if (data["MetricsConfiguration"] !== undefined) {
        contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["MetricsConfiguration"]), context);
    }
    if (data["NextContinuationToken"] !== undefined) {
        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextContinuationToken"]);
    }
    return contents;
};
const deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListBucketsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Buckets === "") {
        contents.Buckets = [];
    }
    else if (data["Buckets"] !== undefined && data["Buckets"]["Bucket"] !== undefined) {
        contents.Buckets = deserializeAws_restXmlBuckets((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Buckets"]["Bucket"]), context);
    }
    if (data["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    return contents;
};
const deserializeAws_restXmlListBucketsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Bucket"]);
    }
    if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
    }
    else if (data["CommonPrefixes"] !== undefined) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    }
    if (data["Delimiter"] !== undefined) {
        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["KeyMarker"] !== undefined) {
        contents.KeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["KeyMarker"]);
    }
    if (data["MaxUploads"] !== undefined) {
        contents.MaxUploads = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data["MaxUploads"]);
    }
    if (data["NextKeyMarker"] !== undefined) {
        contents.NextKeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextKeyMarker"]);
    }
    if (data["NextUploadIdMarker"] !== undefined) {
        contents.NextUploadIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextUploadIdMarker"]);
    }
    if (data["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Prefix"]);
    }
    if (data["UploadIdMarker"] !== undefined) {
        contents.UploadIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["UploadIdMarker"]);
    }
    if (data.Upload === "") {
        contents.Uploads = [];
    }
    else if (data["Upload"] !== undefined) {
        contents.Uploads = deserializeAws_restXmlMultipartUploadList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Upload"]), context);
    }
    return contents;
};
const deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListObjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListObjectsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
    }
    else if (data["CommonPrefixes"] !== undefined) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    }
    if (data.Contents === "") {
        contents.Contents = [];
    }
    else if (data["Contents"] !== undefined) {
        contents.Contents = deserializeAws_restXmlObjectList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Contents"]), context);
    }
    if (data["Delimiter"] !== undefined) {
        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Marker"]);
    }
    if (data["MaxKeys"] !== undefined) {
        contents.MaxKeys = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data["MaxKeys"]);
    }
    if (data["Name"] !== undefined) {
        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Name"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextMarker"]);
    }
    if (data["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Prefix"]);
    }
    return contents;
};
const deserializeAws_restXmlListObjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
            throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListObjectsV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListObjectsV2CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
    }
    else if (data["CommonPrefixes"] !== undefined) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    }
    if (data.Contents === "") {
        contents.Contents = [];
    }
    else if (data["Contents"] !== undefined) {
        contents.Contents = deserializeAws_restXmlObjectList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Contents"]), context);
    }
    if (data["ContinuationToken"] !== undefined) {
        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ContinuationToken"]);
    }
    if (data["Delimiter"] !== undefined) {
        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["KeyCount"] !== undefined) {
        contents.KeyCount = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data["KeyCount"]);
    }
    if (data["MaxKeys"] !== undefined) {
        contents.MaxKeys = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data["MaxKeys"]);
    }
    if (data["Name"] !== undefined) {
        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Name"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextContinuationToken"]);
    }
    if (data["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Prefix"]);
    }
    if (data["StartAfter"] !== undefined) {
        contents.StartAfter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["StartAfter"]);
    }
    return contents;
};
const deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
            throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListObjectVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
    }
    else if (data["CommonPrefixes"] !== undefined) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    }
    if (data.DeleteMarker === "") {
        contents.DeleteMarkers = [];
    }
    else if (data["DeleteMarker"] !== undefined) {
        contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["DeleteMarker"]), context);
    }
    if (data["Delimiter"] !== undefined) {
        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["KeyMarker"] !== undefined) {
        contents.KeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["KeyMarker"]);
    }
    if (data["MaxKeys"] !== undefined) {
        contents.MaxKeys = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data["MaxKeys"]);
    }
    if (data["Name"] !== undefined) {
        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Name"]);
    }
    if (data["NextKeyMarker"] !== undefined) {
        contents.NextKeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextKeyMarker"]);
    }
    if (data["NextVersionIdMarker"] !== undefined) {
        contents.NextVersionIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextVersionIdMarker"]);
    }
    if (data["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Prefix"]);
    }
    if (data["VersionIdMarker"] !== undefined) {
        contents.VersionIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["VersionIdMarker"]);
    }
    if (data.Version === "") {
        contents.Versions = [];
    }
    else if (data["Version"] !== undefined) {
        contents.Versions = deserializeAws_restXmlObjectVersionList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Version"]), context);
    }
    return contents;
};
const deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListPartsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        AbortDate: [
            () => void 0 !== output.headers["x-amz-abort-date"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers["x-amz-abort-date"])),
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Bucket"]);
    }
    if (data["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["ChecksumAlgorithm"]);
    }
    if (data["Initiator"] !== undefined) {
        contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"], context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["Key"]);
    }
    if (data["MaxParts"] !== undefined) {
        contents.MaxParts = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data["MaxParts"]);
    }
    if (data["NextPartNumberMarker"] !== undefined) {
        contents.NextPartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["NextPartNumberMarker"]);
    }
    if (data["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    if (data["PartNumberMarker"] !== undefined) {
        contents.PartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["PartNumberMarker"]);
    }
    if (data.Part === "") {
        contents.Parts = [];
    }
    else if (data["Part"] !== undefined) {
        contents.Parts = deserializeAws_restXmlParts((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data["Part"]), context);
    }
    if (data["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["StorageClass"]);
    }
    if (data["UploadId"] !== undefined) {
        contents.UploadId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["UploadId"]);
    }
    return contents;
};
const deserializeAws_restXmlListPartsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketAclCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketCorsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutObjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectAclCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlRestoreObjectCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        RestoreOutputPath: [, output.headers["x-amz-restore-output-path"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
            throw await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlSelectObjectContentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = output.body;
    contents.Payload = deserializeAws_restXmlSelectObjectContentEventStream(data, context);
    return contents;
};
const deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlUploadPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUploadPartCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlUploadPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUploadPartCopyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
            () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"]),
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
    });
    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));
    contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);
    return contents;
};
const deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlWriteGetObjectResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const deserializeAws_restXmlWriteGetObjectResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,
        errorCode,
    });
};
const map = _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map;
const deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.BucketAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.BucketAlreadyOwnedByYou({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data["AccessTier"] !== undefined) {
        contents.AccessTier = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["AccessTier"]);
    }
    if (data["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data["StorageClass"]);
    }
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.InvalidObjectState({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NoSuchBucket({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NoSuchKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NoSuchUpload({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlNotFoundResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_1__WEBPACK_IMPORTED_MODULE_6__.ObjectAlreadyInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.ObjectNotInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restXmlSelectObjectContentEventStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["Records"] != null) {
            return {
                Records: await deserializeAws_restXmlRecordsEvent_event(event["Records"], context),
            };
        }
        if (event["Stats"] != null) {
            return {
                Stats: await deserializeAws_restXmlStatsEvent_event(event["Stats"], context),
            };
        }
        if (event["Progress"] != null) {
            return {
                Progress: await deserializeAws_restXmlProgressEvent_event(event["Progress"], context),
            };
        }
        if (event["Cont"] != null) {
            return {
                Cont: await deserializeAws_restXmlContinuationEvent_event(event["Cont"], context),
            };
        }
        if (event["End"] != null) {
            return {
                End: await deserializeAws_restXmlEndEvent_event(event["End"], context),
            };
        }
        return { $unknown: output };
    });
};
const deserializeAws_restXmlContinuationEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, deserializeAws_restXmlContinuationEvent(data, context));
    return contents;
};
const deserializeAws_restXmlEndEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, deserializeAws_restXmlEndEvent(data, context));
    return contents;
};
const deserializeAws_restXmlProgressEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = deserializeAws_restXmlProgress(data, context);
    return contents;
};
const deserializeAws_restXmlRecordsEvent_event = async (output, context) => {
    const contents = {};
    contents.Payload = output.body;
    return contents;
};
const deserializeAws_restXmlStatsEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = deserializeAws_restXmlStats(data, context);
    return contents;
};
const serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AbortIncompleteMultipartUpload");
    if (input.DaysAfterInitiation != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAccelerateConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AccelerateConfiguration");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketAccelerateStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAccessControlPolicy = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AccessControlPolicy");
    if (input.Grants != null) {
        const nodes = serializeAws_restXmlGrants(input.Grants, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AccessControlList");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Owner != null) {
        const node = serializeAws_restXmlOwner(input.Owner, context).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAccessControlTranslation = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AccessControlTranslation");
    if (input.Owner != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("OwnerOverride", input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAllowedHeaders = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AllowedHeader", entry);
        return node.withName("member");
    });
};
const serializeAws_restXmlAllowedMethods = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AllowedMethod", entry);
        return node.withName("member");
    });
};
const serializeAws_restXmlAllowedOrigins = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AllowedOrigin", entry);
        return node.withName("member");
    });
};
const serializeAws_restXmlAnalyticsAndOperator = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AnalyticsAndOperator");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlAnalyticsConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AnalyticsConfiguration");
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AnalyticsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClassAnalysis != null) {
        const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAnalyticsExportDestination = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AnalyticsExportDestination");
    if (input.S3BucketDestination != null) {
        const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAnalyticsFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AnalyticsFilter");
    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.AnalyticsFilter.visit(input, {
        Prefix: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value) => {
            const node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: (value) => {
            const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value) => {
            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
const serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AnalyticsS3BucketDestination");
    if (input.Format != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.BucketAccountId != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AccountId", input.BucketAccountId).withName("BucketAccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("BucketLifecycleConfiguration");
    if (input.Rules != null) {
        const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);
        nodes.map((node) => {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlBucketLoggingStatus = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("BucketLoggingStatus");
    if (input.LoggingEnabled != null) {
        const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlCompletedMultipartUpload = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CompletedMultipartUpload");
    if (input.Parts != null) {
        const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);
        nodes.map((node) => {
            node = node.withName("Part");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlCompletedPart = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CompletedPart");
    if (input.ETag != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ETag", input.ETag).withName("ETag");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32 != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32C != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA1 != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA256 != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
        bodyNode.addChildNode(node);
    }
    if (input.PartNumber != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("PartNumber", String(input.PartNumber)).withName("PartNumber");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlCompletedPartList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlCompletedPart(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlCondition = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Condition");
    if (input.HttpErrorCodeReturnedEquals != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals)
            .withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
    }
    if (input.KeyPrefixEquals != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlCORSConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CORSConfiguration");
    if (input.CORSRules != null) {
        const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);
        nodes.map((node) => {
            node = node.withName("CORSRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlCORSRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CORSRule");
    if (input.ID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.AllowedHeaders != null) {
        const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);
        nodes.map((node) => {
            node = node.withName("AllowedHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedMethods != null) {
        const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);
        nodes.map((node) => {
            node = node.withName("AllowedMethod");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedOrigins != null) {
        const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);
        nodes.map((node) => {
            node = node.withName("AllowedOrigin");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ExposeHeaders != null) {
        const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);
        nodes.map((node) => {
            node = node.withName("ExposeHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.MaxAgeSeconds != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlCORSRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlCORSRule(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlCreateBucketConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CreateBucketConfiguration");
    if (input.LocationConstraint != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlCSVInput = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CSVInput");
    if (input.FileHeaderInfo != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
    }
    if (input.Comments != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Comments", input.Comments).withName("Comments");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.AllowQuotedRecordDelimiter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter))
            .withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlCSVOutput = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("CSVOutput");
    if (input.QuoteFields != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("QuoteFields", input.QuoteFields).withName("QuoteFields");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlDefaultRetention = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("DefaultRetention");
    if (input.Mode != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.Years != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Years", String(input.Years)).withName("Years");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlDelete = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Delete");
    if (input.Objects != null) {
        const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);
        nodes.map((node) => {
            node = node.withName("Object");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Quiet != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Quiet", String(input.Quiet)).withName("Quiet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlDeleteMarkerReplication = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("DeleteMarkerReplication");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlDestination = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Destination");
    if (input.Bucket != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Account != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AccountId", input.Account).withName("Account");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlTranslation != null) {
        const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
    }
    if (input.EncryptionConfiguration != null) {
        const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicationTime != null) {
        const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
        bodyNode.addChildNode(node);
    }
    if (input.Metrics != null) {
        const node = serializeAws_restXmlMetrics(input.Metrics, context).withName("Metrics");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlEncryption = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Encryption");
    if (input.EncryptionType != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
        bodyNode.addChildNode(node);
    }
    if (input.KMSKeyId != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
        bodyNode.addChildNode(node);
    }
    if (input.KMSContext != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("KMSContext", input.KMSContext).withName("KMSContext");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlEncryptionConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("EncryptionConfiguration");
    if (input.ReplicaKmsKeyID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlErrorDocument = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ErrorDocument");
    if (input.Key != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlEventBridgeConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("EventBridgeConfiguration");
    return bodyNode;
};
const serializeAws_restXmlEventList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Event", entry);
        return node.withName("member");
    });
};
const serializeAws_restXmlExistingObjectReplication = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ExistingObjectReplication");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ExistingObjectReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlExposeHeaders = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ExposeHeader", entry);
        return node.withName("member");
    });
};
const serializeAws_restXmlFilterRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("FilterRule");
    if (input.Name != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("FilterRuleName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("FilterRuleValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlFilterRuleList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlFilterRule(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlGlacierJobParameters = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("GlacierJobParameters");
    if (input.Tier != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlGrant = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Grant");
    if (input.Grantee != null) {
        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Permission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlGrantee = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Grantee");
    if (input.DisplayName != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.EmailAddress != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("EmailAddress", input.EmailAddress).withName("EmailAddress");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.URI != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("URI", input.URI).withName("URI");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        bodyNode.addAttribute("xsi:type", input.Type);
    }
    return bodyNode;
};
const serializeAws_restXmlGrants = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlGrant(entry, context);
        return node.withName("Grant");
    });
};
const serializeAws_restXmlIndexDocument = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("IndexDocument");
    if (input.Suffix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Suffix", input.Suffix).withName("Suffix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInputSerialization = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InputSerialization");
    if (input.CSV != null) {
        const node = serializeAws_restXmlCSVInput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.CompressionType != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("CompressionType", input.CompressionType).withName("CompressionType");
        bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
        const node = serializeAws_restXmlJSONInput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
    }
    if (input.Parquet != null) {
        const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName("Parquet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("IntelligentTieringAndOperator");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("IntelligentTieringConfiguration");
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("IntelligentTieringId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("IntelligentTieringStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Tierings != null) {
        const nodes = serializeAws_restXmlTieringList(input.Tierings, context);
        nodes.map((node) => {
            node = node.withName("Tiering");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlIntelligentTieringFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("IntelligentTieringFilter");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tag != null) {
        const node = serializeAws_restXmlTag(input.Tag, context).withName("Tag");
        bodyNode.addChildNode(node);
    }
    if (input.And != null) {
        const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName("And");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInventoryConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InventoryConfiguration");
    if (input.Destination != null) {
        const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.IsEnabled != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("InventoryId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.IncludedObjectVersions != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("InventoryIncludedObjectVersions", input.IncludedObjectVersions)
            .withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
    }
    if (input.OptionalFields != null) {
        const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("OptionalFields");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Schedule != null) {
        const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName("Schedule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInventoryDestination = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InventoryDestination");
    if (input.S3BucketDestination != null) {
        const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInventoryEncryption = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InventoryEncryption");
    if (input.SSES3 != null) {
        const node = serializeAws_restXmlSSES3(input.SSES3, context).withName("SSE-S3");
        bodyNode.addChildNode(node);
    }
    if (input.SSEKMS != null) {
        const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName("SSE-KMS");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInventoryFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InventoryFilter");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInventoryOptionalFields = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("InventoryOptionalField", entry);
        return node.withName("Field");
    });
};
const serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InventoryS3BucketDestination");
    if (input.AccountId != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AccountId", input.AccountId).withName("AccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Format != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("InventoryFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
        const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlInventorySchedule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("InventorySchedule");
    if (input.Frequency != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("InventoryFrequency", input.Frequency).withName("Frequency");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlJSONInput = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("JSONInput");
    if (input.Type != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("JSONType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlJSONOutput = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("JSONOutput");
    if (input.RecordDelimiter != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("LambdaFunctionConfiguration");
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.LambdaFunctionArn != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        const nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map((node) => {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlLifecycleExpiration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("LifecycleExpiration");
    if (input.Date != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Date", input.Date.toISOString().split(".")[0] + "Z").withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.ExpiredObjectDeleteMarker != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker))
            .withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlLifecycleRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("LifecycleRule");
    if (input.Expiration != null) {
        const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName("Expiration");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ExpirationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Transitions != null) {
        const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);
        nodes.map((node) => {
            node = node.withName("Transition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionTransitions != null) {
        const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
        nodes.map((node) => {
            node = node.withName("NoncurrentVersionTransition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionExpiration != null) {
        const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
    }
    if (input.AbortIncompleteMultipartUpload != null) {
        const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("LifecycleRuleAndOperator");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ObjectSizeGreaterThan != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan))
            .withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
    }
    if (input.ObjectSizeLessThan != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan))
            .withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlLifecycleRuleFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("LifecycleRuleFilter");
    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.LifecycleRuleFilter.visit(input, {
        Prefix: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value) => {
            const node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        ObjectSizeGreaterThan: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
            bodyNode.addChildNode(node);
        },
        ObjectSizeLessThan: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
            bodyNode.addChildNode(node);
        },
        And: (value) => {
            const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value) => {
            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
const serializeAws_restXmlLifecycleRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlLifecycleRule(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlLoggingEnabled = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("LoggingEnabled");
    if (input.TargetBucket != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("TargetBucket", input.TargetBucket).withName("TargetBucket");
        bodyNode.addChildNode(node);
    }
    if (input.TargetGrants != null) {
        const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("TargetGrants");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.TargetPrefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlMetadataEntry = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("MetadataEntry");
    if (input.Name != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("MetadataKey", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("MetadataValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlMetrics = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Metrics");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("MetricsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.EventThreshold != null) {
        const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlMetricsAndOperator = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("MetricsAndOperator");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AccessPointArn != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlMetricsConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("MetricsConfiguration");
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("MetricsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlMetricsFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("MetricsFilter");
    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.MetricsFilter.visit(input, {
        Prefix: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value) => {
            const node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        AccessPointArn: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("AccessPointArn", value).withName("AccessPointArn");
            bodyNode.addChildNode(node);
        },
        And: (value) => {
            const node = serializeAws_restXmlMetricsAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value) => {
            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
const serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("NoncurrentVersionExpiration");
    if (input.NoncurrentDays != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions))
            .withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("NoncurrentVersionTransition");
    if (input.NoncurrentDays != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions))
            .withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlNotificationConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("NotificationConfiguration");
    if (input.TopicConfigurations != null) {
        const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);
        nodes.map((node) => {
            node = node.withName("TopicConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.QueueConfigurations != null) {
        const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);
        nodes.map((node) => {
            node = node.withName("QueueConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.LambdaFunctionConfigurations != null) {
        const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
        nodes.map((node) => {
            node = node.withName("CloudFunctionConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.EventBridgeConfiguration != null) {
        const node = serializeAws_restXmlEventBridgeConfiguration(input.EventBridgeConfiguration, context).withName("EventBridgeConfiguration");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("NotificationConfigurationFilter");
    if (input.Key != null) {
        const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName("S3Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlObjectIdentifier = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ObjectIdentifier");
    if (input.Key != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.VersionId != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectVersionId", input.VersionId).withName("VersionId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlObjectIdentifierList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlObjectIdentifier(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlObjectLockConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ObjectLockConfiguration");
    if (input.ObjectLockEnabled != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Rule != null) {
        const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName("Rule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlObjectLockLegalHold = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ObjectLockLegalHold");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlObjectLockRetention = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ObjectLockRetention");
    if (input.Mode != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.RetainUntilDate != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Date", input.RetainUntilDate.toISOString().split(".")[0] + "Z")
            .withName("RetainUntilDate");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlObjectLockRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ObjectLockRule");
    if (input.DefaultRetention != null) {
        const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlOutputLocation = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("OutputLocation");
    if (input.S3 != null) {
        const node = serializeAws_restXmlS3Location(input.S3, context).withName("S3");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlOutputSerialization = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("OutputSerialization");
    if (input.CSV != null) {
        const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
        const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlOwner = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Owner");
    if (input.DisplayName != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlOwnershipControls = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("OwnershipControls");
    if (input.Rules != null) {
        const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);
        nodes.map((node) => {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlOwnershipControlsRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("OwnershipControlsRule");
    if (input.ObjectOwnership != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlOwnershipControlsRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlOwnershipControlsRule(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlParquetInput = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ParquetInput");
    return bodyNode;
};
const serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("PublicAccessBlockConfiguration");
    if (input.BlockPublicAcls != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.IgnorePublicAcls != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.BlockPublicPolicy != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
    }
    if (input.RestrictPublicBuckets != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlQueueConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("QueueConfiguration");
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.QueueArn != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("QueueArn", input.QueueArn).withName("Queue");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        const nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map((node) => {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlQueueConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlQueueConfiguration(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlRedirect = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Redirect");
    if (input.HostName != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.HttpRedirectCode != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyPrefixWith != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyWith != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("RedirectAllRequestsTo");
    if (input.HostName != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlReplicaModifications = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicaModifications");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ReplicaModificationsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlReplicationConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicationConfiguration");
    if (input.Role != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Role", input.Role).withName("Role");
        bodyNode.addChildNode(node);
    }
    if (input.Rules != null) {
        const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);
        nodes.map((node) => {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlReplicationRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicationRule");
    if (input.ID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Priority != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Priority", String(input.Priority)).withName("Priority");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ReplicationRuleStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.SourceSelectionCriteria != null) {
        const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
    }
    if (input.ExistingObjectReplication != null) {
        const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
        const node = serializeAws_restXmlDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.DeleteMarkerReplication != null) {
        const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicationRuleAndOperator");
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlReplicationRuleFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicationRuleFilter");
    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.ReplicationRuleFilter.visit(input, {
        Prefix: (value) => {
            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value) => {
            const node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: (value) => {
            const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value) => {
            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {
                throw new Error("Unable to serialize unknown union members in XML.");
            }
            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));
        },
    });
    return bodyNode;
};
const serializeAws_restXmlReplicationRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlReplicationRule(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlReplicationTime = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicationTime");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ReplicationTimeStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Time != null) {
        const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName("Time");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlReplicationTimeValue = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ReplicationTimeValue");
    if (input.Minutes != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Minutes", String(input.Minutes)).withName("Minutes");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("RequestPaymentConfiguration");
    if (input.Payer != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Payer", input.Payer).withName("Payer");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlRequestProgress = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("RequestProgress");
    if (input.Enabled != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlRestoreRequest = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("RestoreRequest");
    if (input.Days != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.GlacierJobParameters != null) {
        const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("RestoreRequestType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.Tier != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
    }
    if (input.Description != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Description", input.Description).withName("Description");
        bodyNode.addChildNode(node);
    }
    if (input.SelectParameters != null) {
        const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName("SelectParameters");
        bodyNode.addChildNode(node);
    }
    if (input.OutputLocation != null) {
        const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName("OutputLocation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlRoutingRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("RoutingRule");
    if (input.Condition != null) {
        const node = serializeAws_restXmlCondition(input.Condition, context).withName("Condition");
        bodyNode.addChildNode(node);
    }
    if (input.Redirect != null) {
        const node = serializeAws_restXmlRedirect(input.Redirect, context).withName("Redirect");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlRoutingRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlRoutingRule(entry, context);
        return node.withName("RoutingRule");
    });
};
const serializeAws_restXmlS3KeyFilter = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("S3KeyFilter");
    if (input.FilterRules != null) {
        const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);
        nodes.map((node) => {
            node = node.withName("FilterRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlS3Location = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("S3Location");
    if (input.BucketName != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketName", input.BucketName).withName("BucketName");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("LocationPrefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
        const node = serializeAws_restXmlEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    if (input.CannedACL != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlList != null) {
        const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("AccessControlList");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Tagging != null) {
        const node = serializeAws_restXmlTagging(input.Tagging, context).withName("Tagging");
        bodyNode.addChildNode(node);
    }
    if (input.UserMetadata != null) {
        const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("UserMetadata");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.StorageClass != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlScanRange = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ScanRange");
    if (input.Start != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Start", String(input.Start)).withName("Start");
        bodyNode.addChildNode(node);
    }
    if (input.End != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("End", String(input.End)).withName("End");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlSelectParameters = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("SelectParameters");
    if (input.InputSerialization != null) {
        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.ExpressionType != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
    }
    if (input.Expression != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization != null) {
        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ServerSideEncryptionByDefault");
    if (input.SSEAlgorithm != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
    }
    if (input.KMSMasterKeyID != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ServerSideEncryptionConfiguration");
    if (input.Rules != null) {
        const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);
        nodes.map((node) => {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const serializeAws_restXmlServerSideEncryptionRule = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("ServerSideEncryptionRule");
    if (input.ApplyServerSideEncryptionByDefault != null) {
        const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
    }
    if (input.BucketKeyEnabled != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlServerSideEncryptionRules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlSourceSelectionCriteria = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("SourceSelectionCriteria");
    if (input.SseKmsEncryptedObjects != null) {
        const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicaModifications != null) {
        const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlSSEKMS = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("SSE-KMS");
    if (input.KeyId != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("SSEKMSKeyId", input.KeyId).withName("KeyId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("SseKmsEncryptedObjects");
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlSSES3 = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("SSE-S3");
    return bodyNode;
};
const serializeAws_restXmlStorageClassAnalysis = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("StorageClassAnalysis");
    if (input.DataExport != null) {
        const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("StorageClassAnalysisDataExport");
    if (input.OutputSchemaVersion != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion)
            .withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
        const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTag = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Tag");
    if (input.Key != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Value", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTagging = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Tagging");
    if (input.TagSet != null) {
        const nodes = serializeAws_restXmlTagSet(input.TagSet, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("TagSet");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const serializeAws_restXmlTagSet = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlTag(entry, context);
        return node.withName("Tag");
    });
};
const serializeAws_restXmlTargetGrant = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("TargetGrant");
    if (input.Grantee != null) {
        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketLogsPermission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTargetGrants = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlTargetGrant(entry, context);
        return node.withName("Grant");
    });
};
const serializeAws_restXmlTiering = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Tiering");
    if (input.Days != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("IntelligentTieringDays", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.AccessTier != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTieringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlTiering(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlTopicConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("TopicConfiguration");
    if (input.Id != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.TopicArn != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("TopicArn", input.TopicArn).withName("Topic");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        const nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map((node) => {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTopicConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlTopicConfiguration(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlTransition = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("Transition");
    if (input.Date != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Date", input.Date.toISOString().split(".")[0] + "Z").withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTransitionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlTransition(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlUserMetadata = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlMetadataEntry(entry, context);
        return node.withName("MetadataEntry");
    });
};
const serializeAws_restXmlVersioningConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("VersioningConfiguration");
    if (input.MFADelete != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("MFADelete", input.MFADelete).withName("MfaDelete");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of("BucketVersioningStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlWebsiteConfiguration = (input, context) => {
    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("WebsiteConfiguration");
    if (input.ErrorDocument != null) {
        const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
        bodyNode.addChildNode(node);
    }
    if (input.IndexDocument != null) {
        const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName("IndexDocument");
        bodyNode.addChildNode(node);
    }
    if (input.RedirectAllRequestsTo != null) {
        const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingRules != null) {
        const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);
        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode("RoutingRules");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {
    const contents = {
        DaysAfterInitiation: undefined,
    };
    if (output["DaysAfterInitiation"] !== undefined) {
        contents.DaysAfterInitiation = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["DaysAfterInitiation"]);
    }
    return contents;
};
const deserializeAws_restXmlAccessControlTranslation = (output, context) => {
    const contents = {
        Owner: undefined,
    };
    if (output["Owner"] !== undefined) {
        contents.Owner = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Owner"]);
    }
    return contents;
};
const deserializeAws_restXmlAllowedHeaders = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlAllowedMethods = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlAllowedOrigins = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {
    const contents = {
        Prefix: undefined,
        Tags: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Tag"]), context);
    }
    return contents;
};
const deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {
    const contents = {
        Id: undefined,
        Filter: undefined,
        StorageClassAnalysis: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output.Filter === "") {
    }
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlAnalyticsFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output["Filter"]), context);
    }
    if (output["StorageClassAnalysis"] !== undefined) {
        contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output["StorageClassAnalysis"], context);
    }
    return contents;
};
const deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlAnalyticsConfiguration(entry, context);
    });
};
const deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {
    const contents = {
        S3BucketDestination: undefined,
    };
    if (output["S3BucketDestination"] !== undefined) {
        contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output["S3BucketDestination"], context);
    }
    return contents;
};
const deserializeAws_restXmlAnalyticsFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"], context),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlAnalyticsAndOperator(output["And"], context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {
    const contents = {
        Format: undefined,
        BucketAccountId: undefined,
        Bucket: undefined,
        Prefix: undefined,
    };
    if (output["Format"] !== undefined) {
        contents.Format = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Format"]);
    }
    if (output["BucketAccountId"] !== undefined) {
        contents.BucketAccountId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["BucketAccountId"]);
    }
    if (output["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Bucket"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    return contents;
};
const deserializeAws_restXmlBucket = (output, context) => {
    const contents = {
        Name: undefined,
        CreationDate: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Name"]);
    }
    if (output["CreationDate"] !== undefined) {
        contents.CreationDate = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["CreationDate"]));
    }
    return contents;
};
const deserializeAws_restXmlBuckets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlBucket(entry, context);
    });
};
const deserializeAws_restXmlChecksum = (output, context) => {
    const contents = {
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA256"]);
    }
    return contents;
};
const deserializeAws_restXmlChecksumAlgorithmList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlCommonPrefix = (output, context) => {
    const contents = {
        Prefix: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    return contents;
};
const deserializeAws_restXmlCommonPrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlCommonPrefix(entry, context);
    });
};
const deserializeAws_restXmlCondition = (output, context) => {
    const contents = {
        HttpErrorCodeReturnedEquals: undefined,
        KeyPrefixEquals: undefined,
    };
    if (output["HttpErrorCodeReturnedEquals"] !== undefined) {
        contents.HttpErrorCodeReturnedEquals = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["HttpErrorCodeReturnedEquals"]);
    }
    if (output["KeyPrefixEquals"] !== undefined) {
        contents.KeyPrefixEquals = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["KeyPrefixEquals"]);
    }
    return contents;
};
const deserializeAws_restXmlContinuationEvent = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_restXmlCopyObjectResult = (output, context) => {
    const contents = {
        ETag: undefined,
        LastModified: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ETag"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["LastModified"]));
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA256"]);
    }
    return contents;
};
const deserializeAws_restXmlCopyPartResult = (output, context) => {
    const contents = {
        ETag: undefined,
        LastModified: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ETag"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["LastModified"]));
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA256"]);
    }
    return contents;
};
const deserializeAws_restXmlCORSRule = (output, context) => {
    const contents = {
        ID: undefined,
        AllowedHeaders: undefined,
        AllowedMethods: undefined,
        AllowedOrigins: undefined,
        ExposeHeaders: undefined,
        MaxAgeSeconds: undefined,
    };
    if (output["ID"] !== undefined) {
        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ID"]);
    }
    if (output.AllowedHeader === "") {
        contents.AllowedHeaders = [];
    }
    else if (output["AllowedHeader"] !== undefined) {
        contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["AllowedHeader"]), context);
    }
    if (output.AllowedMethod === "") {
        contents.AllowedMethods = [];
    }
    else if (output["AllowedMethod"] !== undefined) {
        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["AllowedMethod"]), context);
    }
    if (output.AllowedOrigin === "") {
        contents.AllowedOrigins = [];
    }
    else if (output["AllowedOrigin"] !== undefined) {
        contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["AllowedOrigin"]), context);
    }
    if (output.ExposeHeader === "") {
        contents.ExposeHeaders = [];
    }
    else if (output["ExposeHeader"] !== undefined) {
        contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["ExposeHeader"]), context);
    }
    if (output["MaxAgeSeconds"] !== undefined) {
        contents.MaxAgeSeconds = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["MaxAgeSeconds"]);
    }
    return contents;
};
const deserializeAws_restXmlCORSRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlCORSRule(entry, context);
    });
};
const deserializeAws_restXmlDefaultRetention = (output, context) => {
    const contents = {
        Mode: undefined,
        Days: undefined,
        Years: undefined,
    };
    if (output["Mode"] !== undefined) {
        contents.Mode = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Mode"]);
    }
    if (output["Days"] !== undefined) {
        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Days"]);
    }
    if (output["Years"] !== undefined) {
        contents.Years = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Years"]);
    }
    return contents;
};
const deserializeAws_restXmlDeletedObject = (output, context) => {
    const contents = {
        Key: undefined,
        VersionId: undefined,
        DeleteMarker: undefined,
        DeleteMarkerVersionId: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["VersionId"]);
    }
    if (output["DeleteMarker"] !== undefined) {
        contents.DeleteMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["DeleteMarker"]);
    }
    if (output["DeleteMarkerVersionId"] !== undefined) {
        contents.DeleteMarkerVersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["DeleteMarkerVersionId"]);
    }
    return contents;
};
const deserializeAws_restXmlDeletedObjects = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlDeletedObject(entry, context);
    });
};
const deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {
    const contents = {
        Owner: undefined,
        Key: undefined,
        VersionId: undefined,
        IsLatest: undefined,
        LastModified: undefined,
    };
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["VersionId"]);
    }
    if (output["IsLatest"] !== undefined) {
        contents.IsLatest = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["IsLatest"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["LastModified"]));
    }
    return contents;
};
const deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlDeleteMarkers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlDeleteMarkerEntry(entry, context);
    });
};
const deserializeAws_restXmlDestination = (output, context) => {
    const contents = {
        Bucket: undefined,
        Account: undefined,
        StorageClass: undefined,
        AccessControlTranslation: undefined,
        EncryptionConfiguration: undefined,
        ReplicationTime: undefined,
        Metrics: undefined,
    };
    if (output["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Bucket"]);
    }
    if (output["Account"] !== undefined) {
        contents.Account = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Account"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["StorageClass"]);
    }
    if (output["AccessControlTranslation"] !== undefined) {
        contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output["AccessControlTranslation"], context);
    }
    if (output["EncryptionConfiguration"] !== undefined) {
        contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output["EncryptionConfiguration"], context);
    }
    if (output["ReplicationTime"] !== undefined) {
        contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output["ReplicationTime"], context);
    }
    if (output["Metrics"] !== undefined) {
        contents.Metrics = deserializeAws_restXmlMetrics(output["Metrics"], context);
    }
    return contents;
};
const deserializeAws_restXmlEncryptionConfiguration = (output, context) => {
    const contents = {
        ReplicaKmsKeyID: undefined,
    };
    if (output["ReplicaKmsKeyID"] !== undefined) {
        contents.ReplicaKmsKeyID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ReplicaKmsKeyID"]);
    }
    return contents;
};
const deserializeAws_restXmlEndEvent = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_restXml_Error = (output, context) => {
    const contents = {
        Key: undefined,
        VersionId: undefined,
        Code: undefined,
        Message: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["VersionId"]);
    }
    if (output["Code"] !== undefined) {
        contents.Code = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Code"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Message"]);
    }
    return contents;
};
const deserializeAws_restXmlErrorDocument = (output, context) => {
    const contents = {
        Key: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    return contents;
};
const deserializeAws_restXmlErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXml_Error(entry, context);
    });
};
const deserializeAws_restXmlEventBridgeConfiguration = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_restXmlEventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlExistingObjectReplication = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlExposeHeaders = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlFilterRule = (output, context) => {
    const contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlFilterRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlFilterRule(entry, context);
    });
};
const deserializeAws_restXmlGetObjectAttributesParts = (output, context) => {
    const contents = {
        TotalPartsCount: undefined,
        PartNumberMarker: undefined,
        NextPartNumberMarker: undefined,
        MaxParts: undefined,
        IsTruncated: undefined,
        Parts: undefined,
    };
    if (output["PartsCount"] !== undefined) {
        contents.TotalPartsCount = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["PartsCount"]);
    }
    if (output["PartNumberMarker"] !== undefined) {
        contents.PartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["PartNumberMarker"]);
    }
    if (output["NextPartNumberMarker"] !== undefined) {
        contents.NextPartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["NextPartNumberMarker"]);
    }
    if (output["MaxParts"] !== undefined) {
        contents.MaxParts = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["MaxParts"]);
    }
    if (output["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["IsTruncated"]);
    }
    if (output.Part === "") {
        contents.Parts = [];
    }
    else if (output["Part"] !== undefined) {
        contents.Parts = deserializeAws_restXmlPartsList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Part"]), context);
    }
    return contents;
};
const deserializeAws_restXmlGrant = (output, context) => {
    const contents = {
        Grantee: undefined,
        Permission: undefined,
    };
    if (output["Grantee"] !== undefined) {
        contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
    }
    if (output["Permission"] !== undefined) {
        contents.Permission = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Permission"]);
    }
    return contents;
};
const deserializeAws_restXmlGrantee = (output, context) => {
    const contents = {
        DisplayName: undefined,
        EmailAddress: undefined,
        ID: undefined,
        URI: undefined,
        Type: undefined,
    };
    if (output["DisplayName"] !== undefined) {
        contents.DisplayName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["DisplayName"]);
    }
    if (output["EmailAddress"] !== undefined) {
        contents.EmailAddress = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["EmailAddress"]);
    }
    if (output["ID"] !== undefined) {
        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ID"]);
    }
    if (output["URI"] !== undefined) {
        contents.URI = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["URI"]);
    }
    if (output["xsi:type"] !== undefined) {
        contents.Type = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["xsi:type"]);
    }
    return contents;
};
const deserializeAws_restXmlGrants = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlGrant(entry, context);
    });
};
const deserializeAws_restXmlIndexDocument = (output, context) => {
    const contents = {
        Suffix: undefined,
    };
    if (output["Suffix"] !== undefined) {
        contents.Suffix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Suffix"]);
    }
    return contents;
};
const deserializeAws_restXmlInitiator = (output, context) => {
    const contents = {
        ID: undefined,
        DisplayName: undefined,
    };
    if (output["ID"] !== undefined) {
        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ID"]);
    }
    if (output["DisplayName"] !== undefined) {
        contents.DisplayName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["DisplayName"]);
    }
    return contents;
};
const deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {
    const contents = {
        Prefix: undefined,
        Tags: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Tag"]), context);
    }
    return contents;
};
const deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {
    const contents = {
        Id: undefined,
        Filter: undefined,
        Status: undefined,
        Tierings: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output["Filter"], context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    if (output.Tiering === "") {
        contents.Tierings = [];
    }
    else if (output["Tiering"] !== undefined) {
        contents.Tierings = deserializeAws_restXmlTieringList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Tiering"]), context);
    }
    return contents;
};
const deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);
    });
};
const deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {
    const contents = {
        Prefix: undefined,
        Tag: undefined,
        And: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output["Tag"] !== undefined) {
        contents.Tag = deserializeAws_restXmlTag(output["Tag"], context);
    }
    if (output["And"] !== undefined) {
        contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output["And"], context);
    }
    return contents;
};
const deserializeAws_restXmlInventoryConfiguration = (output, context) => {
    const contents = {
        Destination: undefined,
        IsEnabled: undefined,
        Filter: undefined,
        Id: undefined,
        IncludedObjectVersions: undefined,
        OptionalFields: undefined,
        Schedule: undefined,
    };
    if (output["Destination"] !== undefined) {
        contents.Destination = deserializeAws_restXmlInventoryDestination(output["Destination"], context);
    }
    if (output["IsEnabled"] !== undefined) {
        contents.IsEnabled = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["IsEnabled"]);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlInventoryFilter(output["Filter"], context);
    }
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output["IncludedObjectVersions"] !== undefined) {
        contents.IncludedObjectVersions = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["IncludedObjectVersions"]);
    }
    if (output.OptionalFields === "") {
        contents.OptionalFields = [];
    }
    else if (output["OptionalFields"] !== undefined && output["OptionalFields"]["Field"] !== undefined) {
        contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["OptionalFields"]["Field"]), context);
    }
    if (output["Schedule"] !== undefined) {
        contents.Schedule = deserializeAws_restXmlInventorySchedule(output["Schedule"], context);
    }
    return contents;
};
const deserializeAws_restXmlInventoryConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlInventoryConfiguration(entry, context);
    });
};
const deserializeAws_restXmlInventoryDestination = (output, context) => {
    const contents = {
        S3BucketDestination: undefined,
    };
    if (output["S3BucketDestination"] !== undefined) {
        contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output["S3BucketDestination"], context);
    }
    return contents;
};
const deserializeAws_restXmlInventoryEncryption = (output, context) => {
    const contents = {
        SSES3: undefined,
        SSEKMS: undefined,
    };
    if (output["SSE-S3"] !== undefined) {
        contents.SSES3 = deserializeAws_restXmlSSES3(output["SSE-S3"], context);
    }
    if (output["SSE-KMS"] !== undefined) {
        contents.SSEKMS = deserializeAws_restXmlSSEKMS(output["SSE-KMS"], context);
    }
    return contents;
};
const deserializeAws_restXmlInventoryFilter = (output, context) => {
    const contents = {
        Prefix: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    return contents;
};
const deserializeAws_restXmlInventoryOptionalFields = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);
    });
};
const deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {
    const contents = {
        AccountId: undefined,
        Bucket: undefined,
        Format: undefined,
        Prefix: undefined,
        Encryption: undefined,
    };
    if (output["AccountId"] !== undefined) {
        contents.AccountId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["AccountId"]);
    }
    if (output["Bucket"] !== undefined) {
        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Bucket"]);
    }
    if (output["Format"] !== undefined) {
        contents.Format = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Format"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output["Encryption"] !== undefined) {
        contents.Encryption = deserializeAws_restXmlInventoryEncryption(output["Encryption"], context);
    }
    return contents;
};
const deserializeAws_restXmlInventorySchedule = (output, context) => {
    const contents = {
        Frequency: undefined,
    };
    if (output["Frequency"] !== undefined) {
        contents.Frequency = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Frequency"]);
    }
    return contents;
};
const deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {
    const contents = {
        Id: undefined,
        LambdaFunctionArn: undefined,
        Events: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output["CloudFunction"] !== undefined) {
        contents.LambdaFunctionArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["CloudFunction"]);
    }
    if (output.Event === "") {
        contents.Events = [];
    }
    else if (output["Event"] !== undefined) {
        contents.Events = deserializeAws_restXmlEventList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Event"]), context);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    }
    return contents;
};
const deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);
    });
};
const deserializeAws_restXmlLifecycleExpiration = (output, context) => {
    const contents = {
        Date: undefined,
        Days: undefined,
        ExpiredObjectDeleteMarker: undefined,
    };
    if (output["Date"] !== undefined) {
        contents.Date = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["Date"]));
    }
    if (output["Days"] !== undefined) {
        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Days"]);
    }
    if (output["ExpiredObjectDeleteMarker"] !== undefined) {
        contents.ExpiredObjectDeleteMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["ExpiredObjectDeleteMarker"]);
    }
    return contents;
};
const deserializeAws_restXmlLifecycleRule = (output, context) => {
    const contents = {
        Expiration: undefined,
        ID: undefined,
        Prefix: undefined,
        Filter: undefined,
        Status: undefined,
        Transitions: undefined,
        NoncurrentVersionTransitions: undefined,
        NoncurrentVersionExpiration: undefined,
        AbortIncompleteMultipartUpload: undefined,
    };
    if (output["Expiration"] !== undefined) {
        contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output["Expiration"], context);
    }
    if (output["ID"] !== undefined) {
        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ID"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Filter === "") {
    }
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlLifecycleRuleFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output["Filter"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    if (output.Transition === "") {
        contents.Transitions = [];
    }
    else if (output["Transition"] !== undefined) {
        contents.Transitions = deserializeAws_restXmlTransitionList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Transition"]), context);
    }
    if (output.NoncurrentVersionTransition === "") {
        contents.NoncurrentVersionTransitions = [];
    }
    else if (output["NoncurrentVersionTransition"] !== undefined) {
        contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["NoncurrentVersionTransition"]), context);
    }
    if (output["NoncurrentVersionExpiration"] !== undefined) {
        contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
    }
    if (output["AbortIncompleteMultipartUpload"] !== undefined) {
        contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
    }
    return contents;
};
const deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {
    const contents = {
        Prefix: undefined,
        Tags: undefined,
        ObjectSizeGreaterThan: undefined,
        ObjectSizeLessThan: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Tag"]), context);
    }
    if (output["ObjectSizeGreaterThan"] !== undefined) {
        contents.ObjectSizeGreaterThan = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["ObjectSizeGreaterThan"]);
    }
    if (output["ObjectSizeLessThan"] !== undefined) {
        contents.ObjectSizeLessThan = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["ObjectSizeLessThan"]);
    }
    return contents;
};
const deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"], context),
        };
    }
    if (output["ObjectSizeGreaterThan"] !== undefined) {
        return {
            ObjectSizeGreaterThan: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["ObjectSizeGreaterThan"]),
        };
    }
    if (output["ObjectSizeLessThan"] !== undefined) {
        return {
            ObjectSizeLessThan: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["ObjectSizeLessThan"]),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlLifecycleRuleAndOperator(output["And"], context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_restXmlLifecycleRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlLifecycleRule(entry, context);
    });
};
const deserializeAws_restXmlLoggingEnabled = (output, context) => {
    const contents = {
        TargetBucket: undefined,
        TargetGrants: undefined,
        TargetPrefix: undefined,
    };
    if (output["TargetBucket"] !== undefined) {
        contents.TargetBucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["TargetBucket"]);
    }
    if (output.TargetGrants === "") {
        contents.TargetGrants = [];
    }
    else if (output["TargetGrants"] !== undefined && output["TargetGrants"]["Grant"] !== undefined) {
        contents.TargetGrants = deserializeAws_restXmlTargetGrants((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["TargetGrants"]["Grant"]), context);
    }
    if (output["TargetPrefix"] !== undefined) {
        contents.TargetPrefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["TargetPrefix"]);
    }
    return contents;
};
const deserializeAws_restXmlMetrics = (output, context) => {
    const contents = {
        Status: undefined,
        EventThreshold: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    if (output["EventThreshold"] !== undefined) {
        contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output["EventThreshold"], context);
    }
    return contents;
};
const deserializeAws_restXmlMetricsAndOperator = (output, context) => {
    const contents = {
        Prefix: undefined,
        Tags: undefined,
        AccessPointArn: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Tag"]), context);
    }
    if (output["AccessPointArn"] !== undefined) {
        contents.AccessPointArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["AccessPointArn"]);
    }
    return contents;
};
const deserializeAws_restXmlMetricsConfiguration = (output, context) => {
    const contents = {
        Id: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output.Filter === "") {
    }
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlMetricsFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output["Filter"]), context);
    }
    return contents;
};
const deserializeAws_restXmlMetricsConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlMetricsConfiguration(entry, context);
    });
};
const deserializeAws_restXmlMetricsFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"], context),
        };
    }
    if (output["AccessPointArn"] !== undefined) {
        return {
            AccessPointArn: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["AccessPointArn"]),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlMetricsAndOperator(output["And"], context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_restXmlMultipartUpload = (output, context) => {
    const contents = {
        UploadId: undefined,
        Key: undefined,
        Initiated: undefined,
        StorageClass: undefined,
        Owner: undefined,
        Initiator: undefined,
        ChecksumAlgorithm: undefined,
    };
    if (output["UploadId"] !== undefined) {
        contents.UploadId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["UploadId"]);
    }
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["Initiated"] !== undefined) {
        contents.Initiated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["Initiated"]));
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["StorageClass"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    if (output["Initiator"] !== undefined) {
        contents.Initiator = deserializeAws_restXmlInitiator(output["Initiator"], context);
    }
    if (output["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumAlgorithm"]);
    }
    return contents;
};
const deserializeAws_restXmlMultipartUploadList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlMultipartUpload(entry, context);
    });
};
const deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {
    const contents = {
        NoncurrentDays: undefined,
        NewerNoncurrentVersions: undefined,
    };
    if (output["NoncurrentDays"] !== undefined) {
        contents.NoncurrentDays = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["NoncurrentDays"]);
    }
    if (output["NewerNoncurrentVersions"] !== undefined) {
        contents.NewerNoncurrentVersions = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["NewerNoncurrentVersions"]);
    }
    return contents;
};
const deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {
    const contents = {
        NoncurrentDays: undefined,
        StorageClass: undefined,
        NewerNoncurrentVersions: undefined,
    };
    if (output["NoncurrentDays"] !== undefined) {
        contents.NoncurrentDays = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["NoncurrentDays"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["StorageClass"]);
    }
    if (output["NewerNoncurrentVersions"] !== undefined) {
        contents.NewerNoncurrentVersions = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["NewerNoncurrentVersions"]);
    }
    return contents;
};
const deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);
    });
};
const deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {
    const contents = {
        Key: undefined,
    };
    if (output["S3Key"] !== undefined) {
        contents.Key = deserializeAws_restXmlS3KeyFilter(output["S3Key"], context);
    }
    return contents;
};
const deserializeAws_restXml_Object = (output, context) => {
    const contents = {
        Key: undefined,
        LastModified: undefined,
        ETag: undefined,
        ChecksumAlgorithm: undefined,
        Size: undefined,
        StorageClass: undefined,
        Owner: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["LastModified"]));
    }
    if (output["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ETag"]);
    }
    if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
    }
    else if (output["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
    }
    if (output["Size"] !== undefined) {
        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["Size"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["StorageClass"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    return contents;
};
const deserializeAws_restXmlObjectList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXml_Object(entry, context);
    });
};
const deserializeAws_restXmlObjectLockConfiguration = (output, context) => {
    const contents = {
        ObjectLockEnabled: undefined,
        Rule: undefined,
    };
    if (output["ObjectLockEnabled"] !== undefined) {
        contents.ObjectLockEnabled = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ObjectLockEnabled"]);
    }
    if (output["Rule"] !== undefined) {
        contents.Rule = deserializeAws_restXmlObjectLockRule(output["Rule"], context);
    }
    return contents;
};
const deserializeAws_restXmlObjectLockLegalHold = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlObjectLockRetention = (output, context) => {
    const contents = {
        Mode: undefined,
        RetainUntilDate: undefined,
    };
    if (output["Mode"] !== undefined) {
        contents.Mode = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Mode"]);
    }
    if (output["RetainUntilDate"] !== undefined) {
        contents.RetainUntilDate = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["RetainUntilDate"]));
    }
    return contents;
};
const deserializeAws_restXmlObjectLockRule = (output, context) => {
    const contents = {
        DefaultRetention: undefined,
    };
    if (output["DefaultRetention"] !== undefined) {
        contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output["DefaultRetention"], context);
    }
    return contents;
};
const deserializeAws_restXmlObjectPart = (output, context) => {
    const contents = {
        PartNumber: undefined,
        Size: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["PartNumber"] !== undefined) {
        contents.PartNumber = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["PartNumber"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["Size"]);
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA256"]);
    }
    return contents;
};
const deserializeAws_restXmlObjectVersion = (output, context) => {
    const contents = {
        ETag: undefined,
        ChecksumAlgorithm: undefined,
        Size: undefined,
        StorageClass: undefined,
        Key: undefined,
        VersionId: undefined,
        IsLatest: undefined,
        LastModified: undefined,
        Owner: undefined,
    };
    if (output["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ETag"]);
    }
    if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
    }
    else if (output["ChecksumAlgorithm"] !== undefined) {
        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
    }
    if (output["Size"] !== undefined) {
        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["Size"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["StorageClass"]);
    }
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["VersionId"]);
    }
    if (output["IsLatest"] !== undefined) {
        contents.IsLatest = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["IsLatest"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["LastModified"]));
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    return contents;
};
const deserializeAws_restXmlObjectVersionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlObjectVersion(entry, context);
    });
};
const deserializeAws_restXmlOwner = (output, context) => {
    const contents = {
        DisplayName: undefined,
        ID: undefined,
    };
    if (output["DisplayName"] !== undefined) {
        contents.DisplayName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["DisplayName"]);
    }
    if (output["ID"] !== undefined) {
        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ID"]);
    }
    return contents;
};
const deserializeAws_restXmlOwnershipControls = (output, context) => {
    const contents = {
        Rules: undefined,
    };
    if (output.Rule === "") {
        contents.Rules = [];
    }
    else if (output["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlOwnershipControlsRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Rule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlOwnershipControlsRule = (output, context) => {
    const contents = {
        ObjectOwnership: undefined,
    };
    if (output["ObjectOwnership"] !== undefined) {
        contents.ObjectOwnership = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ObjectOwnership"]);
    }
    return contents;
};
const deserializeAws_restXmlOwnershipControlsRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlOwnershipControlsRule(entry, context);
    });
};
const deserializeAws_restXmlPart = (output, context) => {
    const contents = {
        PartNumber: undefined,
        LastModified: undefined,
        ETag: undefined,
        Size: undefined,
        ChecksumCRC32: undefined,
        ChecksumCRC32C: undefined,
        ChecksumSHA1: undefined,
        ChecksumSHA256: undefined,
    };
    if (output["PartNumber"] !== undefined) {
        contents.PartNumber = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["PartNumber"]);
    }
    if (output["LastModified"] !== undefined) {
        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["LastModified"]));
    }
    if (output["ETag"] !== undefined) {
        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ETag"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["Size"]);
    }
    if (output["ChecksumCRC32"] !== undefined) {
        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ChecksumSHA256"]);
    }
    return contents;
};
const deserializeAws_restXmlParts = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlPart(entry, context);
    });
};
const deserializeAws_restXmlPartsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlObjectPart(entry, context);
    });
};
const deserializeAws_restXmlPolicyStatus = (output, context) => {
    const contents = {
        IsPublic: undefined,
    };
    if (output["IsPublic"] !== undefined) {
        contents.IsPublic = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["IsPublic"]);
    }
    return contents;
};
const deserializeAws_restXmlProgress = (output, context) => {
    const contents = {
        BytesScanned: undefined,
        BytesProcessed: undefined,
        BytesReturned: undefined,
    };
    if (output["BytesScanned"] !== undefined) {
        contents.BytesScanned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["BytesScanned"]);
    }
    if (output["BytesProcessed"] !== undefined) {
        contents.BytesProcessed = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["BytesProcessed"]);
    }
    if (output["BytesReturned"] !== undefined) {
        contents.BytesReturned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["BytesReturned"]);
    }
    return contents;
};
const deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {
    const contents = {
        BlockPublicAcls: undefined,
        IgnorePublicAcls: undefined,
        BlockPublicPolicy: undefined,
        RestrictPublicBuckets: undefined,
    };
    if (output["BlockPublicAcls"] !== undefined) {
        contents.BlockPublicAcls = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["BlockPublicAcls"]);
    }
    if (output["IgnorePublicAcls"] !== undefined) {
        contents.IgnorePublicAcls = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["IgnorePublicAcls"]);
    }
    if (output["BlockPublicPolicy"] !== undefined) {
        contents.BlockPublicPolicy = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["BlockPublicPolicy"]);
    }
    if (output["RestrictPublicBuckets"] !== undefined) {
        contents.RestrictPublicBuckets = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["RestrictPublicBuckets"]);
    }
    return contents;
};
const deserializeAws_restXmlQueueConfiguration = (output, context) => {
    const contents = {
        Id: undefined,
        QueueArn: undefined,
        Events: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output["Queue"] !== undefined) {
        contents.QueueArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Queue"]);
    }
    if (output.Event === "") {
        contents.Events = [];
    }
    else if (output["Event"] !== undefined) {
        contents.Events = deserializeAws_restXmlEventList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Event"]), context);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    }
    return contents;
};
const deserializeAws_restXmlQueueConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlQueueConfiguration(entry, context);
    });
};
const deserializeAws_restXmlRedirect = (output, context) => {
    const contents = {
        HostName: undefined,
        HttpRedirectCode: undefined,
        Protocol: undefined,
        ReplaceKeyPrefixWith: undefined,
        ReplaceKeyWith: undefined,
    };
    if (output["HostName"] !== undefined) {
        contents.HostName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["HostName"]);
    }
    if (output["HttpRedirectCode"] !== undefined) {
        contents.HttpRedirectCode = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["HttpRedirectCode"]);
    }
    if (output["Protocol"] !== undefined) {
        contents.Protocol = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Protocol"]);
    }
    if (output["ReplaceKeyPrefixWith"] !== undefined) {
        contents.ReplaceKeyPrefixWith = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ReplaceKeyPrefixWith"]);
    }
    if (output["ReplaceKeyWith"] !== undefined) {
        contents.ReplaceKeyWith = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ReplaceKeyWith"]);
    }
    return contents;
};
const deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {
    const contents = {
        HostName: undefined,
        Protocol: undefined,
    };
    if (output["HostName"] !== undefined) {
        contents.HostName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["HostName"]);
    }
    if (output["Protocol"] !== undefined) {
        contents.Protocol = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Protocol"]);
    }
    return contents;
};
const deserializeAws_restXmlReplicaModifications = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlReplicationConfiguration = (output, context) => {
    const contents = {
        Role: undefined,
        Rules: undefined,
    };
    if (output["Role"] !== undefined) {
        contents.Role = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Role"]);
    }
    if (output.Rule === "") {
        contents.Rules = [];
    }
    else if (output["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlReplicationRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Rule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlReplicationRule = (output, context) => {
    const contents = {
        ID: undefined,
        Priority: undefined,
        Prefix: undefined,
        Filter: undefined,
        Status: undefined,
        SourceSelectionCriteria: undefined,
        ExistingObjectReplication: undefined,
        Destination: undefined,
        DeleteMarkerReplication: undefined,
    };
    if (output["ID"] !== undefined) {
        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["ID"]);
    }
    if (output["Priority"] !== undefined) {
        contents.Priority = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Priority"]);
    }
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Filter === "") {
    }
    else if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlReplicationRuleFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output["Filter"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    if (output["SourceSelectionCriteria"] !== undefined) {
        contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output["SourceSelectionCriteria"], context);
    }
    if (output["ExistingObjectReplication"] !== undefined) {
        contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output["ExistingObjectReplication"], context);
    }
    if (output["Destination"] !== undefined) {
        contents.Destination = deserializeAws_restXmlDestination(output["Destination"], context);
    }
    if (output["DeleteMarkerReplication"] !== undefined) {
        contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output["DeleteMarkerReplication"], context);
    }
    return contents;
};
const deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {
    const contents = {
        Prefix: undefined,
        Tags: undefined,
    };
    if (output["Prefix"] !== undefined) {
        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Tag"]), context);
    }
    return contents;
};
const deserializeAws_restXmlReplicationRuleFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
        return {
            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Prefix"]),
        };
    }
    if (output["Tag"] !== undefined) {
        return {
            Tag: deserializeAws_restXmlTag(output["Tag"], context),
        };
    }
    if (output["And"] !== undefined) {
        return {
            And: deserializeAws_restXmlReplicationRuleAndOperator(output["And"], context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_restXmlReplicationRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlReplicationRule(entry, context);
    });
};
const deserializeAws_restXmlReplicationTime = (output, context) => {
    const contents = {
        Status: undefined,
        Time: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    if (output["Time"] !== undefined) {
        contents.Time = deserializeAws_restXmlReplicationTimeValue(output["Time"], context);
    }
    return contents;
};
const deserializeAws_restXmlReplicationTimeValue = (output, context) => {
    const contents = {
        Minutes: undefined,
    };
    if (output["Minutes"] !== undefined) {
        contents.Minutes = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Minutes"]);
    }
    return contents;
};
const deserializeAws_restXmlRoutingRule = (output, context) => {
    const contents = {
        Condition: undefined,
        Redirect: undefined,
    };
    if (output["Condition"] !== undefined) {
        contents.Condition = deserializeAws_restXmlCondition(output["Condition"], context);
    }
    if (output["Redirect"] !== undefined) {
        contents.Redirect = deserializeAws_restXmlRedirect(output["Redirect"], context);
    }
    return contents;
};
const deserializeAws_restXmlRoutingRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlRoutingRule(entry, context);
    });
};
const deserializeAws_restXmlS3KeyFilter = (output, context) => {
    const contents = {
        FilterRules: undefined,
    };
    if (output.FilterRule === "") {
        contents.FilterRules = [];
    }
    else if (output["FilterRule"] !== undefined) {
        contents.FilterRules = deserializeAws_restXmlFilterRuleList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["FilterRule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {
    const contents = {
        SSEAlgorithm: undefined,
        KMSMasterKeyID: undefined,
    };
    if (output["SSEAlgorithm"] !== undefined) {
        contents.SSEAlgorithm = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["SSEAlgorithm"]);
    }
    if (output["KMSMasterKeyID"] !== undefined) {
        contents.KMSMasterKeyID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["KMSMasterKeyID"]);
    }
    return contents;
};
const deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {
    const contents = {
        Rules: undefined,
    };
    if (output.Rule === "") {
        contents.Rules = [];
    }
    else if (output["Rule"] !== undefined) {
        contents.Rules = deserializeAws_restXmlServerSideEncryptionRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Rule"]), context);
    }
    return contents;
};
const deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {
    const contents = {
        ApplyServerSideEncryptionByDefault: undefined,
        BucketKeyEnabled: undefined,
    };
    if (output["ApplyServerSideEncryptionByDefault"] !== undefined) {
        contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
    }
    if (output["BucketKeyEnabled"] !== undefined) {
        contents.BucketKeyEnabled = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output["BucketKeyEnabled"]);
    }
    return contents;
};
const deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlServerSideEncryptionRule(entry, context);
    });
};
const deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {
    const contents = {
        SseKmsEncryptedObjects: undefined,
        ReplicaModifications: undefined,
    };
    if (output["SseKmsEncryptedObjects"] !== undefined) {
        contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
    }
    if (output["ReplicaModifications"] !== undefined) {
        contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output["ReplicaModifications"], context);
    }
    return contents;
};
const deserializeAws_restXmlSSEKMS = (output, context) => {
    const contents = {
        KeyId: undefined,
    };
    if (output["KeyId"] !== undefined) {
        contents.KeyId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["KeyId"]);
    }
    return contents;
};
const deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_restXmlSSES3 = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_restXmlStats = (output, context) => {
    const contents = {
        BytesScanned: undefined,
        BytesProcessed: undefined,
        BytesReturned: undefined,
    };
    if (output["BytesScanned"] !== undefined) {
        contents.BytesScanned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["BytesScanned"]);
    }
    if (output["BytesProcessed"] !== undefined) {
        contents.BytesProcessed = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["BytesProcessed"]);
    }
    if (output["BytesReturned"] !== undefined) {
        contents.BytesReturned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output["BytesReturned"]);
    }
    return contents;
};
const deserializeAws_restXmlStorageClassAnalysis = (output, context) => {
    const contents = {
        DataExport: undefined,
    };
    if (output["DataExport"] !== undefined) {
        contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output["DataExport"], context);
    }
    return contents;
};
const deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {
    const contents = {
        OutputSchemaVersion: undefined,
        Destination: undefined,
    };
    if (output["OutputSchemaVersion"] !== undefined) {
        contents.OutputSchemaVersion = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["OutputSchemaVersion"]);
    }
    if (output["Destination"] !== undefined) {
        contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output["Destination"], context);
    }
    return contents;
};
const deserializeAws_restXmlTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlTagSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTag(entry, context);
    });
};
const deserializeAws_restXmlTargetGrant = (output, context) => {
    const contents = {
        Grantee: undefined,
        Permission: undefined,
    };
    if (output["Grantee"] !== undefined) {
        contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
    }
    if (output["Permission"] !== undefined) {
        contents.Permission = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Permission"]);
    }
    return contents;
};
const deserializeAws_restXmlTargetGrants = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTargetGrant(entry, context);
    });
};
const deserializeAws_restXmlTiering = (output, context) => {
    const contents = {
        Days: undefined,
        AccessTier: undefined,
    };
    if (output["Days"] !== undefined) {
        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Days"]);
    }
    if (output["AccessTier"] !== undefined) {
        contents.AccessTier = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["AccessTier"]);
    }
    return contents;
};
const deserializeAws_restXmlTieringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTiering(entry, context);
    });
};
const deserializeAws_restXmlTopicConfiguration = (output, context) => {
    const contents = {
        Id: undefined,
        TopicArn: undefined,
        Events: undefined,
        Filter: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Id"]);
    }
    if (output["Topic"] !== undefined) {
        contents.TopicArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["Topic"]);
    }
    if (output.Event === "") {
        contents.Events = [];
    }
    else if (output["Event"] !== undefined) {
        contents.Events = deserializeAws_restXmlEventList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output["Event"]), context);
    }
    if (output["Filter"] !== undefined) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    }
    return contents;
};
const deserializeAws_restXmlTopicConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTopicConfiguration(entry, context);
    });
};
const deserializeAws_restXmlTransition = (output, context) => {
    const contents = {
        Date: undefined,
        Days: undefined,
        StorageClass: undefined,
    };
    if (output["Date"] !== undefined) {
        contents.Date = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output["Date"]));
    }
    if (output["Days"] !== undefined) {
        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output["Days"]);
    }
    if (output["StorageClass"] !== undefined) {
        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output["StorageClass"]);
    }
    return contents;
};
const deserializeAws_restXmlTransitionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTransition(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__.XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const loadRestXmlErrorCode = (output, data) => {
    if (data.Code !== undefined) {
        return data.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRuntimeConfig": () => (/* binding */ getRuntimeConfig)
/* harmony export */ });
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../package.json */ "./node_modules/@aws-sdk/client-s3/package.json");
/* harmony import */ var _aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/sha1-browser */ "./node_modules/@aws-crypto/sha1-browser/build/index.js");
/* harmony import */ var _aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-crypto/sha256-browser */ "./node_modules/@aws-crypto/sha256-browser/build/index.js");
/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/config-resolver */ "./node_modules/@aws-sdk/config-resolver/dist-es/index.js");
/* harmony import */ var _aws_sdk_eventstream_serde_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/eventstream-serde-browser */ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/fetch-http-handler */ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js");
/* harmony import */ var _aws_sdk_hash_blob_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/hash-blob-browser */ "./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/invalid-dependency */ "./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js");
/* harmony import */ var _aws_sdk_md5_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/md5-js */ "./node_modules/@aws-sdk/md5-js/dist-es/index.js");
/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ "./node_modules/@aws-sdk/middleware-retry/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aws-sdk/util-body-length-browser */ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_stream_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @aws-sdk/util-stream-browser */ "./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-sdk/util-user-agent-browser */ "./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
/* harmony import */ var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./runtimeConfig.shared */ "./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_defaults_mode_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @aws-sdk/util-defaults-mode-browser */ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js");

















const getRuntimeConfig = (config) => {
    const defaultsMode = (0,_aws_sdk_util_defaults_mode_browser__WEBPACK_IMPORTED_MODULE_14__.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_13__.loadConfigsForDefaultMode);
    const clientSharedValues = (0,_runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_15__.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_9__.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ??
            (0,_aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_11__.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: _package_json__WEBPACK_IMPORTED_MODULE_16__.version }),
        eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? _aws_sdk_eventstream_serde_browser__WEBPACK_IMPORTED_MODULE_3__.eventStreamSerdeProvider,
        getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? _aws_sdk_util_stream_browser__WEBPACK_IMPORTED_MODULE_10__.getAwsChunkedEncodingStream,
        maxAttempts: config?.maxAttempts ?? _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MAX_ATTEMPTS,
        md5: config?.md5 ?? _aws_sdk_md5_js__WEBPACK_IMPORTED_MODULE_7__.Md5,
        region: config?.region ?? (0,_aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_6__.invalidProvider)("Region is missing"),
        requestHandler: config?.requestHandler ?? new _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_4__.FetchHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_RETRY_MODE),
        sdkStreamMixin: config?.sdkStreamMixin ?? _aws_sdk_util_stream_browser__WEBPACK_IMPORTED_MODULE_10__.sdkStreamMixin,
        sha1: config?.sha1 ?? _aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0__.Sha1,
        sha256: config?.sha256 ?? _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1__.Sha256,
        streamCollector: config?.streamCollector ?? _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_4__.streamCollector,
        streamHasher: config?.streamHasher ?? _aws_sdk_hash_blob_browser__WEBPACK_IMPORTED_MODULE_5__.blobHasher,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_USE_DUALSTACK_ENDPOINT)),
        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_USE_FIPS_ENDPOINT)),
        utf8Decoder: config?.utf8Decoder ?? _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_12__.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_12__.toUtf8,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRuntimeConfig": () => (/* binding */ getRuntimeConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_signature_v4_multi_region__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/signature-v4-multi-region */ "./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js");
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js");
/* harmony import */ var _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/url-parser */ "./node_modules/@aws-sdk/url-parser/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/util-base64 */ "./node_modules/@aws-sdk/util-base64/dist-es/index.js");
/* harmony import */ var _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./endpoint/endpointResolver */ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js");





const getRuntimeConfig = (config) => ({
    apiVersion: "2006-03-01",
    base64Decoder: config?.base64Decoder ?? _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_3__.fromBase64,
    base64Encoder: config?.base64Encoder ?? _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_3__.toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_4__.defaultEndpointResolver,
    logger: config?.logger ?? new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.NoOpLogger(),
    serviceId: config?.serviceId ?? "S3",
    signerConstructor: config?.signerConstructor ?? _aws_sdk_signature_v4_multi_region__WEBPACK_IMPORTED_MODULE_0__.SignatureV4MultiRegion,
    signingEscapePath: config?.signingEscapePath ?? false,
    urlParser: config?.urlParser ?? _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_2__.parseUrl,
    useArnRegion: config?.useArnRegion ?? false,
});


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waitForBucketExists": () => (/* reexport safe */ _waitForBucketExists__WEBPACK_IMPORTED_MODULE_0__.waitForBucketExists),
/* harmony export */   "waitForBucketNotExists": () => (/* reexport safe */ _waitForBucketNotExists__WEBPACK_IMPORTED_MODULE_1__.waitForBucketNotExists),
/* harmony export */   "waitForObjectExists": () => (/* reexport safe */ _waitForObjectExists__WEBPACK_IMPORTED_MODULE_2__.waitForObjectExists),
/* harmony export */   "waitForObjectNotExists": () => (/* reexport safe */ _waitForObjectNotExists__WEBPACK_IMPORTED_MODULE_3__.waitForObjectNotExists),
/* harmony export */   "waitUntilBucketExists": () => (/* reexport safe */ _waitForBucketExists__WEBPACK_IMPORTED_MODULE_0__.waitUntilBucketExists),
/* harmony export */   "waitUntilBucketNotExists": () => (/* reexport safe */ _waitForBucketNotExists__WEBPACK_IMPORTED_MODULE_1__.waitUntilBucketNotExists),
/* harmony export */   "waitUntilObjectExists": () => (/* reexport safe */ _waitForObjectExists__WEBPACK_IMPORTED_MODULE_2__.waitUntilObjectExists),
/* harmony export */   "waitUntilObjectNotExists": () => (/* reexport safe */ _waitForObjectNotExists__WEBPACK_IMPORTED_MODULE_3__.waitUntilObjectNotExists)
/* harmony export */ });
/* harmony import */ var _waitForBucketExists__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./waitForBucketExists */ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js");
/* harmony import */ var _waitForBucketNotExists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waitForBucketNotExists */ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js");
/* harmony import */ var _waitForObjectExists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./waitForObjectExists */ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js");
/* harmony import */ var _waitForObjectNotExists__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./waitForObjectNotExists */ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js");






/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waitForBucketExists": () => (/* binding */ waitForBucketExists),
/* harmony export */   "waitUntilBucketExists": () => (/* binding */ waitUntilBucketExists)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/index.js");
/* harmony import */ var _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js");


const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__.HeadBucketCommand(input));
        reason = result;
        return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };
        }
    }
    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };
};
const waitForBucketExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilBucketExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waitForBucketNotExists": () => (/* binding */ waitForBucketNotExists),
/* harmony export */   "waitUntilBucketNotExists": () => (/* binding */ waitUntilBucketNotExists)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/index.js");
/* harmony import */ var _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadBucketCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js");


const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__.HeadBucketCommand(input));
        reason = result;
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };
        }
    }
    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };
};
const waitForBucketNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilBucketNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waitForObjectExists": () => (/* binding */ waitForObjectExists),
/* harmony export */   "waitUntilObjectExists": () => (/* binding */ waitUntilObjectExists)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/index.js");
/* harmony import */ var _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js");


const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__.HeadObjectCommand(input));
        reason = result;
        return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };
        }
    }
    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };
};
const waitForObjectExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilObjectExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waitForObjectNotExists": () => (/* binding */ waitForObjectNotExists),
/* harmony export */   "waitUntilObjectNotExists": () => (/* binding */ waitUntilObjectNotExists)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/index.js");
/* harmony import */ var _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadObjectCommand */ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js");


const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__.HeadObjectCommand(input));
        reason = result;
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };
        }
    }
    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };
};
const waitForObjectNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilObjectNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONFIG_USE_DUALSTACK_ENDPOINT": () => (/* binding */ CONFIG_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "DEFAULT_USE_DUALSTACK_ENDPOINT": () => (/* binding */ DEFAULT_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "ENV_USE_DUALSTACK_ENDPOINT": () => (/* binding */ ENV_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS": () => (/* binding */ NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ "./node_modules/@aws-sdk/util-config-provider/dist-es/index.js");

const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),
    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),
    default: false,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONFIG_USE_FIPS_ENDPOINT": () => (/* binding */ CONFIG_USE_FIPS_ENDPOINT),
/* harmony export */   "DEFAULT_USE_FIPS_ENDPOINT": () => (/* binding */ DEFAULT_USE_FIPS_ENDPOINT),
/* harmony export */   "ENV_USE_FIPS_ENDPOINT": () => (/* binding */ ENV_USE_FIPS_ENDPOINT),
/* harmony export */   "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS": () => (/* binding */ NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ "./node_modules/@aws-sdk/util-config-provider/dist-es/index.js");

const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),
    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),
    default: false,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONFIG_USE_DUALSTACK_ENDPOINT": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.CONFIG_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "CONFIG_USE_FIPS_ENDPOINT": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.CONFIG_USE_FIPS_ENDPOINT),
/* harmony export */   "DEFAULT_USE_DUALSTACK_ENDPOINT": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "DEFAULT_USE_FIPS_ENDPOINT": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_USE_FIPS_ENDPOINT),
/* harmony export */   "ENV_USE_DUALSTACK_ENDPOINT": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.ENV_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "ENV_USE_FIPS_ENDPOINT": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.ENV_USE_FIPS_ENDPOINT),
/* harmony export */   "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
/* harmony export */   "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
/* harmony export */   "resolveCustomEndpointsConfig": () => (/* reexport safe */ _resolveCustomEndpointsConfig__WEBPACK_IMPORTED_MODULE_2__.resolveCustomEndpointsConfig),
/* harmony export */   "resolveEndpointsConfig": () => (/* reexport safe */ _resolveEndpointsConfig__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointsConfig)
/* harmony export */ });
/* harmony import */ var _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeUseDualstackEndpointConfigOptions */ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js");
/* harmony import */ var _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NodeUseFipsEndpointConfigOptions */ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js");
/* harmony import */ var _resolveCustomEndpointsConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveCustomEndpointsConfig */ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js");
/* harmony import */ var _resolveEndpointsConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpointsConfig */ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js");






/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveCustomEndpointsConfig": () => (/* binding */ resolveCustomEndpointsConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js");

const resolveCustomEndpointsConfig = (input) => {
    const { endpoint, urlParser } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint),
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveEndpointsConfig": () => (/* binding */ resolveEndpointsConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js");
/* harmony import */ var _utils_getEndpointFromRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getEndpointFromRegion */ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js");


const resolveEndpointsConfig = (input) => {
    const useDualstackEndpoint = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint);
    const { endpoint, useFipsEndpoint, urlParser } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint
            ? (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint)
            : () => (0,_utils_getEndpointFromRegion__WEBPACK_IMPORTED_MODULE_1__.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointFromRegion": () => (/* binding */ getEndpointFromRegion)
/* harmony export */ });
const getEndpointFromRegion = async (input) => {
    const { tls = true } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
    }
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname } = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};
    if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
    }
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONFIG_USE_DUALSTACK_ENDPOINT": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.CONFIG_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "CONFIG_USE_FIPS_ENDPOINT": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.CONFIG_USE_FIPS_ENDPOINT),
/* harmony export */   "DEFAULT_USE_DUALSTACK_ENDPOINT": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "DEFAULT_USE_FIPS_ENDPOINT": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USE_FIPS_ENDPOINT),
/* harmony export */   "ENV_USE_DUALSTACK_ENDPOINT": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.ENV_USE_DUALSTACK_ENDPOINT),
/* harmony export */   "ENV_USE_FIPS_ENDPOINT": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.ENV_USE_FIPS_ENDPOINT),
/* harmony export */   "NODE_REGION_CONFIG_FILE_OPTIONS": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_FILE_OPTIONS),
/* harmony export */   "NODE_REGION_CONFIG_OPTIONS": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_OPTIONS),
/* harmony export */   "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
/* harmony export */   "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
/* harmony export */   "REGION_ENV_NAME": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.REGION_ENV_NAME),
/* harmony export */   "REGION_INI_NAME": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.REGION_INI_NAME),
/* harmony export */   "getRegionInfo": () => (/* reexport safe */ _regionInfo__WEBPACK_IMPORTED_MODULE_2__.getRegionInfo),
/* harmony export */   "resolveCustomEndpointsConfig": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.resolveCustomEndpointsConfig),
/* harmony export */   "resolveEndpointsConfig": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.resolveEndpointsConfig),
/* harmony export */   "resolveRegionConfig": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.resolveRegionConfig)
/* harmony export */ });
/* harmony import */ var _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpointsConfig */ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js");
/* harmony import */ var _regionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./regionConfig */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js");
/* harmony import */ var _regionInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regionInfo */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NODE_REGION_CONFIG_FILE_OPTIONS": () => (/* binding */ NODE_REGION_CONFIG_FILE_OPTIONS),
/* harmony export */   "NODE_REGION_CONFIG_OPTIONS": () => (/* binding */ NODE_REGION_CONFIG_OPTIONS),
/* harmony export */   "REGION_ENV_NAME": () => (/* binding */ REGION_ENV_NAME),
/* harmony export */   "REGION_INI_NAME": () => (/* binding */ REGION_INI_NAME)
/* harmony export */ });
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
        throw new Error("Region is missing");
    },
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials",
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRealRegion": () => (/* binding */ getRealRegion)
/* harmony export */ });
/* harmony import */ var _isFipsRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFipsRegion */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js");

const getRealRegion = (region) => (0,_isFipsRegion__WEBPACK_IMPORTED_MODULE_0__.isFipsRegion)(region)
    ? ["fips-aws-global", "aws-fips"].includes(region)
        ? "us-east-1"
        : region.replace(/fips-(dkr-|prod-)?|-fips/, "")
    : region;


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NODE_REGION_CONFIG_FILE_OPTIONS": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_FILE_OPTIONS),
/* harmony export */   "NODE_REGION_CONFIG_OPTIONS": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_OPTIONS),
/* harmony export */   "REGION_ENV_NAME": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.REGION_ENV_NAME),
/* harmony export */   "REGION_INI_NAME": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.REGION_INI_NAME),
/* harmony export */   "resolveRegionConfig": () => (/* reexport safe */ _resolveRegionConfig__WEBPACK_IMPORTED_MODULE_1__.resolveRegionConfig)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js");
/* harmony import */ var _resolveRegionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveRegionConfig */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFipsRegion": () => (/* binding */ isFipsRegion)
/* harmony export */ });
const isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveRegionConfig": () => (/* binding */ resolveRegionConfig)
/* harmony export */ });
/* harmony import */ var _getRealRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getRealRegion */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js");
/* harmony import */ var _isFipsRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFipsRegion */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js");


const resolveRegionConfig = (input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
        throw new Error("Region is missing");
    }
    return {
        ...input,
        region: async () => {
            if (typeof region === "string") {
                return (0,_getRealRegion__WEBPACK_IMPORTED_MODULE_0__.getRealRegion)(region);
            }
            const providedRegion = await region();
            return (0,_getRealRegion__WEBPACK_IMPORTED_MODULE_0__.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
            const providedRegion = typeof region === "string" ? region : await region();
            if ((0,_isFipsRegion__WEBPACK_IMPORTED_MODULE_1__.isFipsRegion)(providedRegion)) {
                return true;
            }
            return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        },
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getHostnameFromVariants": () => (/* binding */ getHostnameFromVariants)
/* harmony export */ });
const getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))?.hostname;


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRegionInfo": () => (/* binding */ getRegionInfo)
/* harmony export */ });
/* harmony import */ var _getHostnameFromVariants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getHostnameFromVariants */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js");
/* harmony import */ var _getResolvedHostname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getResolvedHostname */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js");
/* harmony import */ var _getResolvedPartition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getResolvedPartition */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js");
/* harmony import */ var _getResolvedSigningRegion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getResolvedSigningRegion */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js");




const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {
    const partition = (0,_getResolvedPartition__WEBPACK_IMPORTED_MODULE_2__.getResolvedPartition)(region, { partitionHash });
    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
    const regionHostname = (0,_getHostnameFromVariants__WEBPACK_IMPORTED_MODULE_0__.getHostnameFromVariants)(regionHash[resolvedRegion]?.variants, hostnameOptions);
    const partitionHostname = (0,_getHostnameFromVariants__WEBPACK_IMPORTED_MODULE_0__.getHostnameFromVariants)(partitionHash[partition]?.variants, hostnameOptions);
    const hostname = (0,_getResolvedHostname__WEBPACK_IMPORTED_MODULE_1__.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
    if (hostname === undefined) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
    }
    const signingRegion = (0,_getResolvedSigningRegion__WEBPACK_IMPORTED_MODULE_3__.getResolvedSigningRegion)(hostname, {
        signingRegion: regionHash[resolvedRegion]?.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
    });
    return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(regionHash[resolvedRegion]?.signingService && {
            signingService: regionHash[resolvedRegion].signingService,
        }),
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getResolvedHostname": () => (/* binding */ getResolvedHostname)
/* harmony export */ });
const getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname
    ? regionHostname
    : partitionHostname
        ? partitionHostname.replace("{region}", resolvedRegion)
        : undefined;


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getResolvedPartition": () => (/* binding */ getResolvedPartition)
/* harmony export */ });
const getResolvedPartition = (region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws";


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getResolvedSigningRegion": () => (/* binding */ getResolvedSigningRegion)
/* harmony export */ });
const getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
    if (signingRegion) {
        return signingRegion;
    }
    else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
            return regionRegexmatchArray[0].slice(1, -1);
        }
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRegionInfo": () => (/* reexport safe */ _getRegionInfo__WEBPACK_IMPORTED_MODULE_2__.getRegionInfo)
/* harmony export */ });
/* harmony import */ var _PartitionHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PartitionHash */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js");
/* harmony import */ var _RegionHash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RegionHash */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js");
/* harmony import */ var _getRegionInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getRegionInfo */ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InMemoryStorage": () => (/* binding */ InMemoryStorage)
/* harmony export */ });
class InMemoryStorage {
    constructor(store = {}) {
        this.store = store;
    }
    getItem(key) {
        if (key in this.store) {
            return this.store[key];
        }
        return null;
    }
    removeItem(key) {
        delete this.store[key];
    }
    setItem(key, value) {
        this.store[key] = value;
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IndexedDbStorage": () => (/* binding */ IndexedDbStorage)
/* harmony export */ });
const STORE_NAME = "IdentityIds";
class IndexedDbStorage {
    constructor(dbName = "aws:cognito-identity-ids") {
        this.dbName = dbName;
    }
    getItem(key) {
        return this.withObjectStore("readonly", (store) => {
            const req = store.get(key);
            return new Promise((resolve) => {
                req.onerror = () => resolve(null);
                req.onsuccess = () => resolve(req.result ? req.result.value : null);
            });
        }).catch(() => null);
    }
    removeItem(key) {
        return this.withObjectStore("readwrite", (store) => {
            const req = store.delete(key);
            return new Promise((resolve, reject) => {
                req.onerror = () => reject(req.error);
                req.onsuccess = () => resolve();
            });
        });
    }
    setItem(id, value) {
        return this.withObjectStore("readwrite", (store) => {
            const req = store.put({ id, value });
            return new Promise((resolve, reject) => {
                req.onerror = () => reject(req.error);
                req.onsuccess = () => resolve();
            });
        });
    }
    getDb() {
        const openDbRequest = self.indexedDB.open(this.dbName, 1);
        return new Promise((resolve, reject) => {
            openDbRequest.onsuccess = () => {
                resolve(openDbRequest.result);
            };
            openDbRequest.onerror = () => {
                reject(openDbRequest.error);
            };
            openDbRequest.onblocked = () => {
                reject(new Error("Unable to access DB"));
            };
            openDbRequest.onupgradeneeded = () => {
                const db = openDbRequest.result;
                db.onerror = () => {
                    reject(new Error("Failed to create object store"));
                };
                db.createObjectStore(STORE_NAME, { keyPath: "id" });
            };
        });
    }
    withObjectStore(mode, action) {
        return this.getDb().then((db) => {
            const tx = db.transaction(STORE_NAME, mode);
            tx.oncomplete = () => db.close();
            return new Promise((resolve, reject) => {
                tx.onerror = () => reject(tx.error);
                resolve(action(tx.objectStore(STORE_NAME)));
            }).catch((err) => {
                db.close();
                throw err;
            });
        });
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromCognitoIdentity": () => (/* binding */ fromCognitoIdentity)
/* harmony export */ });
/* harmony import */ var _aws_sdk_client_cognito_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js");
/* harmony import */ var _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/property-provider */ "./node_modules/@aws-sdk/property-provider/dist-es/index.js");
/* harmony import */ var _resolveLogins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveLogins */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js");



function fromCognitoIdentity(parameters) {
    return async () => {
        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(), Expiration, SecretKey = throwOnMissingSecretKey(), SessionToken, } = throwOnMissingCredentials(), } = await parameters.client.send(new _aws_sdk_client_cognito_identity__WEBPACK_IMPORTED_MODULE_1__.GetCredentialsForIdentityCommand({
            CustomRoleArn: parameters.customRoleArn,
            IdentityId: parameters.identityId,
            Logins: parameters.logins ? await (0,_resolveLogins__WEBPACK_IMPORTED_MODULE_2__.resolveLogins)(parameters.logins) : undefined,
        }));
        return {
            identityId: parameters.identityId,
            accessKeyId: AccessKeyId,
            secretAccessKey: SecretKey,
            sessionToken: SessionToken,
            expiration: Expiration,
        };
    };
}
function throwOnMissingAccessKeyId() {
    throw new _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError("Response from Amazon Cognito contained no secret key");
}


/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromCognitoIdentityPool": () => (/* binding */ fromCognitoIdentityPool)
/* harmony export */ });
/* harmony import */ var _aws_sdk_client_cognito_identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/client-cognito-identity */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js");
/* harmony import */ var _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/property-provider */ "./node_modules/@aws-sdk/property-provider/dist-es/index.js");
/* harmony import */ var _fromCognitoIdentity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromCognitoIdentity */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js");
/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localStorage */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js");
/* harmony import */ var _resolveLogins__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveLogins */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js");





function fromCognitoIdentityPool({ accountId, cache = (0,_localStorage__WEBPACK_IMPORTED_MODULE_1__.localStorage)(), client, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined, }) {
    const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;
    let provider = async () => {
        let identityId = cacheKey && (await cache.getItem(cacheKey));
        if (!identityId) {
            const { IdentityId = throwOnMissingId() } = await client.send(new _aws_sdk_client_cognito_identity__WEBPACK_IMPORTED_MODULE_2__.GetIdCommand({
                AccountId: accountId,
                IdentityPoolId: identityPoolId,
                Logins: logins ? await (0,_resolveLogins__WEBPACK_IMPORTED_MODULE_3__.resolveLogins)(logins) : undefined,
            }));
            identityId = IdentityId;
            if (cacheKey) {
                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });
            }
        }
        provider = (0,_fromCognitoIdentity__WEBPACK_IMPORTED_MODULE_4__.fromCognitoIdentity)({
            client,
            customRoleArn,
            logins,
            identityId,
        });
        return provider();
    };
    return () => provider().catch(async (err) => {
        if (cacheKey) {
            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });
        }
        throw err;
    });
}
function throwOnMissingId() {
    throw new _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError("Response from Amazon Cognito contained no identity ID");
}


/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromCognitoIdentity": () => (/* reexport safe */ _fromCognitoIdentity__WEBPACK_IMPORTED_MODULE_0__.fromCognitoIdentity),
/* harmony export */   "fromCognitoIdentityPool": () => (/* reexport safe */ _fromCognitoIdentityPool__WEBPACK_IMPORTED_MODULE_1__.fromCognitoIdentityPool)
/* harmony export */ });
/* harmony import */ var _fromCognitoIdentity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromCognitoIdentity */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js");
/* harmony import */ var _fromCognitoIdentityPool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromCognitoIdentityPool */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js");







/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "localStorage": () => (/* binding */ localStorage)
/* harmony export */ });
/* harmony import */ var _IndexedDbStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IndexedDbStorage */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js");
/* harmony import */ var _InMemoryStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InMemoryStorage */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js");


const inMemoryStorage = new _InMemoryStorage__WEBPACK_IMPORTED_MODULE_0__.InMemoryStorage();
function localStorage() {
    if (typeof self === "object" && self.indexedDB) {
        return new _IndexedDbStorage__WEBPACK_IMPORTED_MODULE_1__.IndexedDbStorage();
    }
    if (typeof window === "object" && window.localStorage) {
        return window.localStorage;
    }
    return inMemoryStorage;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveLogins": () => (/* binding */ resolveLogins)
/* harmony export */ });
function resolveLogins(logins) {
    return Promise.all(Object.keys(logins).reduce((arr, name) => {
        const tokenOrProvider = logins[name];
        if (typeof tokenOrProvider === "string") {
            arr.push([name, tokenOrProvider]);
        }
        else {
            arr.push(tokenOrProvider().then((token) => [name, token]));
        }
        return arr;
    }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins, [key, value]) => {
        logins[key] = value;
        return logins;
    }, {}));
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventStreamCodec": () => (/* binding */ EventStreamCodec)
/* harmony export */ });
/* harmony import */ var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */ "./node_modules/@aws-crypto/crc32/build/index.js");
/* harmony import */ var _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HeaderMarshaller */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js");
/* harmony import */ var _splitMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitMessage */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js");



class EventStreamCodec {
    constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__.HeaderMarshaller(toUtf8, fromUtf8);
    }
    encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
    }
    decode(message) {
        const { headers, body } = (0,_splitMessage__WEBPACK_IMPORTED_MODULE_2__.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
    }
    formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeaderMarshaller": () => (/* binding */ HeaderMarshaller)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js");
/* harmony import */ var _Int64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Int64 */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js");


class HeaderMarshaller {
    constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
    }
    format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
            const bytes = this.fromUtf8(headerName);
            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
            out.set(chunk, position);
            position += chunk.byteLength;
        }
        return out;
    }
    formatHeaderValue(header) {
        switch (header.type) {
            case "boolean":
                return Uint8Array.from([header.value ? 0 : 1]);
            case "byte":
                return Uint8Array.from([2, header.value]);
            case "short":
                const shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3);
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                const intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4);
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                const longBytes = new Uint8Array(9);
                longBytes[0] = 5;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6);
                binView.setUint16(1, header.value.byteLength, false);
                const binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                const utf8Bytes = this.fromUtf8(header.value);
                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7);
                strView.setUint16(1, utf8Bytes.byteLength, false);
                const strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                const tsBytes = new Uint8Array(9);
                tsBytes[0] = 8;
                tsBytes.set(_Int64__WEBPACK_IMPORTED_MODULE_1__.Int64.fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) {
                    throw new Error(`Invalid UUID received: ${header.value}`);
                }
                const uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9;
                uuidBytes.set((0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.fromHex)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    }
    parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
            const nameLength = headers.getUint8(position++);
            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
            position += nameLength;
            switch (headers.getUint8(position++)) {
                case 0:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: true,
                    };
                    break;
                case 1:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: false,
                    };
                    break;
                case 2:
                    out[name] = {
                        type: BYTE_TAG,
                        value: headers.getInt8(position++),
                    };
                    break;
                case 3:
                    out[name] = {
                        type: SHORT_TAG,
                        value: headers.getInt16(position, false),
                    };
                    position += 2;
                    break;
                case 4:
                    out[name] = {
                        type: INT_TAG,
                        value: headers.getInt32(position, false),
                    };
                    position += 4;
                    break;
                case 5:
                    out[name] = {
                        type: LONG_TAG,
                        value: new _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),
                    };
                    position += 8;
                    break;
                case 6:
                    const binaryLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: BINARY_TAG,
                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),
                    };
                    position += binaryLength;
                    break;
                case 7:
                    const stringLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: STRING_TAG,
                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),
                    };
                    position += stringLength;
                    break;
                case 8:
                    out[name] = {
                        type: TIMESTAMP_TAG,
                        value: new Date(new _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),
                    };
                    position += 8;
                    break;
                case 9:
                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                    position += 16;
                    out[name] = {
                        type: UUID_TAG,
                        value: `${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(0, 4))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(4, 6))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(6, 8))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(8, 10))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(10))}`,
                    };
                    break;
                default:
                    throw new Error(`Unrecognized header type tag`);
            }
        }
        return out;
    }
}
var HEADER_VALUE_TYPE;
(function (HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
const BOOLEAN_TAG = "boolean";
const BYTE_TAG = "byte";
const SHORT_TAG = "short";
const INT_TAG = "integer";
const LONG_TAG = "long";
const BINARY_TAG = "binary";
const STRING_TAG = "string";
const TIMESTAMP_TAG = "timestamp";
const UUID_TAG = "uuid";
const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Int64": () => (/* binding */ Int64)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js");

class Int64 {
    constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
            throw new Error("Int64 buffers must be exactly 8 bytes");
        }
    }
    static fromNumber(number) {
        if (number > 9223372036854776000 || number < -9223372036854776000) {
            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
            bytes[i] = remaining;
        }
        if (number < 0) {
            negate(bytes);
        }
        return new Int64(bytes);
    }
    valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 0b10000000;
        if (negative) {
            negate(bytes);
        }
        return parseInt((0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
        return String(this.valueOf());
    }
}
function negate(bytes) {
    for (let i = 0; i < 8; i++) {
        bytes[i] ^= 0xff;
    }
    for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
            break;
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventStreamCodec": () => (/* reexport safe */ _EventStreamCodec__WEBPACK_IMPORTED_MODULE_0__.EventStreamCodec),
/* harmony export */   "Int64": () => (/* reexport safe */ _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64)
/* harmony export */ });
/* harmony import */ var _EventStreamCodec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamCodec */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js");
/* harmony import */ var _Int64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Int64 */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js");
/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Message */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitMessage": () => (/* binding */ splitMessage)
/* harmony export */ });
/* harmony import */ var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */ "./node_modules/@aws-crypto/crc32/build/index.js");

const PRELUDE_MEMBER_LENGTH = 4;
const PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
const CHECKSUM_LENGTH = 4;
const MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage({ byteLength, byteOffset, buffer }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
    }
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
    }
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    }
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    }
    return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventStreamMarshaller": () => (/* binding */ EventStreamMarshaller)
/* harmony export */ });
/* harmony import */ var _aws_sdk_eventstream_serde_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/eventstream-serde-universal */ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js");


class EventStreamMarshaller {
    constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new _aws_sdk_eventstream_serde_universal__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller({
            utf8Decoder,
            utf8Encoder,
        });
    }
    deserialize(body, deserializer) {
        const bodyIterable = isReadableStream(body) ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.readableStreamtoIterable)(body) : body;
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    serialize(input, serializer) {
        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
        return typeof ReadableStream === "function" ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.iterableToReadableStream)(serialziedIterable) : serialziedIterable;
    }
}
const isReadableStream = (body) => typeof ReadableStream === "function" && body instanceof ReadableStream;


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventStreamMarshaller": () => (/* reexport safe */ _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller),
/* harmony export */   "eventStreamSerdeProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_1__.eventStreamSerdeProvider),
/* harmony export */   "iterableToReadableStream": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.iterableToReadableStream),
/* harmony export */   "readableStreamtoIterable": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.readableStreamtoIterable)
/* harmony export */ });
/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider */ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eventStreamSerdeProvider": () => (/* binding */ eventStreamSerdeProvider)
/* harmony export */ });
/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js");

const eventStreamSerdeProvider = (options) => new _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller(options);


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iterableToReadableStream": () => (/* binding */ iterableToReadableStream),
/* harmony export */   "readableStreamtoIterable": () => (/* binding */ readableStreamtoIterable)
/* harmony export */ });
const readableStreamtoIterable = (readableStream) => ({
    [Symbol.asyncIterator]: async function* () {
        const reader = readableStream.getReader();
        try {
            while (true) {
                const { done, value } = await reader.read();
                if (done)
                    return;
                yield value;
            }
        }
        finally {
            reader.releaseLock();
        }
    },
});
const iterableToReadableStream = (asyncIterable) => {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    return new ReadableStream({
        async pull(controller) {
            const { done, value } = await iterator.next();
            if (done) {
                return controller.close();
            }
            controller.enqueue(value);
        },
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveEventStreamSerdeConfig": () => (/* binding */ resolveEventStreamSerdeConfig)
/* harmony export */ });
const resolveEventStreamSerdeConfig = (input) => ({
    ...input,
    eventStreamMarshaller: input.eventStreamSerdeProvider(input),
});


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveEventStreamSerdeConfig": () => (/* reexport safe */ _EventStreamSerdeConfig__WEBPACK_IMPORTED_MODULE_0__.resolveEventStreamSerdeConfig)
/* harmony export */ });
/* harmony import */ var _EventStreamSerdeConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamSerdeConfig */ "./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventStreamMarshaller": () => (/* binding */ EventStreamMarshaller)
/* harmony export */ });
/* harmony import */ var _aws_sdk_eventstream_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/eventstream-codec */ "./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js");
/* harmony import */ var _getChunkedStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getChunkedStream */ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js");
/* harmony import */ var _getUnmarshalledStream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getUnmarshalledStream */ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js");



class EventStreamMarshaller {
    constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new _aws_sdk_eventstream_codec__WEBPACK_IMPORTED_MODULE_0__.EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
        const chunkedStream = (0,_getChunkedStream__WEBPACK_IMPORTED_MODULE_1__.getChunkedStream)(body);
        const unmarshalledStream = (0,_getUnmarshalledStream__WEBPACK_IMPORTED_MODULE_2__.getUnmarshalledStream)(chunkedStream, {
            eventStreamCodec: this.eventStreamCodec,
            deserializer,
            toUtf8: this.utfEncoder,
        });
        return unmarshalledStream;
    }
    serialize(input, serializer) {
        const self = this;
        const serializedIterator = async function* () {
            for await (const chunk of input) {
                const payloadBuf = self.eventStreamCodec.encode(serializer(chunk));
                yield payloadBuf;
            }
            yield new Uint8Array(0);
        };
        return {
            [Symbol.asyncIterator]: serializedIterator,
        };
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChunkedStream": () => (/* binding */ getChunkedStream)
/* harmony export */ });
function getChunkedStream(source) {
    let currentMessageTotalLength = 0;
    let currentMessagePendingLength = 0;
    let currentMessage = null;
    let messageLengthBuffer = null;
    const allocateMessage = (size) => {
        if (typeof size !== "number") {
            throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        }
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
    };
    const iterator = async function* () {
        const sourceIterator = source[Symbol.asyncIterator]();
        while (true) {
            const { value, done } = await sourceIterator.next();
            if (done) {
                if (!currentMessageTotalLength) {
                    return;
                }
                else if (currentMessageTotalLength === currentMessagePendingLength) {
                    yield currentMessage;
                }
                else {
                    throw new Error("Truncated event message received.");
                }
                return;
            }
            const chunkLength = value.length;
            let currentOffset = 0;
            while (currentOffset < chunkLength) {
                if (!currentMessage) {
                    const bytesRemaining = chunkLength - currentOffset;
                    if (!messageLengthBuffer) {
                        messageLengthBuffer = new Uint8Array(4);
                    }
                    const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
                    messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
                    currentMessagePendingLength += numBytesForTotal;
                    currentOffset += numBytesForTotal;
                    if (currentMessagePendingLength < 4) {
                        break;
                    }
                    allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
                    messageLengthBuffer = null;
                }
                const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
                currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
                currentMessagePendingLength += numBytesToWrite;
                currentOffset += numBytesToWrite;
                if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
                    yield currentMessage;
                    currentMessage = null;
                    currentMessageTotalLength = 0;
                    currentMessagePendingLength = 0;
                }
            }
        }
    };
    return {
        [Symbol.asyncIterator]: iterator,
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUnmarshalledStream": () => (/* binding */ getUnmarshalledStream)
/* harmony export */ });
function getUnmarshalledStream(source, options) {
    return {
        [Symbol.asyncIterator]: async function* () {
            for await (const chunk of source) {
                const message = options.eventStreamCodec.decode(chunk);
                const { value: messageType } = message.headers[":message-type"];
                if (messageType === "error") {
                    const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
                    unmodeledError.name = message.headers[":error-code"].value;
                    throw unmodeledError;
                }
                else if (messageType === "exception") {
                    const code = message.headers[":exception-type"].value;
                    const exception = { [code]: message };
                    const deserializedException = await options.deserializer(exception);
                    if (deserializedException.$unknown) {
                        const error = new Error(options.toUtf8(message.body));
                        error.name = code;
                        throw error;
                    }
                    throw deserializedException[code];
                }
                else if (messageType === "event") {
                    const event = {
                        [message.headers[":event-type"].value]: message,
                    };
                    const deserialized = await options.deserializer(event);
                    if (deserialized.$unknown)
                        continue;
                    yield deserialized;
                }
                else {
                    throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
                }
            }
        },
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventStreamMarshaller": () => (/* reexport safe */ _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller),
/* harmony export */   "eventStreamSerdeProvider": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_1__.eventStreamSerdeProvider)
/* harmony export */ });
/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js");
/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider */ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eventStreamSerdeProvider": () => (/* binding */ eventStreamSerdeProvider)
/* harmony export */ });
/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js");

const eventStreamSerdeProvider = (options) => new _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller(options);


/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FetchHttpHandler": () => (/* binding */ FetchHttpHandler)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _aws_sdk_querystring_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/querystring-builder */ "./node_modules/@aws-sdk/querystring-builder/dist-es/index.js");
/* harmony import */ var _request_timeout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request-timeout */ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js");



class FetchHttpHandler {
    constructor(options) {
        if (typeof options === "function") {
            this.configProvider = options().then((opts) => opts || {});
        }
        else {
            this.config = options ?? {};
            this.configProvider = Promise.resolve(this.config);
        }
    }
    destroy() {
    }
    async handle(request, { abortSignal } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
        }
        const requestTimeoutInMs = this.config.requestTimeout;
        if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        let path = request.path;
        if (request.query) {
            const queryString = (0,_aws_sdk_querystring_builder__WEBPACK_IMPORTED_MODULE_1__.buildQueryString)(request.query);
            if (queryString) {
                path += `?${queryString}`;
            }
        }
        const { port, method } = request;
        const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? undefined : request.body;
        const requestOptions = {
            body,
            headers: new Headers(request.headers),
            method: method,
        };
        if (typeof AbortController !== "undefined") {
            requestOptions["signal"] = abortSignal;
        }
        const fetchRequest = new Request(url, requestOptions);
        const raceOfPromises = [
            fetch(fetchRequest).then((response) => {
                const fetchHeaders = response.headers;
                const transformedHeaders = {};
                for (const pair of fetchHeaders.entries()) {
                    transformedHeaders[pair[0]] = pair[1];
                }
                const hasReadableStream = response.body !== undefined;
                if (!hasReadableStream) {
                    return response.blob().then((body) => ({
                        response: new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse({
                            headers: transformedHeaders,
                            statusCode: response.status,
                            body,
                        }),
                    }));
                }
                return {
                    response: new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse({
                        headers: transformedHeaders,
                        statusCode: response.status,
                        body: response.body,
                    }),
                };
            }),
            (0,_request_timeout__WEBPACK_IMPORTED_MODULE_2__.requestTimeout)(requestTimeoutInMs),
        ];
        if (abortSignal) {
            raceOfPromises.push(new Promise((resolve, reject) => {
                abortSignal.onabort = () => {
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
            }));
        }
        return Promise.race(raceOfPromises);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FetchHttpHandler": () => (/* reexport safe */ _fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__.FetchHttpHandler),
/* harmony export */   "streamCollector": () => (/* reexport safe */ _stream_collector__WEBPACK_IMPORTED_MODULE_1__.streamCollector)
/* harmony export */ });
/* harmony import */ var _fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fetch-http-handler */ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js");
/* harmony import */ var _stream_collector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream-collector */ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "requestTimeout": () => (/* binding */ requestTimeout)
/* harmony export */ });
function requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject) => {
        if (timeoutInMs) {
            setTimeout(() => {
                const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
                timeoutError.name = "TimeoutError";
                reject(timeoutError);
            }, timeoutInMs);
        }
    });
}


/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "streamCollector": () => (/* binding */ streamCollector)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-base64 */ "./node_modules/@aws-sdk/util-base64/dist-es/index.js");

const streamCollector = (stream) => {
    if (typeof Blob === "function" && stream instanceof Blob) {
        return collectBlob(stream);
    }
    return collectStream(stream);
};
async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = (0,_aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_0__.fromBase64)(base64);
    return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
    let res = new Uint8Array(0);
    const reader = stream.getReader();
    let isDone = false;
    while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
            const prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
        }
        isDone = done;
    }
    return res;
}
function readToBase64(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            if (reader.readyState !== 2) {
                return reject(new Error("Reader aborted too early"));
            }
            const result = (reader.result ?? "");
            const commaIndex = result.indexOf(",");
            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error("Read aborted"));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
    });
}


/***/ }),

/***/ "./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blobHasher": () => (/* binding */ blobHasher)
/* harmony export */ });
/* harmony import */ var _aws_sdk_chunked_blob_reader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/chunked-blob-reader */ "./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js");

const blobHasher = async function blobHasher(hashCtor, blob) {
    const hash = new hashCtor();
    await (0,_aws_sdk_chunked_blob_reader__WEBPACK_IMPORTED_MODULE_0__.blobReader)(blob, (chunk) => {
        hash.update(chunk);
    });
    return hash.digest();
};


/***/ }),

/***/ "./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invalidFunction": () => (/* reexport safe */ _invalidFunction__WEBPACK_IMPORTED_MODULE_0__.invalidFunction),
/* harmony export */   "invalidProvider": () => (/* reexport safe */ _invalidProvider__WEBPACK_IMPORTED_MODULE_1__.invalidProvider)
/* harmony export */ });
/* harmony import */ var _invalidFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalidFunction */ "./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js");
/* harmony import */ var _invalidProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./invalidProvider */ "./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invalidFunction": () => (/* binding */ invalidFunction)
/* harmony export */ });
const invalidFunction = (message) => () => {
    throw new Error(message);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invalidProvider": () => (/* binding */ invalidProvider)
/* harmony export */ });
const invalidProvider = (message) => () => Promise.reject(message);


/***/ }),

/***/ "./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayBuffer": () => (/* binding */ isArrayBuffer)
/* harmony export */ });
const isArrayBuffer = (arg) => (typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer) ||
    Object.prototype.toString.call(arg) === "[object ArrayBuffer]";


/***/ }),

/***/ "./node_modules/@aws-sdk/md5-js/dist-es/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/md5-js/dist-es/constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BLOCK_SIZE": () => (/* binding */ BLOCK_SIZE),
/* harmony export */   "DIGEST_LENGTH": () => (/* binding */ DIGEST_LENGTH),
/* harmony export */   "INIT": () => (/* binding */ INIT)
/* harmony export */ });
const BLOCK_SIZE = 64;
const DIGEST_LENGTH = 16;
const INIT = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476];


/***/ }),

/***/ "./node_modules/@aws-sdk/md5-js/dist-es/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/md5-js/dist-es/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Md5": () => (/* binding */ Md5)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_utf8_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-utf8-node */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/md5-js/dist-es/constants.js");


class Md5 {
    constructor() {
        this.state = Uint32Array.from(_constants__WEBPACK_IMPORTED_MODULE_1__.INIT);
        this.buffer = new DataView(new ArrayBuffer(_constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE));
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
    }
    update(sourceData) {
        if (isEmptyData(sourceData)) {
            return;
        }
        else if (this.finished) {
            throw new Error("Attempted to update an already finished hash.");
        }
        const data = convertToBuffer(sourceData);
        let position = 0;
        let { byteLength } = data;
        this.bytesHashed += byteLength;
        while (byteLength > 0) {
            this.buffer.setUint8(this.bufferLength++, data[position++]);
            byteLength--;
            if (this.bufferLength === _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    }
    async digest() {
        if (!this.finished) {
            const { buffer, bufferLength: undecoratedLength, bytesHashed } = this;
            const bitsHashed = bytesHashed * 8;
            buffer.setUint8(this.bufferLength++, 0b10000000);
            if (undecoratedLength % _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE >= _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 8) {
                for (let i = this.bufferLength; i < _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE; i++) {
                    buffer.setUint8(i, 0);
                }
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for (let i = this.bufferLength; i < _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 8; i++) {
                buffer.setUint8(i, 0);
            }
            buffer.setUint32(_constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 8, bitsHashed >>> 0, true);
            buffer.setUint32(_constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);
            this.hashBuffer();
            this.finished = true;
        }
        const out = new DataView(new ArrayBuffer(_constants__WEBPACK_IMPORTED_MODULE_1__.DIGEST_LENGTH));
        for (let i = 0; i < 4; i++) {
            out.setUint32(i * 4, this.state[i], true);
        }
        return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);
    }
    hashBuffer() {
        const { buffer, state } = this;
        let a = state[0], b = state[1], c = state[2], d = state[3];
        a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
        d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
        c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
        b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
        a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
        d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
        c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
        b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
        a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
        d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
        c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
        b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
        a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
        d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
        c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
        b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
        a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
        d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
        c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
        b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
        a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
        d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
        c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
        b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
        a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
        d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
        c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
        b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
        a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
        d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
        c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
        b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
        a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
        d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
        c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
        b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
        a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
        d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
        c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
        b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
        a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
        d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
        c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
        b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
        a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
        d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
        c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
        b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
        a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
        d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
        c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
        b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
        a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
        d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
        c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
        b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
        a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
        d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
        c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
        b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
        a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
        d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
        c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
        b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
        state[0] = (a + state[0]) & 0xffffffff;
        state[1] = (b + state[1]) & 0xffffffff;
        state[2] = (c + state[2]) & 0xffffffff;
        state[3] = (d + state[3]) & 0xffffffff;
    }
}
function cmn(q, a, b, x, s, t) {
    a = (((a + q) & 0xffffffff) + ((x + t) & 0xffffffff)) & 0xffffffff;
    return (((a << s) | (a >>> (32 - s))) + b) & 0xffffffff;
}
function ff(a, b, c, d, x, s, t) {
    return cmn((b & c) | (~b & d), a, b, x, s, t);
}
function gg(a, b, c, d, x, s, t) {
    return cmn((b & d) | (c & ~d), a, b, x, s, t);
}
function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
}
function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | ~d), a, b, x, s, t);
}
function isEmptyData(data) {
    if (typeof data === "string") {
        return data.length === 0;
    }
    return data.byteLength === 0;
}
function convertToBuffer(data) {
    if (typeof data === "string") {
        return (0,_aws_sdk_util_utf8_node__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
}


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS": () => (/* binding */ NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS),
/* harmony export */   "NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME": () => (/* binding */ NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME),
/* harmony export */   "NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME": () => (/* binding */ NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ "./node_modules/@aws-sdk/util-config-provider/dist-es/index.js");

const NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
const NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";
const NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),
    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),
    default: false,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NODE_USE_ARN_REGION_CONFIG_OPTIONS": () => (/* binding */ NODE_USE_ARN_REGION_CONFIG_OPTIONS),
/* harmony export */   "NODE_USE_ARN_REGION_ENV_NAME": () => (/* binding */ NODE_USE_ARN_REGION_ENV_NAME),
/* harmony export */   "NODE_USE_ARN_REGION_INI_NAME": () => (/* binding */ NODE_USE_ARN_REGION_INI_NAME)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ "./node_modules/@aws-sdk/util-config-provider/dist-es/index.js");

const NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
const NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
const NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, NODE_USE_ARN_REGION_ENV_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),
    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, NODE_USE_ARN_REGION_INI_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),
    default: false,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bucketEndpointMiddleware": () => (/* binding */ bucketEndpointMiddleware),
/* harmony export */   "bucketEndpointMiddlewareOptions": () => (/* binding */ bucketEndpointMiddlewareOptions),
/* harmony export */   "getBucketEndpointPlugin": () => (/* binding */ getBucketEndpointPlugin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-arn-parser */ "./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js");
/* harmony import */ var _bucketHostname__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bucketHostname */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js");



const bucketEndpointMiddleware = (options) => (next, context) => async (args) => {
    const { Bucket: bucketName } = args.input;
    let replaceBucketInPath = options.bucketEndpoint;
    const request = args.request;
    if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
        if (options.bucketEndpoint) {
            request.hostname = bucketName;
        }
        else if ((0,_aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_1__.validate)(bucketName)) {
            const bucketArn = (0,_aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_1__.parse)(bucketName);
            const clientRegion = await options.region();
            const useDualstackEndpoint = await options.useDualstackEndpoint();
            const useFipsEndpoint = await options.useFipsEndpoint();
            const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint })) || {};
            const useArnRegion = await options.useArnRegion();
            const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService, } = (0,_bucketHostname__WEBPACK_IMPORTED_MODULE_2__.bucketHostname)({
                bucketName: bucketArn,
                baseHostname: request.hostname,
                accelerateEndpoint: options.useAccelerateEndpoint,
                dualstackEndpoint: useDualstackEndpoint,
                fipsEndpoint: useFipsEndpoint,
                pathStyleEndpoint: options.forcePathStyle,
                tlsCompatible: request.protocol === "https:",
                useArnRegion,
                clientPartition: partition,
                clientSigningRegion: signingRegion,
                clientRegion: clientRegion,
                isCustomEndpoint: options.isCustomEndpoint,
                disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints(),
            });
            if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
                context["signing_region"] = modifiedSigningRegion;
            }
            if (signingService && signingService !== "s3") {
                context["signing_service"] = signingService;
            }
            request.hostname = hostname;
            replaceBucketInPath = bucketEndpoint;
        }
        else {
            const clientRegion = await options.region();
            const dualstackEndpoint = await options.useDualstackEndpoint();
            const fipsEndpoint = await options.useFipsEndpoint();
            const { hostname, bucketEndpoint } = (0,_bucketHostname__WEBPACK_IMPORTED_MODULE_2__.bucketHostname)({
                bucketName,
                clientRegion,
                baseHostname: request.hostname,
                accelerateEndpoint: options.useAccelerateEndpoint,
                dualstackEndpoint,
                fipsEndpoint,
                pathStyleEndpoint: options.forcePathStyle,
                tlsCompatible: request.protocol === "https:",
                isCustomEndpoint: options.isCustomEndpoint,
            });
            request.hostname = hostname;
            replaceBucketInPath = bucketEndpoint;
        }
        if (replaceBucketInPath) {
            request.path = request.path.replace(/^(\/)?[^\/]+/, "");
            if (request.path === "") {
                request.path = "/";
            }
        }
    }
    return next({ ...args, request });
};
const bucketEndpointMiddlewareOptions = {
    tags: ["BUCKET_ENDPOINT"],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware",
    override: true,
};
const getBucketEndpointPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bucketHostname": () => (/* binding */ bucketHostname)
/* harmony export */ });
/* harmony import */ var _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bucketHostnameUtils */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js");

const bucketHostname = (options) => {
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateCustomEndpoint)(options);
    return (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.isBucketNameOptions)(options)
        ?
            getEndpointFromBucketName(options)
        :
            getEndpointFromArn(options);
};
const getEndpointFromBucketName = ({ accelerateEndpoint = false, clientRegion: region, baseHostname, bucketName, dualstackEndpoint = false, fipsEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true, isCustomEndpoint = false, }) => {
    const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.getSuffix)(baseHostname);
    if (pathStyleEndpoint || !(0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.isDnsCompatibleBucketName)(bucketName) || (tlsCompatible && _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.DOT_PATTERN.test(bucketName))) {
        return {
            bucketEndpoint: false,
            hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,
        };
    }
    if (accelerateEndpoint) {
        baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
    }
    else if (dualstackEndpoint) {
        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
    }
    return {
        bucketEndpoint: true,
        hostname: `${bucketName}.${baseHostname}`,
    };
};
const getEndpointFromArn = (options) => {
    const { isCustomEndpoint, baseHostname, clientRegion } = options;
    const hostnameSuffix = isCustomEndpoint ? baseHostname : (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.getSuffixForArnEndpoint)(baseHostname)[1];
    const { pathStyleEndpoint, accelerateEndpoint = false, fipsEndpoint = false, tlsCompatible = true, bucketName, clientPartition = "aws", } = options;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateArnEndpointOptions)({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
    const { service, partition, accountId, region, resource } = bucketName;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateService)(service);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validatePartition)(partition, { clientPartition });
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateAccountId)(accountId);
    const { accesspointName, outpostId } = (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.getArnResources)(resource);
    if (service === "s3-object-lambda") {
        return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });
    }
    if (region === "") {
        return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });
    }
    if (outpostId) {
        return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });
    }
    return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });
};
const getEndpointFromObjectLambdaArn = ({ dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, useArnRegion, clientRegion, clientSigningRegion = clientRegion, accesspointName, bucketName, hostnameSuffix, }) => {
    const { accountId, region, service } = bucketName;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegionalClient)(clientRegion);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegion)(region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint,
    });
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoDualstack)(dualstackEndpoint);
    const DNSHostLabel = `${accesspointName}-${accountId}`;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? region : clientRegion;
    const signingRegion = useArnRegion ? region : clientSigningRegion;
    return {
        bucketEndpoint: true,
        hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? "-fips" : ""}.${endpointRegion}.${hostnameSuffix}`,
        signingRegion,
        signingService: service,
    };
};
const getEndpointFromMRAPArn = ({ disableMultiregionAccessPoints, dualstackEndpoint = false, isCustomEndpoint, mrapAlias, hostnameSuffix, }) => {
    if (disableMultiregionAccessPoints === true) {
        throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
    }
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateMrapAlias)(mrapAlias);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoDualstack)(dualstackEndpoint);
    return {
        bucketEndpoint: true,
        hostname: `${mrapAlias}${isCustomEndpoint ? "" : `.accesspoint.s3-global`}.${hostnameSuffix}`,
        signingRegion: "*",
    };
};
const getEndpointFromOutpostArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, outpostId, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix, }) => {
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegionalClient)(clientRegion);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegion)(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
    const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateOutpostService)(bucketName.service);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(outpostId, { tlsCompatible });
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoDualstack)(dualstackEndpoint);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoFIPS)(fipsEndpoint);
    const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
    return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion,
        signingService: "s3-outposts",
    };
};
const getEndpointFromAccessPointArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix, }) => {
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegionalClient)(clientRegion);
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegion)(bucketName.region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint,
    });
    const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(hostnamePrefix, { tlsCompatible });
    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateS3Service)(bucketName.service);
    return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint
            ? ""
            : `.s3-accesspoint${fipsEndpoint ? "-fips" : ""}${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOT_PATTERN": () => (/* binding */ DOT_PATTERN),
/* harmony export */   "S3_HOSTNAME_PATTERN": () => (/* binding */ S3_HOSTNAME_PATTERN),
/* harmony export */   "getArnResources": () => (/* binding */ getArnResources),
/* harmony export */   "getSuffix": () => (/* binding */ getSuffix),
/* harmony export */   "getSuffixForArnEndpoint": () => (/* binding */ getSuffixForArnEndpoint),
/* harmony export */   "isBucketNameOptions": () => (/* binding */ isBucketNameOptions),
/* harmony export */   "isDnsCompatibleBucketName": () => (/* binding */ isDnsCompatibleBucketName),
/* harmony export */   "validateAccountId": () => (/* binding */ validateAccountId),
/* harmony export */   "validateArnEndpointOptions": () => (/* binding */ validateArnEndpointOptions),
/* harmony export */   "validateCustomEndpoint": () => (/* binding */ validateCustomEndpoint),
/* harmony export */   "validateDNSHostLabel": () => (/* binding */ validateDNSHostLabel),
/* harmony export */   "validateMrapAlias": () => (/* binding */ validateMrapAlias),
/* harmony export */   "validateNoDualstack": () => (/* binding */ validateNoDualstack),
/* harmony export */   "validateNoFIPS": () => (/* binding */ validateNoFIPS),
/* harmony export */   "validateOutpostService": () => (/* binding */ validateOutpostService),
/* harmony export */   "validatePartition": () => (/* binding */ validatePartition),
/* harmony export */   "validateRegion": () => (/* binding */ validateRegion),
/* harmony export */   "validateRegionalClient": () => (/* binding */ validateRegionalClient),
/* harmony export */   "validateS3Service": () => (/* binding */ validateS3Service),
/* harmony export */   "validateService": () => (/* binding */ validateService)
/* harmony export */ });
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
const AWS_PARTITION_SUFFIX = "amazonaws.com";
const isBucketNameOptions = (options) => typeof options.bucketName === "string";
const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const getRegionalSuffix = (hostname) => {
    const parts = hostname.match(S3_HOSTNAME_PATTERN);
    return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), "")];
};
const getSuffix = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
const getSuffixForArnEndpoint = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)
    ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX]
    : getRegionalSuffix(hostname);
const validateArnEndpointOptions = (options) => {
    if (options.pathStyleEndpoint) {
        throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
    }
    if (options.accelerateEndpoint) {
        throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
    }
    if (!options.tlsCompatible) {
        throw new Error("HTTPS is required when bucket is an ARN");
    }
};
const validateService = (service) => {
    if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
        throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
    }
};
const validateS3Service = (service) => {
    if (service !== "s3") {
        throw new Error("Expect 's3' in Accesspoint ARN service component");
    }
};
const validateOutpostService = (service) => {
    if (service !== "s3-outposts") {
        throw new Error("Expect 's3-posts' in Outpost ARN service component");
    }
};
const validatePartition = (partition, options) => {
    if (partition !== options.clientPartition) {
        throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
    }
};
const validateRegion = (region, options) => {
    if (region === "") {
        throw new Error("ARN region is empty");
    }
    if (options.useFipsEndpoint) {
        if (!options.allowFipsRegion) {
            throw new Error("FIPS region is not supported");
        }
        else if (!isEqualRegions(region, options.clientRegion)) {
            throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);
        }
    }
    if (!options.useArnRegion &&
        !isEqualRegions(region, options.clientRegion || "") &&
        !isEqualRegions(region, options.clientSigningRegion || "")) {
        throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
    }
};
const validateRegionalClient = (region) => {
    if (["s3-external-1", "aws-global"].includes(region)) {
        throw new Error(`Client region ${region} is not regional`);
    }
};
const isEqualRegions = (regionA, regionB) => regionA === regionB;
const validateAccountId = (accountId) => {
    if (!/[0-9]{12}/.exec(accountId)) {
        throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
    }
};
const validateDNSHostLabel = (label, options = { tlsCompatible: true }) => {
    if (label.length >= 64 ||
        !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) ||
        /(\d+\.){3}\d+/.test(label) ||
        /[.-]{2}/.test(label) ||
        (options?.tlsCompatible && DOT_PATTERN.test(label))) {
        throw new Error(`Invalid DNS label ${label}`);
    }
};
const validateCustomEndpoint = (options) => {
    if (options.isCustomEndpoint) {
        if (options.dualstackEndpoint)
            throw new Error("Dualstack endpoint is not supported with custom endpoint");
        if (options.accelerateEndpoint)
            throw new Error("Accelerate endpoint is not supported with custom endpoint");
    }
};
const getArnResources = (resource) => {
    const delimiter = resource.includes(":") ? ":" : "/";
    const [resourceType, ...rest] = resource.split(delimiter);
    if (resourceType === "accesspoint") {
        if (rest.length !== 1 || rest[0] === "") {
            throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
        }
        return { accesspointName: rest[0] };
    }
    else if (resourceType === "outpost") {
        if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
            throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);
        }
        const [outpostId, _, accesspointName] = rest;
        return { outpostId, accesspointName };
    }
    else {
        throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
    }
};
const validateNoDualstack = (dualstackEndpoint) => {
    if (dualstackEndpoint)
        throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
};
const validateNoFIPS = (useFipsEndpoint) => {
    if (useFipsEndpoint)
        throw new Error(`FIPS region is not supported with Outpost.`);
};
const validateMrapAlias = (name) => {
    try {
        name.split(".").forEach((label) => {
            validateDNSHostLabel(label);
        });
    }
    catch (e) {
        throw new Error(`"${name}" is not a DNS compatible name.`);
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveBucketEndpointConfig": () => (/* binding */ resolveBucketEndpointConfig)
/* harmony export */ });
function resolveBucketEndpointConfig(input) {
    const { bucketEndpoint = false, forcePathStyle = false, useAccelerateEndpoint = false, useArnRegion = false, disableMultiregionAccessPoints = false, } = input;
    return {
        ...input,
        bucketEndpoint,
        forcePathStyle,
        useAccelerateEndpoint,
        useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion),
        disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function"
            ? disableMultiregionAccessPoints
            : () => Promise.resolve(disableMultiregionAccessPoints),
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS": () => (/* reexport safe */ _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS),
/* harmony export */   "NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME": () => (/* reexport safe */ _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME),
/* harmony export */   "NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME": () => (/* reexport safe */ _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME),
/* harmony export */   "NODE_USE_ARN_REGION_CONFIG_OPTIONS": () => (/* reexport safe */ _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_ARN_REGION_CONFIG_OPTIONS),
/* harmony export */   "NODE_USE_ARN_REGION_ENV_NAME": () => (/* reexport safe */ _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_ARN_REGION_ENV_NAME),
/* harmony export */   "NODE_USE_ARN_REGION_INI_NAME": () => (/* reexport safe */ _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_ARN_REGION_INI_NAME),
/* harmony export */   "bucketEndpointMiddleware": () => (/* reexport safe */ _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__.bucketEndpointMiddleware),
/* harmony export */   "bucketEndpointMiddlewareOptions": () => (/* reexport safe */ _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__.bucketEndpointMiddlewareOptions),
/* harmony export */   "bucketHostname": () => (/* reexport safe */ _bucketHostname__WEBPACK_IMPORTED_MODULE_3__.bucketHostname),
/* harmony export */   "getArnResources": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.getArnResources),
/* harmony export */   "getBucketEndpointPlugin": () => (/* reexport safe */ _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__.getBucketEndpointPlugin),
/* harmony export */   "getSuffixForArnEndpoint": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.getSuffixForArnEndpoint),
/* harmony export */   "resolveBucketEndpointConfig": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.resolveBucketEndpointConfig),
/* harmony export */   "validateAccountId": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateAccountId),
/* harmony export */   "validateDNSHostLabel": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateDNSHostLabel),
/* harmony export */   "validateNoDualstack": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateNoDualstack),
/* harmony export */   "validateNoFIPS": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateNoFIPS),
/* harmony export */   "validateOutpostService": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateOutpostService),
/* harmony export */   "validatePartition": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validatePartition),
/* harmony export */   "validateRegion": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateRegion)
/* harmony export */ });
/* harmony import */ var _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeDisableMultiregionAccessPointConfigOptions */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js");
/* harmony import */ var _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NodeUseArnRegionConfigOptions */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js");
/* harmony import */ var _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bucketEndpointMiddleware */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js");
/* harmony import */ var _bucketHostname__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bucketHostname */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js");
/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./configurations */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js");
/* harmony import */ var _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bucketHostnameUtils */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js");








/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "contentLengthMiddleware": () => (/* binding */ contentLengthMiddleware),
/* harmony export */   "contentLengthMiddlewareOptions": () => (/* binding */ contentLengthMiddlewareOptions),
/* harmony export */   "getContentLengthPlugin": () => (/* binding */ getContentLengthPlugin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");

const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next) => async (args) => {
        const request = args.request;
        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
            const { body, headers } = request;
            if (body &&
                Object.keys(headers)
                    .map((str) => str.toLowerCase())
                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {
                try {
                    const length = bodyLengthChecker(body);
                    request.headers = {
                        ...request.headers,
                        [CONTENT_LENGTH_HEADER]: String(length),
                    };
                }
                catch (error) {
                }
            }
        }
        return next({
            ...args,
            request,
        });
    };
}
const contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware",
    override: true,
};
const getContentLengthPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConfigValueProvider": () => (/* binding */ createConfigValueProvider)
/* harmony export */ });
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
    const configProvider = async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
            return configValue();
        }
        return configValue;
    };
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
            const endpoint = await configProvider();
            if (endpoint && typeof endpoint === "object") {
                if ("url" in endpoint) {
                    return endpoint.url.href;
                }
                if ("hostname" in endpoint) {
                    const { protocol, hostname, port, path } = endpoint;
                    return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
                }
            }
            return endpoint;
        };
    }
    return configProvider;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointFromInstructions": () => (/* binding */ getEndpointFromInstructions),
/* harmony export */   "resolveParams": () => (/* binding */ resolveParams)
/* harmony export */ });
/* harmony import */ var _service_customizations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../service-customizations */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js");
/* harmony import */ var _createConfigValueProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createConfigValueProvider */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js");


const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
            case "staticContextParams":
                endpointParams[name] = instruction.value;
                break;
            case "contextParams":
                endpointParams[name] = commandInput[instruction.name];
                break;
            case "clientContextParams":
            case "builtInParams":
                endpointParams[name] = await (0,_createConfigValueProvider__WEBPACK_IMPORTED_MODULE_1__.createConfigValueProvider)(instruction.name, name, clientConfig)();
                break;
            default:
                throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
    }
    if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0,_service_customizations__WEBPACK_IMPORTED_MODULE_0__.resolveParamsForS3)(endpointParams);
    }
    return endpointParams;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointFromInstructions": () => (/* reexport safe */ _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromInstructions),
/* harmony export */   "resolveParams": () => (/* reexport safe */ _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__.resolveParams),
/* harmony export */   "toEndpointV1": () => (/* reexport safe */ _toEndpointV1__WEBPACK_IMPORTED_MODULE_1__.toEndpointV1)
/* harmony export */ });
/* harmony import */ var _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointFromInstructions */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js");
/* harmony import */ var _toEndpointV1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toEndpointV1 */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toEndpointV1": () => (/* binding */ toEndpointV1)
/* harmony export */ });
/* harmony import */ var _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/url-parser */ "./node_modules/@aws-sdk/url-parser/dist-es/index.js");

const toEndpointV1 = (endpoint) => {
    if (typeof endpoint === "object") {
        if ("url" in endpoint) {
            return (0,_aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(endpoint.url);
        }
        return endpoint;
    }
    return (0,_aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(endpoint);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endpointMiddleware": () => (/* binding */ endpointMiddleware)
/* harmony export */ });
/* harmony import */ var _adaptors_getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adaptors/getEndpointFromInstructions */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js");

const endpointMiddleware = ({ config, instructions, }) => {
    return (next, context) => async (args) => {
        const endpoint = await (0,_adaptors_getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromInstructions)(args.input, {
            getEndpointParameterInstructions() {
                return instructions;
            },
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
            context["signing_region"] = authScheme.signingRegion;
            context["signing_service"] = authScheme.signingName;
        }
        return next({
            ...args,
        });
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endpointMiddlewareOptions": () => (/* binding */ endpointMiddlewareOptions),
/* harmony export */   "getEndpointPlugin": () => (/* binding */ getEndpointPlugin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js");
/* harmony import */ var _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endpointMiddleware */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js");


const endpointMiddlewareOptions = {
    step: "serialize",
    tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__.serializerMiddlewareOption.name,
};
const getEndpointPlugin = (config, instructions) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0,_endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__.endpointMiddleware)({
            config,
            instructions,
        }), endpointMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endpointMiddleware": () => (/* reexport safe */ _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__.endpointMiddleware),
/* harmony export */   "endpointMiddlewareOptions": () => (/* reexport safe */ _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__.endpointMiddlewareOptions),
/* harmony export */   "getEndpointFromInstructions": () => (/* reexport safe */ _adaptors__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromInstructions),
/* harmony export */   "getEndpointPlugin": () => (/* reexport safe */ _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__.getEndpointPlugin),
/* harmony export */   "resolveEndpointConfig": () => (/* reexport safe */ _resolveEndpointConfig__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointConfig),
/* harmony export */   "resolveParams": () => (/* reexport safe */ _adaptors__WEBPACK_IMPORTED_MODULE_0__.resolveParams),
/* harmony export */   "toEndpointV1": () => (/* reexport safe */ _adaptors__WEBPACK_IMPORTED_MODULE_0__.toEndpointV1)
/* harmony export */ });
/* harmony import */ var _adaptors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adaptors */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js");
/* harmony import */ var _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endpointMiddleware */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js");
/* harmony import */ var _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointPlugin */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js");
/* harmony import */ var _resolveEndpointConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpointConfig */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js");







/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveEndpointConfig": () => (/* binding */ resolveEndpointConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js");
/* harmony import */ var _adaptors_toEndpointV1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adaptors/toEndpointV1 */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js");


const resolveEndpointConfig = (input) => {
    const tls = input.tls ?? true;
    const { endpoint } = input;
    const customEndpointProvider = endpoint != null ? async () => (0,_adaptors_toEndpointV1__WEBPACK_IMPORTED_MODULE_1__.toEndpointV1)(await (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useFipsEndpoint ?? false),
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOT_PATTERN": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.DOT_PATTERN),
/* harmony export */   "S3_HOSTNAME_PATTERN": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.S3_HOSTNAME_PATTERN),
/* harmony export */   "isArnBucketName": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.isArnBucketName),
/* harmony export */   "isDnsCompatibleBucketName": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.isDnsCompatibleBucketName),
/* harmony export */   "resolveParamsForS3": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.resolveParamsForS3)
/* harmony export */ });
/* harmony import */ var _s3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./s3 */ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOT_PATTERN": () => (/* binding */ DOT_PATTERN),
/* harmony export */   "S3_HOSTNAME_PATTERN": () => (/* binding */ S3_HOSTNAME_PATTERN),
/* harmony export */   "isArnBucketName": () => (/* binding */ isArnBucketName),
/* harmony export */   "isDnsCompatibleBucketName": () => (/* binding */ isDnsCompatibleBucketName),
/* harmony export */   "resolveParamsForS3": () => (/* binding */ resolveParamsForS3)
/* harmony export */ });
const resolveParamsForS3 = async (endpointParams) => {
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
            throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
    }
    else if (!isDnsCompatibleBucketName(bucket) ||
        (bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:")) ||
        bucket.toLowerCase() !== bucket ||
        bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const isArnBucketName = (bucketName) => {
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
    if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addExpectContinueMiddleware": () => (/* binding */ addExpectContinueMiddleware),
/* harmony export */   "addExpectContinueMiddlewareOptions": () => (/* binding */ addExpectContinueMiddlewareOptions),
/* harmony export */   "getAddExpectContinuePlugin": () => (/* binding */ getAddExpectContinuePlugin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");

function addExpectContinueMiddleware(options) {
    return (next) => async (args) => {
        const { request } = args;
        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
            request.headers = {
                ...request.headers,
                Expect: "100-continue",
            };
        }
        return next({
            ...args,
            request,
        });
    };
}
const addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
    name: "addExpectContinueMiddleware",
    override: true,
};
const getAddExpectContinuePlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChecksumAlgorithm": () => (/* binding */ ChecksumAlgorithm),
/* harmony export */   "ChecksumLocation": () => (/* binding */ ChecksumLocation)
/* harmony export */ });
var ChecksumAlgorithm;
(function (ChecksumAlgorithm) {
    ChecksumAlgorithm["MD5"] = "MD5";
    ChecksumAlgorithm["CRC32"] = "CRC32";
    ChecksumAlgorithm["CRC32C"] = "CRC32C";
    ChecksumAlgorithm["SHA1"] = "SHA1";
    ChecksumAlgorithm["SHA256"] = "SHA256";
})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
var ChecksumLocation;
(function (ChecksumLocation) {
    ChecksumLocation["HEADER"] = "header";
    ChecksumLocation["TRAILER"] = "trailer";
})(ChecksumLocation || (ChecksumLocation = {}));


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flexibleChecksumsMiddleware": () => (/* binding */ flexibleChecksumsMiddleware)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _getChecksumAlgorithmForRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getChecksumAlgorithmForRequest */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js");
/* harmony import */ var _getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getChecksumLocationName */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js");
/* harmony import */ var _hasHeader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hasHeader */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js");
/* harmony import */ var _isStreaming__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isStreaming */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js");
/* harmony import */ var _selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectChecksumAlgorithmFunction */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js");
/* harmony import */ var _stringHasher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stringHasher */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js");
/* harmony import */ var _validateChecksumFromResponse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validateChecksumFromResponse */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js");








const flexibleChecksumsMiddleware = (config, middlewareConfig) => (next) => async (args) => {
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request)) {
        return next(args);
    }
    const { request } = args;
    const { body: requestBody, headers } = request;
    const { base64Encoder, streamHasher } = config;
    const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
    const checksumAlgorithm = (0,_getChecksumAlgorithmForRequest__WEBPACK_IMPORTED_MODULE_1__.getChecksumAlgorithmForRequest)(input, {
        requestChecksumRequired,
        requestAlgorithmMember,
    });
    let updatedBody = requestBody;
    let updatedHeaders = headers;
    if (checksumAlgorithm) {
        const checksumLocationName = (0,_getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__.getChecksumLocationName)(checksumAlgorithm);
        const checksumAlgorithmFn = (0,_selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_5__.selectChecksumAlgorithmFunction)(checksumAlgorithm, config);
        if ((0,_isStreaming__WEBPACK_IMPORTED_MODULE_4__.isStreaming)(requestBody)) {
            const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;
            updatedBody = getAwsChunkedEncodingStream(requestBody, {
                base64Encoder,
                bodyLengthChecker,
                checksumLocationName,
                checksumAlgorithmFn,
                streamHasher,
            });
            updatedHeaders = {
                ...headers,
                "content-encoding": "aws-chunked",
                "transfer-encoding": "chunked",
                "x-amz-decoded-content-length": headers["content-length"],
                "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
                "x-amz-trailer": checksumLocationName,
            };
            delete updatedHeaders["content-length"];
        }
        else if (!(0,_hasHeader__WEBPACK_IMPORTED_MODULE_3__.hasHeader)(checksumLocationName, headers)) {
            const rawChecksum = await (0,_stringHasher__WEBPACK_IMPORTED_MODULE_6__.stringHasher)(checksumAlgorithmFn, requestBody);
            updatedHeaders = {
                ...headers,
                [checksumLocationName]: base64Encoder(rawChecksum),
            };
        }
    }
    const result = await next({
        ...args,
        request: {
            ...request,
            headers: updatedHeaders,
            body: updatedBody,
        },
    });
    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
    if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        (0,_validateChecksumFromResponse__WEBPACK_IMPORTED_MODULE_7__.validateChecksumFromResponse)(result.response, {
            config,
            responseAlgorithms,
        });
    }
    return result;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChecksum": () => (/* binding */ getChecksum)
/* harmony export */ });
/* harmony import */ var _isStreaming__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isStreaming */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js");
/* harmony import */ var _stringHasher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringHasher */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js");


const getChecksum = async (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) => {
    const digest = (0,_isStreaming__WEBPACK_IMPORTED_MODULE_0__.isStreaming)(body) ? streamHasher(checksumAlgorithmFn, body) : (0,_stringHasher__WEBPACK_IMPORTED_MODULE_1__.stringHasher)(checksumAlgorithmFn, body);
    return base64Encoder(await digest);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChecksumAlgorithmForRequest": () => (/* binding */ getChecksumAlgorithmForRequest)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js");


const getChecksumAlgorithmForRequest = (input, { requestChecksumRequired, requestAlgorithmMember }) => {
    if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
        return requestChecksumRequired ? _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.MD5 : undefined;
    }
    const checksumAlgorithm = input[requestAlgorithmMember];
    if (!_types__WEBPACK_IMPORTED_MODULE_1__.CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client.` +
            ` Select one of ${_types__WEBPACK_IMPORTED_MODULE_1__.CLIENT_SUPPORTED_ALGORITHMS}.`);
    }
    return checksumAlgorithm;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChecksumAlgorithmListForResponse": () => (/* binding */ getChecksumAlgorithmListForResponse)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js");

const getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {
    const validChecksumAlgorithms = [];
    for (const algorithm of _types__WEBPACK_IMPORTED_MODULE_0__.PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !_types__WEBPACK_IMPORTED_MODULE_0__.CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
            continue;
        }
        validChecksumAlgorithms.push(algorithm);
    }
    return validChecksumAlgorithms;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChecksumLocationName": () => (/* binding */ getChecksumLocationName)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js");

const getChecksumLocationName = (algorithm) => algorithm === _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flexibleChecksumsMiddlewareOptions": () => (/* binding */ flexibleChecksumsMiddlewareOptions),
/* harmony export */   "getFlexibleChecksumsPlugin": () => (/* binding */ getFlexibleChecksumsPlugin)
/* harmony export */ });
/* harmony import */ var _flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flexibleChecksumsMiddleware */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js");

const flexibleChecksumsMiddlewareOptions = {
    name: "flexibleChecksumsMiddleware",
    step: "build",
    tags: ["BODY_CHECKSUM"],
    override: true,
};
const getFlexibleChecksumsPlugin = (config, middlewareConfig) => ({
    applyToStack: (clientStack) => {
        clientStack.add((0,_flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_0__.flexibleChecksumsMiddleware)(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasHeader": () => (/* binding */ hasHeader)
/* harmony export */ });
const hasHeader = (header, headers) => {
    const soughtHeader = header.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return true;
        }
    }
    return false;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChecksumAlgorithm": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm),
/* harmony export */   "ChecksumLocation": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumLocation),
/* harmony export */   "flexibleChecksumsMiddleware": () => (/* reexport safe */ _flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_1__.flexibleChecksumsMiddleware),
/* harmony export */   "flexibleChecksumsMiddlewareOptions": () => (/* reexport safe */ _getFlexibleChecksumsPlugin__WEBPACK_IMPORTED_MODULE_2__.flexibleChecksumsMiddlewareOptions),
/* harmony export */   "getFlexibleChecksumsPlugin": () => (/* reexport safe */ _getFlexibleChecksumsPlugin__WEBPACK_IMPORTED_MODULE_2__.getFlexibleChecksumsPlugin)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js");
/* harmony import */ var _flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flexibleChecksumsMiddleware */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js");
/* harmony import */ var _getFlexibleChecksumsPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFlexibleChecksumsPlugin */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isStreaming": () => (/* binding */ isStreaming)
/* harmony export */ });
/* harmony import */ var _aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/is-array-buffer */ "./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js");

const isStreaming = (body) => body !== undefined && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0,_aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(body);


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selectChecksumAlgorithmFunction": () => (/* binding */ selectChecksumAlgorithmFunction)
/* harmony export */ });
/* harmony import */ var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */ "./node_modules/@aws-crypto/crc32/build/index.js");
/* harmony import */ var _aws_crypto_crc32c__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-crypto/crc32c */ "./node_modules/@aws-crypto/crc32c/build/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js");



const selectChecksumAlgorithmFunction = (checksumAlgorithm, config) => ({
    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.MD5]: config.md5,
    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.CRC32]: _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__.AwsCrc32,
    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.CRC32C]: _aws_crypto_crc32c__WEBPACK_IMPORTED_MODULE_1__.AwsCrc32c,
    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.SHA1]: config.sha1,
    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.SHA256]: config.sha256,
}[checksumAlgorithm]);


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringHasher": () => (/* binding */ stringHasher)
/* harmony export */ });
const stringHasher = (checksumAlgorithmFn, body) => {
    const hash = new checksumAlgorithmFn();
    hash.update(body || "");
    return hash.digest();
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLIENT_SUPPORTED_ALGORITHMS": () => (/* binding */ CLIENT_SUPPORTED_ALGORITHMS),
/* harmony export */   "PRIORITY_ORDER_ALGORITHMS": () => (/* binding */ PRIORITY_ORDER_ALGORITHMS)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js");

const CLIENT_SUPPORTED_ALGORITHMS = [
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32,
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32C,
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA1,
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA256,
];
const PRIORITY_ORDER_ALGORITHMS = [
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32,
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32C,
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA1,
    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA256,
];


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "validateChecksumFromResponse": () => (/* binding */ validateChecksumFromResponse)
/* harmony export */ });
/* harmony import */ var _getChecksum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getChecksum */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js");
/* harmony import */ var _getChecksumAlgorithmListForResponse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getChecksumAlgorithmListForResponse */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js");
/* harmony import */ var _getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getChecksumLocationName */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js");
/* harmony import */ var _selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectChecksumAlgorithmFunction */ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js");




const validateChecksumFromResponse = async (response, { config, responseAlgorithms }) => {
    const checksumAlgorithms = (0,_getChecksumAlgorithmListForResponse__WEBPACK_IMPORTED_MODULE_1__.getChecksumAlgorithmListForResponse)(responseAlgorithms);
    const { body: responseBody, headers: responseHeaders } = response;
    for (const algorithm of checksumAlgorithms) {
        const responseHeader = (0,_getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__.getChecksumLocationName)(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
            const checksumAlgorithmFn = (0,_selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_3__.selectChecksumAlgorithmFunction)(algorithm, config);
            const { streamHasher, base64Encoder } = config;
            const checksum = await (0,_getChecksum__WEBPACK_IMPORTED_MODULE_0__.getChecksum)(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });
            if (checksum === checksumFromResponse) {
                break;
            }
            throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}"` +
                ` in response header "${responseHeader}".`);
        }
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getHostHeaderPlugin": () => (/* binding */ getHostHeaderPlugin),
/* harmony export */   "hostHeaderMiddleware": () => (/* binding */ hostHeaderMiddleware),
/* harmony export */   "hostHeaderMiddlewareOptions": () => (/* binding */ hostHeaderMiddlewareOptions),
/* harmony export */   "resolveHostHeaderConfig": () => (/* binding */ resolveHostHeaderConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");

function resolveHostHeaderConfig(input) {
    return input;
}
const hostHeaderMiddleware = (options) => (next) => async (args) => {
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request))
        return next(args);
    const { request } = args;
    const { handlerProtocol = "" } = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
    }
    else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
    }
    return next(args);
};
const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"],
    override: true,
};
const getHostHeaderPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLocationConstraintPlugin": () => (/* binding */ getLocationConstraintPlugin),
/* harmony export */   "locationConstraintMiddleware": () => (/* binding */ locationConstraintMiddleware),
/* harmony export */   "locationConstraintMiddlewareOptions": () => (/* binding */ locationConstraintMiddlewareOptions)
/* harmony export */ });
function locationConstraintMiddleware(options) {
    return (next) => async (args) => {
        const { CreateBucketConfiguration } = args.input;
        const region = await options.region();
        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
            args = {
                ...args,
                input: {
                    ...args.input,
                    CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region },
                },
            };
        }
        return next(args);
    };
}
const locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
    override: true,
};
const getLocationConstraintPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-logger/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLoggerPlugin": () => (/* reexport safe */ _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__.getLoggerPlugin),
/* harmony export */   "loggerMiddleware": () => (/* reexport safe */ _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__.loggerMiddleware),
/* harmony export */   "loggerMiddlewareOptions": () => (/* reexport safe */ _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__.loggerMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loggerMiddleware */ "./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLoggerPlugin": () => (/* binding */ getLoggerPlugin),
/* harmony export */   "loggerMiddleware": () => (/* binding */ loggerMiddleware),
/* harmony export */   "loggerMiddlewareOptions": () => (/* binding */ loggerMiddlewareOptions)
/* harmony export */ });
const loggerMiddleware = () => (next, context) => async (args) => {
    const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
    const response = await next(args);
    if (!logger) {
        return response;
    }
    if (typeof logger.info === "function") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
            clientName,
            commandName,
            input: inputFilterSensitiveLog(args.input),
            output: outputFilterSensitiveLog(outputWithoutMetadata),
            metadata: $metadata,
        });
    }
    return response;
};
const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize",
    override: true,
};
const getLoggerPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addRecursionDetectionMiddlewareOptions": () => (/* binding */ addRecursionDetectionMiddlewareOptions),
/* harmony export */   "getRecursionDetectionPlugin": () => (/* binding */ getRecursionDetectionPlugin),
/* harmony export */   "recursionDetectionMiddleware": () => (/* binding */ recursionDetectionMiddleware)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");

const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options) => (next) => async (args) => {
    const { request } = args;
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request) ||
        options.runtime !== "node" ||
        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
    }
    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
    const traceId = process.env[ENV_TRACE_ID];
    const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
    }
    return next({
        ...args,
        request,
    });
};
const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: ["RECURSION_DETECTION"],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low",
};
const getRecursionDetectionPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdaptiveRetryStrategy": () => (/* binding */ AdaptiveRetryStrategy)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./node_modules/@aws-sdk/middleware-retry/dist-es/config.js");
/* harmony import */ var _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultRateLimiter */ "./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js");
/* harmony import */ var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StandardRetryStrategy */ "./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js");



class AdaptiveRetryStrategy extends _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__.StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__.DefaultRateLimiter();
        this.mode = _config__WEBPACK_IMPORTED_MODULE_0__.RETRY_MODES.ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async () => {
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response) => {
                this.rateLimiter.updateClientSendingRate(response);
            },
        });
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultRateLimiter": () => (/* binding */ DefaultRateLimiter)
/* harmony export */ });
/* harmony import */ var _aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/service-error-classification */ "./node_modules/@aws-sdk/service-error-classification/dist-es/index.js");

class DefaultRateLimiter {
    constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) {
            return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;
            await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        }
        else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StandardRetryStrategy": () => (/* binding */ StandardRetryStrategy)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/service-error-classification */ "./node_modules/@aws-sdk/service-error-classification/dist-es/index.js");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ "./node_modules/@aws-sdk/middleware-retry/dist-es/config.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js");
/* harmony import */ var _defaultRetryQuota__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaultRetryQuota */ "./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js");
/* harmony import */ var _delayDecider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./delayDecider */ "./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js");
/* harmony import */ var _retryDecider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./retryDecider */ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js");








class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = _config__WEBPACK_IMPORTED_MODULE_2__.RETRY_MODES.STANDARD;
        this.retryDecider = options?.retryDecider ?? _retryDecider__WEBPACK_IMPORTED_MODULE_6__.defaultRetryDecider;
        this.delayDecider = options?.delayDecider ?? _delayDecider__WEBPACK_IMPORTED_MODULE_5__.defaultDelayDecider;
        this.retryQuota = options?.retryQuota ?? (0,_defaultRetryQuota__WEBPACK_IMPORTED_MODULE_4__.getDefaultRetryQuota)(_constants__WEBPACK_IMPORTED_MODULE_3__.INITIAL_RETRY_TOKENS);
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        }
        catch (error) {
            maxAttempts = _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
            request.headers[_constants__WEBPACK_IMPORTED_MODULE_3__.INVOCATION_ID_HEADER] = (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])();
        }
        while (true) {
            try {
                if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
                    request.headers[_constants__WEBPACK_IMPORTED_MODULE_3__.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                }
                if (options?.beforeRequest) {
                    await options.beforeRequest();
                }
                const { response, output } = await next(args);
                if (options?.afterRequest) {
                    options.afterRequest(response);
                }
                this.retryQuota.releaseRetryTokens(retryTokenAmount);
                output.$metadata.attempts = attempts + 1;
                output.$metadata.totalRetryDelay = totalDelay;
                return { response, output };
            }
            catch (e) {
                const err = asSdkError(e);
                attempts++;
                if (this.shouldRetry(err, attempts, maxAttempts)) {
                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                    const delayFromDecider = this.delayDecider((0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_1__.isThrottlingError)(err) ? _constants__WEBPACK_IMPORTED_MODULE_3__.THROTTLING_RETRY_DELAY_BASE : _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_DELAY_BASE, attempts);
                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                    totalDelay += delay;
                    await new Promise((resolve) => setTimeout(resolve, delay));
                    continue;
                }
                if (!err.$metadata) {
                    err.$metadata = {};
                }
                err.$metadata.attempts = attempts;
                err.$metadata.totalRetryDelay = totalDelay;
                throw err;
            }
        }
    }
}
const getDelayFromRetryAfterHeader = (response) => {
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response))
        return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
        return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};
const asSdkError = (error) => {
    if (error instanceof Error)
        return error;
    if (error instanceof Object)
        return Object.assign(new Error(), error);
    if (typeof error === "string")
        return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/config.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/config.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_MAX_ATTEMPTS": () => (/* binding */ DEFAULT_MAX_ATTEMPTS),
/* harmony export */   "DEFAULT_RETRY_MODE": () => (/* binding */ DEFAULT_RETRY_MODE),
/* harmony export */   "RETRY_MODES": () => (/* binding */ RETRY_MODES)
/* harmony export */ });
var RETRY_MODES;
(function (RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
const DEFAULT_MAX_ATTEMPTS = 3;
const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONFIG_MAX_ATTEMPTS": () => (/* binding */ CONFIG_MAX_ATTEMPTS),
/* harmony export */   "CONFIG_RETRY_MODE": () => (/* binding */ CONFIG_RETRY_MODE),
/* harmony export */   "ENV_MAX_ATTEMPTS": () => (/* binding */ ENV_MAX_ATTEMPTS),
/* harmony export */   "ENV_RETRY_MODE": () => (/* binding */ ENV_RETRY_MODE),
/* harmony export */   "NODE_MAX_ATTEMPT_CONFIG_OPTIONS": () => (/* binding */ NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
/* harmony export */   "NODE_RETRY_MODE_CONFIG_OPTIONS": () => (/* binding */ NODE_RETRY_MODE_CONFIG_OPTIONS),
/* harmony export */   "resolveRetryConfig": () => (/* binding */ resolveRetryConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js");
/* harmony import */ var _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AdaptiveRetryStrategy */ "./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ "./node_modules/@aws-sdk/middleware-retry/dist-es/config.js");
/* harmony import */ var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StandardRetryStrategy */ "./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js");




const ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
const CONFIG_MAX_ATTEMPTS = "max_attempts";
const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    default: _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MAX_ATTEMPTS,
};
const resolveRetryConfig = (input) => {
    const maxAttempts = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.maxAttempts ?? _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MAX_ATTEMPTS);
    return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
            if (input.retryStrategy) {
                return input.retryStrategy;
            }
            const retryMode = await (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.retryMode)();
            if (retryMode === _config__WEBPACK_IMPORTED_MODULE_2__.RETRY_MODES.ADAPTIVE) {
                return new _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_1__.AdaptiveRetryStrategy(maxAttempts);
            }
            return new _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_3__.StandardRetryStrategy(maxAttempts);
        },
    };
};
const ENV_RETRY_MODE = "AWS_RETRY_MODE";
const CONFIG_RETRY_MODE = "retry_mode";
const NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
    default: _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_MODE,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_RETRY_DELAY_BASE": () => (/* binding */ DEFAULT_RETRY_DELAY_BASE),
/* harmony export */   "INITIAL_RETRY_TOKENS": () => (/* binding */ INITIAL_RETRY_TOKENS),
/* harmony export */   "INVOCATION_ID_HEADER": () => (/* binding */ INVOCATION_ID_HEADER),
/* harmony export */   "MAXIMUM_RETRY_DELAY": () => (/* binding */ MAXIMUM_RETRY_DELAY),
/* harmony export */   "NO_RETRY_INCREMENT": () => (/* binding */ NO_RETRY_INCREMENT),
/* harmony export */   "REQUEST_HEADER": () => (/* binding */ REQUEST_HEADER),
/* harmony export */   "RETRY_COST": () => (/* binding */ RETRY_COST),
/* harmony export */   "THROTTLING_RETRY_DELAY_BASE": () => (/* binding */ THROTTLING_RETRY_DELAY_BASE),
/* harmony export */   "TIMEOUT_RETRY_COST": () => (/* binding */ TIMEOUT_RETRY_COST)
/* harmony export */ });
const DEFAULT_RETRY_DELAY_BASE = 100;
const MAXIMUM_RETRY_DELAY = 20 * 1000;
const THROTTLING_RETRY_DELAY_BASE = 500;
const INITIAL_RETRY_TOKENS = 500;
const RETRY_COST = 5;
const TIMEOUT_RETRY_COST = 10;
const NO_RETRY_INCREMENT = 1;
const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
const REQUEST_HEADER = "amz-sdk-request";


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDefaultRetryQuota": () => (/* binding */ getDefaultRetryQuota)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js");

const getDefaultRetryQuota = (initialRetryTokens, options) => {
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? _constants__WEBPACK_IMPORTED_MODULE_0__.NO_RETRY_INCREMENT;
    const retryCost = options?.retryCost ?? _constants__WEBPACK_IMPORTED_MODULE_0__.RETRY_COST;
    const timeoutRetryCost = options?.timeoutRetryCost ?? _constants__WEBPACK_IMPORTED_MODULE_0__.TIMEOUT_RETRY_COST;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error) => (error.name === "TimeoutError" ? timeoutRetryCost : retryCost);
    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
            throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultDelayDecider": () => (/* binding */ defaultDelayDecider)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js");

const defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(_constants__WEBPACK_IMPORTED_MODULE_0__.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdaptiveRetryStrategy": () => (/* reexport safe */ _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__.AdaptiveRetryStrategy),
/* harmony export */   "CONFIG_MAX_ATTEMPTS": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.CONFIG_MAX_ATTEMPTS),
/* harmony export */   "CONFIG_RETRY_MODE": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.CONFIG_RETRY_MODE),
/* harmony export */   "DEFAULT_MAX_ATTEMPTS": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_MAX_ATTEMPTS),
/* harmony export */   "DEFAULT_RETRY_MODE": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_MODE),
/* harmony export */   "DefaultRateLimiter": () => (/* reexport safe */ _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__.DefaultRateLimiter),
/* harmony export */   "ENV_MAX_ATTEMPTS": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.ENV_MAX_ATTEMPTS),
/* harmony export */   "ENV_RETRY_MODE": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.ENV_RETRY_MODE),
/* harmony export */   "NODE_MAX_ATTEMPT_CONFIG_OPTIONS": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
/* harmony export */   "NODE_RETRY_MODE_CONFIG_OPTIONS": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.NODE_RETRY_MODE_CONFIG_OPTIONS),
/* harmony export */   "RETRY_MODES": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_3__.RETRY_MODES),
/* harmony export */   "StandardRetryStrategy": () => (/* reexport safe */ _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__.StandardRetryStrategy),
/* harmony export */   "defaultDelayDecider": () => (/* reexport safe */ _delayDecider__WEBPACK_IMPORTED_MODULE_5__.defaultDelayDecider),
/* harmony export */   "defaultRetryDecider": () => (/* reexport safe */ _retryDecider__WEBPACK_IMPORTED_MODULE_7__.defaultRetryDecider),
/* harmony export */   "getOmitRetryHeadersPlugin": () => (/* reexport safe */ _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__.getOmitRetryHeadersPlugin),
/* harmony export */   "getRetryPlugin": () => (/* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__.getRetryPlugin),
/* harmony export */   "omitRetryHeadersMiddleware": () => (/* reexport safe */ _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__.omitRetryHeadersMiddleware),
/* harmony export */   "omitRetryHeadersMiddlewareOptions": () => (/* reexport safe */ _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__.omitRetryHeadersMiddlewareOptions),
/* harmony export */   "resolveRetryConfig": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.resolveRetryConfig),
/* harmony export */   "retryMiddleware": () => (/* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__.retryMiddleware),
/* harmony export */   "retryMiddlewareOptions": () => (/* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__.retryMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AdaptiveRetryStrategy */ "./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js");
/* harmony import */ var _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultRateLimiter */ "./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js");
/* harmony import */ var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StandardRetryStrategy */ "./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ "./node_modules/@aws-sdk/middleware-retry/dist-es/config.js");
/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./configurations */ "./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js");
/* harmony import */ var _delayDecider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./delayDecider */ "./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js");
/* harmony import */ var _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./omitRetryHeadersMiddleware */ "./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js");
/* harmony import */ var _retryDecider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./retryDecider */ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js");
/* harmony import */ var _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./retryMiddleware */ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./types */ "./node_modules/@aws-sdk/middleware-retry/dist-es/types.js");












/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOmitRetryHeadersPlugin": () => (/* binding */ getOmitRetryHeadersPlugin),
/* harmony export */   "omitRetryHeadersMiddleware": () => (/* binding */ omitRetryHeadersMiddleware),
/* harmony export */   "omitRetryHeadersMiddlewareOptions": () => (/* binding */ omitRetryHeadersMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js");


const omitRetryHeadersMiddleware = () => (next) => async (args) => {
    const { request } = args;
    if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
        delete request.headers[_constants__WEBPACK_IMPORTED_MODULE_1__.INVOCATION_ID_HEADER];
        delete request.headers[_constants__WEBPACK_IMPORTED_MODULE_1__.REQUEST_HEADER];
    }
    return next(args);
};
const omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true,
};
const getOmitRetryHeadersPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultRetryDecider": () => (/* binding */ defaultRetryDecider)
/* harmony export */ });
/* harmony import */ var _aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/service-error-classification */ "./node_modules/@aws-sdk/service-error-classification/dist-es/index.js");

const defaultRetryDecider = (error) => {
    if (!error) {
        return false;
    }
    return (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isRetryableByTrait)(error) || (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isClockSkewError)(error) || (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isThrottlingError)(error) || (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isTransientError)(error);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRetryPlugin": () => (/* binding */ getRetryPlugin),
/* harmony export */   "retryMiddleware": () => (/* binding */ retryMiddleware),
/* harmony export */   "retryMiddlewareOptions": () => (/* binding */ retryMiddlewareOptions)
/* harmony export */ });
const retryMiddleware = (options) => (next, context) => async (args) => {
    const retryStrategy = await options.retryStrategy();
    if (retryStrategy?.mode)
        context.userAgent = [...(context.userAgent || []), ["cfg/retry-mode", retryStrategy.mode]];
    return retryStrategy.retry(next, args);
};
const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high",
    override: true,
};
const getRetryPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkContentLengthHeader": () => (/* binding */ checkContentLengthHeader),
/* harmony export */   "checkContentLengthHeaderMiddlewareOptions": () => (/* binding */ checkContentLengthHeaderMiddlewareOptions),
/* harmony export */   "getCheckContentLengthHeaderPlugin": () => (/* binding */ getCheckContentLengthHeaderPlugin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");

const CONTENT_LENGTH_HEADER = "content-length";
function checkContentLengthHeader() {
    return (next, context) => async (args) => {
        const { request } = args;
        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {
            if (!request.headers[CONTENT_LENGTH_HEADER]) {
                const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
                if (typeof context?.logger?.warn === "function") {
                    context.logger.warn(message);
                }
                else {
                    console.warn(message);
                }
            }
        }
        return next({ ...args });
    };
}
const checkContentLengthHeaderMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["CHECK_CONTENT_LENGTH_HEADER"],
    name: "getCheckContentLengthHeaderPlugin",
    override: true,
};
const getCheckContentLengthHeaderPlugin = (unused) => ({
    applyToStack: (clientStack) => {
        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveS3Config": () => (/* binding */ resolveS3Config)
/* harmony export */ });
const resolveS3Config = (input) => ({
    ...input,
    forcePathStyle: input.forcePathStyle ?? false,
    useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,
    disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false,
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkContentLengthHeader": () => (/* reexport safe */ _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__.checkContentLengthHeader),
/* harmony export */   "checkContentLengthHeaderMiddlewareOptions": () => (/* reexport safe */ _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__.checkContentLengthHeaderMiddlewareOptions),
/* harmony export */   "getCheckContentLengthHeaderPlugin": () => (/* reexport safe */ _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__.getCheckContentLengthHeaderPlugin),
/* harmony export */   "getThrow200ExceptionsPlugin": () => (/* reexport safe */ _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__.getThrow200ExceptionsPlugin),
/* harmony export */   "getValidateBucketNamePlugin": () => (/* reexport safe */ _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__.getValidateBucketNamePlugin),
/* harmony export */   "getWriteGetObjectResponseEndpointPlugin": () => (/* reexport safe */ _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__.getWriteGetObjectResponseEndpointPlugin),
/* harmony export */   "resolveS3Config": () => (/* reexport safe */ _configuration__WEBPACK_IMPORTED_MODULE_1__.resolveS3Config),
/* harmony export */   "throw200ExceptionsMiddleware": () => (/* reexport safe */ _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__.throw200ExceptionsMiddleware),
/* harmony export */   "throw200ExceptionsMiddlewareOptions": () => (/* reexport safe */ _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__.throw200ExceptionsMiddlewareOptions),
/* harmony export */   "validateBucketNameMiddleware": () => (/* reexport safe */ _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__.validateBucketNameMiddleware),
/* harmony export */   "validateBucketNameMiddlewareOptions": () => (/* reexport safe */ _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__.validateBucketNameMiddlewareOptions),
/* harmony export */   "writeGetObjectResponseEndpointMiddleware": () => (/* reexport safe */ _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__.writeGetObjectResponseEndpointMiddleware),
/* harmony export */   "writeGetObjectResponseEndpointMiddlewareOptions": () => (/* reexport safe */ _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__.writeGetObjectResponseEndpointMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check-content-length-header */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js");
/* harmony import */ var _configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./configuration */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js");
/* harmony import */ var _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throw-200-exceptions */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js");
/* harmony import */ var _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate-bucket-name */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js");
/* harmony import */ var _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./write-get-object-response-endpoint */ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js");







/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getThrow200ExceptionsPlugin": () => (/* binding */ getThrow200ExceptionsPlugin),
/* harmony export */   "throw200ExceptionsMiddleware": () => (/* binding */ throw200ExceptionsMiddleware),
/* harmony export */   "throw200ExceptionsMiddlewareOptions": () => (/* binding */ throw200ExceptionsMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");

const throw200ExceptionsMiddleware = (config) => (next) => async (args) => {
    const result = await next(args);
    const { response } = result;
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response))
        return result;
    const { statusCode, body } = response;
    if (statusCode < 200 || statusCode >= 300)
        return result;
    const bodyBytes = await collectBody(body, config);
    const bodyString = await collectBodyString(bodyBytes, config);
    if (bodyBytes.length === 0) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
    }
    if (bodyString && bodyString.match("<Error>")) {
        response.statusCode = 400;
    }
    response.body = bodyBytes;
    return result;
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true,
};
const getThrow200ExceptionsPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getValidateBucketNamePlugin": () => (/* binding */ getValidateBucketNamePlugin),
/* harmony export */   "validateBucketNameMiddleware": () => (/* binding */ validateBucketNameMiddleware),
/* harmony export */   "validateBucketNameMiddlewareOptions": () => (/* binding */ validateBucketNameMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-arn-parser */ "./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js");

function validateBucketNameMiddleware() {
    return (next) => async (args) => {
        const { input: { Bucket }, } = args;
        if (typeof Bucket === "string" && !(0,_aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_0__.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
            const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
            err.name = "InvalidBucketName";
            throw err;
        }
        return next({ ...args });
    };
}
const validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BUCKET_NAME"],
    name: "validateBucketNameMiddleware",
    override: true,
};
const getValidateBucketNamePlugin = (unused) => ({
    applyToStack: (clientStack) => {
        clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getWriteGetObjectResponseEndpointPlugin": () => (/* binding */ getWriteGetObjectResponseEndpointPlugin),
/* harmony export */   "writeGetObjectResponseEndpointMiddleware": () => (/* binding */ writeGetObjectResponseEndpointMiddleware),
/* harmony export */   "writeGetObjectResponseEndpointMiddlewareOptions": () => (/* binding */ writeGetObjectResponseEndpointMiddlewareOptions)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_bucket_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-bucket-endpoint */ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js");
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");


const writeGetObjectResponseEndpointMiddleware = (config) => (next, context) => async (args) => {
    const { region: regionProvider, isCustomEndpoint, disableHostPrefix } = config;
    const region = await regionProvider();
    const { request, input } = args;
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_1__.HttpRequest.isInstance(request))
        return next({ ...args });
    let hostname = request.hostname;
    if (hostname.endsWith("s3.amazonaws.com") || hostname.endsWith("s3-external-1.amazonaws.com")) {
        return next({ ...args });
    }
    if (!isCustomEndpoint) {
        const [, suffix] = (0,_aws_sdk_middleware_bucket_endpoint__WEBPACK_IMPORTED_MODULE_0__.getSuffixForArnEndpoint)(request.hostname);
        hostname = `s3-object-lambda.${region}.${suffix}`;
    }
    if (!disableHostPrefix && input.RequestRoute) {
        hostname = `${input.RequestRoute}.${hostname}`;
    }
    request.hostname = hostname;
    context["signing_service"] = "s3-object-lambda";
    if (config.runtime === "node" && !request.headers["content-length"]) {
        request.headers["transfer-encoding"] = "chunked";
    }
    return next({ ...args });
};
const writeGetObjectResponseEndpointMiddlewareOptions = {
    relation: "after",
    toMiddleware: "contentLengthMiddleware",
    tags: ["WRITE_GET_OBJECT_RESPONSE", "S3", "ENDPOINT"],
    name: "writeGetObjectResponseEndpointMiddleware",
    override: true,
};
const getWriteGetObjectResponseEndpointPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(writeGetObjectResponseEndpointMiddleware(config), writeGetObjectResponseEndpointMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserializerMiddleware": () => (/* binding */ deserializerMiddleware)
/* harmony export */ });
const deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
    const { response } = await next(args);
    try {
        const parsed = await deserializer(response, options);
        return {
            response,
            output: parsed,
        };
    }
    catch (error) {
        Object.defineProperty(error, "$response", {
            value: response,
        });
        throw error;
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserializerMiddleware": () => (/* reexport safe */ _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__.deserializerMiddleware),
/* harmony export */   "deserializerMiddlewareOption": () => (/* reexport safe */ _serdePlugin__WEBPACK_IMPORTED_MODULE_1__.deserializerMiddlewareOption),
/* harmony export */   "getSerdePlugin": () => (/* reexport safe */ _serdePlugin__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin),
/* harmony export */   "serializerMiddleware": () => (/* reexport safe */ _serializerMiddleware__WEBPACK_IMPORTED_MODULE_2__.serializerMiddleware),
/* harmony export */   "serializerMiddlewareOption": () => (/* reexport safe */ _serdePlugin__WEBPACK_IMPORTED_MODULE_1__.serializerMiddlewareOption)
/* harmony export */ });
/* harmony import */ var _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializerMiddleware */ "./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js");
/* harmony import */ var _serdePlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serdePlugin */ "./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js");
/* harmony import */ var _serializerMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializerMiddleware */ "./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserializerMiddlewareOption": () => (/* binding */ deserializerMiddlewareOption),
/* harmony export */   "getSerdePlugin": () => (/* binding */ getSerdePlugin),
/* harmony export */   "serializerMiddlewareOption": () => (/* binding */ serializerMiddlewareOption)
/* harmony export */ });
/* harmony import */ var _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializerMiddleware */ "./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js");
/* harmony import */ var _serializerMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializerMiddleware */ "./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js");


const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"],
    override: true,
};
const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"],
    override: true,
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack) => {
            commandStack.add((0,_deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);
            commandStack.add((0,_serializerMiddleware__WEBPACK_IMPORTED_MODULE_1__.serializerMiddleware)(config, serializer), serializerMiddlewareOption);
        },
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "serializerMiddleware": () => (/* binding */ serializerMiddleware)
/* harmony export */ });
const serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
    const endpoint = context.endpointV2?.url && options.urlParser
        ? async () => options.urlParser(context.endpointV2.url)
        : options.endpoint;
    if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
    }
    const request = await serializer(args.input, { ...options, endpoint });
    return next({
        ...args,
        request,
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveAwsAuthConfig": () => (/* binding */ resolveAwsAuthConfig),
/* harmony export */   "resolveSigV4AuthConfig": () => (/* binding */ resolveSigV4AuthConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/property-provider */ "./node_modules/@aws-sdk/property-provider/dist-es/index.js");
/* harmony import */ var _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/signature-v4 */ "./node_modules/@aws-sdk/signature-v4/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/util-middleware */ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js");



const CREDENTIAL_EXPIRE_WINDOW = 300000;
const resolveAwsAuthConfig = (input) => {
    const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) {
        signer = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.signer);
    }
    else if (input.regionInfoProvider) {
        signer = () => (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.region)()
            .then(async (region) => [
            (await input.regionInfoProvider(region, {
                useFipsEndpoint: await input.useFipsEndpoint(),
                useDualstackEndpoint: await input.useDualstackEndpoint(),
            })) || {},
            region,
        ])
            .then(([regionInfo, region]) => {
            const { signingRegion, signingService } = regionInfo;
            input.signingRegion = input.signingRegion || signingRegion || region;
            input.signingName = input.signingName || signingService || input.serviceId;
            const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
            };
            const SignerCtor = input.signerConstructor || _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4;
            return new SignerCtor(params);
        });
    }
    else {
        signer = async (authScheme) => {
            authScheme = Object.assign({}, {
                name: "sigv4",
                signingName: input.signingName || input.defaultSigningName,
                signingRegion: await (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.region)(),
                properties: {},
            }, authScheme);
            const signingRegion = authScheme.signingRegion;
            const signingService = authScheme.signingName;
            input.signingRegion = input.signingRegion || signingRegion;
            input.signingName = input.signingName || signingService || input.serviceId;
            const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
            };
            const SignerCtor = input.signerConstructor || _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4;
            return new SignerCtor(params);
        };
    }
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
    };
};
const resolveSigV4AuthConfig = (input) => {
    const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) {
        signer = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.signer);
    }
    else {
        signer = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(new _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
        }));
    }
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
    };
};
const normalizeCredentialProvider = (credentials) => {
    if (typeof credentials === "function") {
        return (0,_aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.memoize)(credentials, (credentials) => credentials.expiration !== undefined &&
            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);
    }
    return (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(credentials);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "awsAuthMiddleware": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.awsAuthMiddleware),
/* harmony export */   "awsAuthMiddlewareOptions": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.awsAuthMiddlewareOptions),
/* harmony export */   "getAwsAuthPlugin": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.getAwsAuthPlugin),
/* harmony export */   "getSigV4AuthPlugin": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.getSigV4AuthPlugin),
/* harmony export */   "resolveAwsAuthConfig": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveAwsAuthConfig),
/* harmony export */   "resolveSigV4AuthConfig": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveSigV4AuthConfig)
/* harmony export */ });
/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations */ "./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js");
/* harmony import */ var _middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./middleware */ "./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "awsAuthMiddleware": () => (/* binding */ awsAuthMiddleware),
/* harmony export */   "awsAuthMiddlewareOptions": () => (/* binding */ awsAuthMiddlewareOptions),
/* harmony export */   "getAwsAuthPlugin": () => (/* binding */ getAwsAuthPlugin),
/* harmony export */   "getSigV4AuthPlugin": () => (/* binding */ getSigV4AuthPlugin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _utils_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getSkewCorrectedDate */ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js");
/* harmony import */ var _utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/getUpdatedSystemClockOffset */ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js");



const awsAuthMiddleware = (options) => (next, context) => async function (args) {
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request))
        return next(args);
    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
    const multiRegionOverride = authScheme?.name === "sigv4a" ? authScheme?.signingRegionSet?.join(",") : undefined;
    const signer = await options.signer(authScheme);
    const output = await next({
        ...args,
        request: await signer.sign(args.request, {
            signingDate: (0,_utils_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_1__.getSkewCorrectedDate)(options.systemClockOffset),
            signingRegion: multiRegionOverride || context["signing_region"],
            signingService: context["signing_service"],
        }),
    }).catch((error) => {
        const serverTime = error.ServerTime ?? getDateHeader(error.$response);
        if (serverTime) {
            options.systemClockOffset = (0,_utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
    });
    const dateHeader = getDateHeader(output.response);
    if (dateHeader) {
        options.systemClockOffset = (0,_utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
    }
    return output;
};
const getDateHeader = (response) => _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;
const awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: ["SIGNATURE", "AWSAUTH"],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true,
};
const getAwsAuthPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    },
});
const getSigV4AuthPlugin = getAwsAuthPlugin;


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSkewCorrectedDate": () => (/* binding */ getSkewCorrectedDate)
/* harmony export */ });
const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUpdatedSystemClockOffset": () => (/* binding */ getUpdatedSystemClockOffset)
/* harmony export */ });
/* harmony import */ var _isClockSkewed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClockSkewed */ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js");

const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if ((0,_isClockSkewed__WEBPACK_IMPORTED_MODULE_0__.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isClockSkewed": () => (/* binding */ isClockSkewed)
/* harmony export */ });
/* harmony import */ var _getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSkewCorrectedDate */ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js");

const isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0,_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSsecPlugin": () => (/* binding */ getSsecPlugin),
/* harmony export */   "ssecMiddleware": () => (/* binding */ ssecMiddleware),
/* harmony export */   "ssecMiddlewareOptions": () => (/* binding */ ssecMiddlewareOptions)
/* harmony export */ });
function ssecMiddleware(options) {
    return (next) => async (args) => {
        let input = { ...args.input };
        const properties = [
            {
                target: "SSECustomerKey",
                hash: "SSECustomerKeyMD5",
            },
            {
                target: "CopySourceSSECustomerKey",
                hash: "CopySourceSSECustomerKeyMD5",
            },
        ];
        for (const prop of properties) {
            const value = input[prop.target];
            if (value) {
                const valueView = ArrayBuffer.isView(value)
                    ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)
                    : typeof value === "string"
                        ? options.utf8Decoder(value)
                        : new Uint8Array(value);
                const encoded = options.base64Encoder(valueView);
                const hash = new options.md5();
                hash.update(valueView);
                input = {
                    ...input,
                    [prop.target]: encoded,
                    [prop.hash]: options.base64Encoder(await hash.digest()),
                };
            }
        }
        return next({
            ...args,
            input,
        });
    };
}
const ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: ["SSE"],
    override: true,
};
const getSsecPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "constructStack": () => (/* binding */ constructStack)
/* harmony export */ });
const constructStack = () => {
    let absoluteEntries = [];
    let relativeEntries = [];
    const entriesNameSet = new Set();
    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||
        priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
            if (entry.name && entry.name === toRemove) {
                isRemoved = true;
                entriesNameSet.delete(toRemove);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
            if (entry.middleware === toRemove) {
                isRemoved = true;
                if (entry.name)
                    entriesNameSet.delete(entry.name);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
            toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
            toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
    };
    const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            }
            else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            }
            else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
            const normalizedEntry = {
                ...entry,
                before: [],
                after: [],
            };
            if (normalizedEntry.name)
                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
            const normalizedEntry = {
                ...entry,
                before: [],
                after: [],
            };
            if (normalizedEntry.name)
                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) {
                        return;
                    }
                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") {
                    toMiddleware.after.push(entry);
                }
                if (entry.relation === "before") {
                    toMiddleware.before.push(entry);
                }
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
            .map(expandRelativeMiddlewareList)
            .reduce((wholeList, expendedMiddlewareList) => {
            wholeList.push(...expendedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {}) => {
            const { name, override } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options,
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override)
                        throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);
                    const toOverride = absoluteEntries[toOverrideIndex];
                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                        throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +
                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
                    }
                    absoluteEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
            const { name, override } = options;
            const entry = {
                middleware,
                ...options,
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override)
                        throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);
                    const toOverride = relativeEntries[toOverrideIndex];
                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                        throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` +
                            `by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                    }
                    relativeEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
            plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
            if (typeof toRemove === "string")
                return removeByName(toRemove);
            else
                return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
            let isRemoved = false;
            const filterCb = (entry) => {
                const { tags, name } = entry;
                if (tags && tags.includes(toRemove)) {
                    if (name)
                        entriesNameSet.delete(name);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from) => {
            const cloned = cloneTo(constructStack());
            cloned.use(from);
            return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
            return getMiddlewareList(true).map((mw) => {
                return mw.name + ": " + (mw.tags || []).join(",");
            });
        },
        resolve: (handler, context) => {
            for (const middleware of getMiddlewareList()
                .map((entry) => entry.middleware)
                .reverse()) {
                handler = middleware(handler, context);
            }
            return handler;
        },
    };
    return stack;
};
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1,
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-stack/dist-es/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-stack/dist-es/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "constructStack": () => (/* reexport safe */ _MiddlewareStack__WEBPACK_IMPORTED_MODULE_0__.constructStack)
/* harmony export */ });
/* harmony import */ var _MiddlewareStack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MiddlewareStack */ "./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveUserAgentConfig": () => (/* binding */ resolveUserAgentConfig)
/* harmony export */ });
function resolveUserAgentConfig(input) {
    return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent,
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SPACE": () => (/* binding */ SPACE),
/* harmony export */   "UA_ESCAPE_REGEX": () => (/* binding */ UA_ESCAPE_REGEX),
/* harmony export */   "USER_AGENT": () => (/* binding */ USER_AGENT),
/* harmony export */   "X_AMZ_USER_AGENT": () => (/* binding */ X_AMZ_USER_AGENT)
/* harmony export */ });
const USER_AGENT = "user-agent";
const X_AMZ_USER_AGENT = "x-amz-user-agent";
const SPACE = " ";
const UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;


/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUserAgentMiddlewareOptions": () => (/* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.getUserAgentMiddlewareOptions),
/* harmony export */   "getUserAgentPlugin": () => (/* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.getUserAgentPlugin),
/* harmony export */   "resolveUserAgentConfig": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveUserAgentConfig),
/* harmony export */   "userAgentMiddleware": () => (/* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.userAgentMiddleware)
/* harmony export */ });
/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations */ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js");
/* harmony import */ var _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-agent-middleware */ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUserAgentMiddlewareOptions": () => (/* binding */ getUserAgentMiddlewareOptions),
/* harmony export */   "getUserAgentPlugin": () => (/* binding */ getUserAgentPlugin),
/* harmony export */   "userAgentMiddleware": () => (/* binding */ userAgentMiddleware)
/* harmony export */ });
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js");


const userAgentMiddleware = (options) => (next, context) => async (args) => {
    const { request } = args;
    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request))
        return next(args);
    const { headers } = request;
    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
    const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(_constants__WEBPACK_IMPORTED_MODULE_1__.SPACE);
    const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent,
    ].join(_constants__WEBPACK_IMPORTED_MODULE_1__.SPACE);
    if (options.runtime !== "browser") {
        if (normalUAValue) {
            headers[_constants__WEBPACK_IMPORTED_MODULE_1__.X_AMZ_USER_AGENT] = headers[_constants__WEBPACK_IMPORTED_MODULE_1__.X_AMZ_USER_AGENT]
                ? `${headers[_constants__WEBPACK_IMPORTED_MODULE_1__.USER_AGENT]} ${normalUAValue}`
                : normalUAValue;
        }
        headers[_constants__WEBPACK_IMPORTED_MODULE_1__.USER_AGENT] = sdkUserAgentValue;
    }
    else {
        headers[_constants__WEBPACK_IMPORTED_MODULE_1__.X_AMZ_USER_AGENT] = sdkUserAgentValue;
    }
    return next({
        ...args,
        request,
    });
};
const escapeUserAgent = ([name, version]) => {
    const prefixSeparatorIndex = name.indexOf("/");
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
        uaName = uaName.toLowerCase();
    }
    return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .map((item) => item?.replace(_constants__WEBPACK_IMPORTED_MODULE_1__.UA_ESCAPE_REGEX, "_"))
        .join("/");
};
const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: ["SET_USER_AGENT", "USER_AGENT"],
    override: true,
};
const getUserAgentPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    },
});


/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CredentialsProviderError": () => (/* binding */ CredentialsProviderError)
/* harmony export */ });
/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */ "./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js");

class CredentialsProviderError extends _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError {
    constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProviderError": () => (/* binding */ ProviderError)
/* harmony export */ });
class ProviderError extends Error {
    constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
    }
    static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TokenProviderError": () => (/* binding */ TokenProviderError)
/* harmony export */ });
/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */ "./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js");

class TokenProviderError extends _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError {
    constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "chain": () => (/* binding */ chain)
/* harmony export */ });
/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */ "./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js");

function chain(...providers) {
    return () => {
        let promise = Promise.reject(new _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError("No providers in chain"));
        for (const provider of providers) {
            promise = promise.catch((err) => {
                if (err?.tryNextLink) {
                    return provider();
                }
                throw err;
            });
        }
        return promise;
    };
}


/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromStatic": () => (/* binding */ fromStatic)
/* harmony export */ });
const fromStatic = (staticValue) => () => Promise.resolve(staticValue);


/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CredentialsProviderError": () => (/* reexport safe */ _CredentialsProviderError__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError),
/* harmony export */   "ProviderError": () => (/* reexport safe */ _ProviderError__WEBPACK_IMPORTED_MODULE_1__.ProviderError),
/* harmony export */   "TokenProviderError": () => (/* reexport safe */ _TokenProviderError__WEBPACK_IMPORTED_MODULE_2__.TokenProviderError),
/* harmony export */   "chain": () => (/* reexport safe */ _chain__WEBPACK_IMPORTED_MODULE_3__.chain),
/* harmony export */   "fromStatic": () => (/* reexport safe */ _fromStatic__WEBPACK_IMPORTED_MODULE_4__.fromStatic),
/* harmony export */   "memoize": () => (/* reexport safe */ _memoize__WEBPACK_IMPORTED_MODULE_5__.memoize)
/* harmony export */ });
/* harmony import */ var _CredentialsProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialsProviderError */ "./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js");
/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProviderError */ "./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js");
/* harmony import */ var _TokenProviderError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TokenProviderError */ "./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js");
/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chain */ "./node_modules/@aws-sdk/property-provider/dist-es/chain.js");
/* harmony import */ var _fromStatic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromStatic */ "./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js");
/* harmony import */ var _memoize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./memoize */ "./node_modules/@aws-sdk/property-provider/dist-es/memoize.js");








/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/memoize.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/memoize.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "memoize": () => (/* binding */ memoize)
/* harmony export */ });
const memoize = (provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async () => {
        if (!pending) {
            pending = provider();
        }
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        }
        finally {
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        return async (options) => {
            if (!hasResult || options?.forceRefresh) {
                resolved = await coalesceProvider();
            }
            return resolved;
        };
    }
    return async (options) => {
        if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
        }
        if (isConstant) {
            return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpRequest": () => (/* binding */ HttpRequest)
/* harmony export */ });
class HttpRequest {
    constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
            ? options.protocol.slice(-1) !== ":"
                ? `${options.protocol}:`
                : options.protocol
            : "https:";
        this.path = options.path ? (options.path.charAt(0) !== "/" ? `/${options.path}` : options.path) : "/";
    }
    static isInstance(request) {
        if (!request)
            return false;
        const req = request;
        return ("method" in req &&
            "protocol" in req &&
            "hostname" in req &&
            "path" in req &&
            typeof req["query"] === "object" &&
            typeof req["headers"] === "object");
    }
    clone() {
        const cloned = new HttpRequest({
            ...this,
            headers: { ...this.headers },
        });
        if (cloned.query)
            cloned.query = cloneQuery(cloned.query);
        return cloned;
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [...param] : param,
        };
    }, {});
}


/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpResponse": () => (/* binding */ HttpResponse)
/* harmony export */ });
class HttpResponse {
    constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response)
            return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpRequest": () => (/* reexport safe */ _httpRequest__WEBPACK_IMPORTED_MODULE_1__.HttpRequest),
/* harmony export */   "HttpResponse": () => (/* reexport safe */ _httpResponse__WEBPACK_IMPORTED_MODULE_2__.HttpResponse),
/* harmony export */   "isValidHostname": () => (/* reexport safe */ _isValidHostname__WEBPACK_IMPORTED_MODULE_3__.isValidHostname)
/* harmony export */ });
/* harmony import */ var _httpHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpHandler */ "./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js");
/* harmony import */ var _httpRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpRequest */ "./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js");
/* harmony import */ var _httpResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./httpResponse */ "./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js");
/* harmony import */ var _isValidHostname__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isValidHostname */ "./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js");






/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isValidHostname": () => (/* binding */ isValidHostname)
/* harmony export */ });
function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}


/***/ }),

/***/ "./node_modules/@aws-sdk/querystring-builder/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/querystring-builder/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buildQueryString": () => (/* binding */ buildQueryString)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-uri-escape */ "./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js");

function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key);
        if (Array.isArray(value)) {
            for (let i = 0, iLen = value.length; i < iLen; i++) {
                parts.push(`${key}=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value[i])}`);
            }
        }
        else {
            let qsEntry = key;
            if (value || typeof value === "string") {
                qsEntry += `=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`;
            }
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}


/***/ }),

/***/ "./node_modules/@aws-sdk/querystring-parser/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/querystring-parser/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseQueryString": () => (/* binding */ parseQueryString)
/* harmony export */ });
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
        for (const pair of querystring.split("&")) {
            let [key, value = null] = pair.split("=");
            key = decodeURIComponent(key);
            if (value) {
                value = decodeURIComponent(value);
            }
            if (!(key in query)) {
                query[key] = value;
            }
            else if (Array.isArray(query[key])) {
                query[key].push(value);
            }
            else {
                query[key] = [query[key], value];
            }
        }
    }
    return query;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLOCK_SKEW_ERROR_CODES": () => (/* binding */ CLOCK_SKEW_ERROR_CODES),
/* harmony export */   "NODEJS_TIMEOUT_ERROR_CODES": () => (/* binding */ NODEJS_TIMEOUT_ERROR_CODES),
/* harmony export */   "THROTTLING_ERROR_CODES": () => (/* binding */ THROTTLING_ERROR_CODES),
/* harmony export */   "TRANSIENT_ERROR_CODES": () => (/* binding */ TRANSIENT_ERROR_CODES),
/* harmony export */   "TRANSIENT_ERROR_STATUS_CODES": () => (/* binding */ TRANSIENT_ERROR_STATUS_CODES)
/* harmony export */ });
const CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch",
];
const THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException",
];
const TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
const TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
const NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];


/***/ }),

/***/ "./node_modules/@aws-sdk/service-error-classification/dist-es/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/service-error-classification/dist-es/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isClockSkewError": () => (/* binding */ isClockSkewError),
/* harmony export */   "isRetryableByTrait": () => (/* binding */ isRetryableByTrait),
/* harmony export */   "isThrottlingError": () => (/* binding */ isThrottlingError),
/* harmony export */   "isTransientError": () => (/* binding */ isTransientError)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js");

const isRetryableByTrait = (error) => error.$retryable !== undefined;
const isClockSkewError = (error) => _constants__WEBPACK_IMPORTED_MODULE_0__.CLOCK_SKEW_ERROR_CODES.includes(error.name);
const isThrottlingError = (error) => error.$metadata?.httpStatusCode === 429 ||
    _constants__WEBPACK_IMPORTED_MODULE_0__.THROTTLING_ERROR_CODES.includes(error.name) ||
    error.$retryable?.throttling == true;
const isTransientError = (error) => _constants__WEBPACK_IMPORTED_MODULE_0__.TRANSIENT_ERROR_CODES.includes(error.name) ||
    _constants__WEBPACK_IMPORTED_MODULE_0__.NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") ||
    _constants__WEBPACK_IMPORTED_MODULE_0__.TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignatureV4MultiRegion": () => (/* binding */ SignatureV4MultiRegion)
/* harmony export */ });
/* harmony import */ var _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/signature-v4 */ "./node_modules/@aws-sdk/signature-v4/dist-es/index.js");

class SignatureV4MultiRegion {
    constructor(options) {
        this.sigv4Signer = new _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4(options);
        this.signerOptions = options;
    }
    async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node")
                throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
    }
    async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node")
                throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
    }
    getSigv4aSigner() {
        if (!this.sigv4aSigner) {
            let CrtSignerV4;
            try {
                CrtSignerV4 =  true && (__webpack_require__(/*! @aws-sdk/signature-v4-crt */ "?7481").CrtSignerV4);
                if (typeof CrtSignerV4 !== "function")
                    throw new Error();
            }
            catch (e) {
                e.message =
                    `${e.message}\nPlease check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. \n` +
                        "For more information please go to " +
                        "https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt";
                throw e;
            }
            this.sigv4aSigner = new CrtSignerV4({
                ...this.signerOptions,
                signingAlgorithm: 1,
            });
        }
        return this.sigv4aSigner;
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignatureV4MultiRegion": () => (/* reexport safe */ _SignatureV4MultiRegion__WEBPACK_IMPORTED_MODULE_0__.SignatureV4MultiRegion)
/* harmony export */ });
/* harmony import */ var _SignatureV4MultiRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SignatureV4MultiRegion */ "./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignatureV4": () => (/* binding */ SignatureV4)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-middleware */ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js");
/* harmony import */ var _credentialDerivation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./credentialDerivation */ "./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js");
/* harmony import */ var _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getCanonicalHeaders */ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js");
/* harmony import */ var _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getCanonicalQuery */ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js");
/* harmony import */ var _getPayloadHash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getPayloadHash */ "./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js");
/* harmony import */ var _headerUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./headerUtil */ "./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js");
/* harmony import */ var _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./moveHeadersToQuery */ "./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js");
/* harmony import */ var _prepareRequest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./prepareRequest */ "./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js");
/* harmony import */ var _utilDate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utilDate */ "./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js");











class SignatureV4 {
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(region);
        this.credentialProvider = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(credentials);
    }
    async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_PRESIGNED_TTL) {
            return Promise.reject("Signature version 4 presigned URLs" + " must have an expiration date less than one week in" + " the future");
        }
        const scope = (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.createScope)(shortDate, region, signingService ?? this.service);
        const request = (0,_moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_8__.moveHeadersToQuery)((0,_prepareRequest__WEBPACK_IMPORTED_MODULE_9__.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
            request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_QUERY_PARAM] = _constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_IDENTIFIER;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0,_getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_4__.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0,_getPayloadHash__WEBPACK_IMPORTED_MODULE_6__.getPayloadHash)(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") {
            return this.signString(toSign, options);
        }
        else if (toSign.headers && toSign.payload) {
            return this.signEvent(toSign, options);
        }
        else {
            return this.signRequest(toSign, options);
        }
    }
    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? (await this.regionProvider());
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.createScope)(shortDate, region, signingService ?? this.service);
        const hashedPayload = await (0,_getPayloadHash__WEBPACK_IMPORTED_MODULE_6__.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hash.digest());
        const stringToSign = [
            _constants__WEBPACK_IMPORTED_MODULE_2__.EVENT_ALGORITHM_IDENTIFIER,
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload,
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
    }
    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const request = (0,_prepareRequest__WEBPACK_IMPORTED_MODULE_9__.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.createScope)(shortDate, region, signingService ?? this.service);
        request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
            request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0,_getPayloadHash__WEBPACK_IMPORTED_MODULE_6__.getPayloadHash)(request, this.sha256);
        if (!(0,_headerUtil__WEBPACK_IMPORTED_MODULE_7__.hasHeader)(_constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER, request.headers) && this.applyChecksum) {
            request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0,_getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_4__.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.AUTH_HEADER] =
            `${_constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_IDENTIFIER} ` +
                `Credential=${credentials.accessKeyId}/${scope}, ` +
                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +
                `Signature=${signature}`;
        return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0,_getCanonicalQuery__WEBPACK_IMPORTED_MODULE_5__.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${_constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")) {
                if (pathSegment?.length === 0)
                    continue;
                if (pathSegment === ".")
                    continue;
                if (pathSegment === "..") {
                    normalizedPathSegments.pop();
                }
                else {
                    normalizedPathSegments.push(pathSegment);
                }
            }
            const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
            const doubleEncoded = encodeURIComponent(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" ||
            typeof credentials.accessKeyId !== "string" ||
            typeof credentials.secretAccessKey !== "string") {
            throw new Error("Resolved credential object is not valid");
        }
    }
}
const formatDate = (now) => {
    const longDate = (0,_utilDate__WEBPACK_IMPORTED_MODULE_10__.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate,
        shortDate: longDate.slice(0, 8),
    };
};
const getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cloneQuery": () => (/* binding */ cloneQuery),
/* harmony export */   "cloneRequest": () => (/* binding */ cloneRequest)
/* harmony export */ });
const cloneRequest = ({ headers, query, ...rest }) => ({
    ...rest,
    headers: { ...headers },
    query: query ? cloneQuery(query) : undefined,
});
const cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param,
    };
}, {});


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/constants.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ALGORITHM_IDENTIFIER": () => (/* binding */ ALGORITHM_IDENTIFIER),
/* harmony export */   "ALGORITHM_IDENTIFIER_V4A": () => (/* binding */ ALGORITHM_IDENTIFIER_V4A),
/* harmony export */   "ALGORITHM_QUERY_PARAM": () => (/* binding */ ALGORITHM_QUERY_PARAM),
/* harmony export */   "ALWAYS_UNSIGNABLE_HEADERS": () => (/* binding */ ALWAYS_UNSIGNABLE_HEADERS),
/* harmony export */   "AMZ_DATE_HEADER": () => (/* binding */ AMZ_DATE_HEADER),
/* harmony export */   "AMZ_DATE_QUERY_PARAM": () => (/* binding */ AMZ_DATE_QUERY_PARAM),
/* harmony export */   "AUTH_HEADER": () => (/* binding */ AUTH_HEADER),
/* harmony export */   "CREDENTIAL_QUERY_PARAM": () => (/* binding */ CREDENTIAL_QUERY_PARAM),
/* harmony export */   "DATE_HEADER": () => (/* binding */ DATE_HEADER),
/* harmony export */   "EVENT_ALGORITHM_IDENTIFIER": () => (/* binding */ EVENT_ALGORITHM_IDENTIFIER),
/* harmony export */   "EXPIRES_QUERY_PARAM": () => (/* binding */ EXPIRES_QUERY_PARAM),
/* harmony export */   "GENERATED_HEADERS": () => (/* binding */ GENERATED_HEADERS),
/* harmony export */   "HOST_HEADER": () => (/* binding */ HOST_HEADER),
/* harmony export */   "KEY_TYPE_IDENTIFIER": () => (/* binding */ KEY_TYPE_IDENTIFIER),
/* harmony export */   "MAX_CACHE_SIZE": () => (/* binding */ MAX_CACHE_SIZE),
/* harmony export */   "MAX_PRESIGNED_TTL": () => (/* binding */ MAX_PRESIGNED_TTL),
/* harmony export */   "PROXY_HEADER_PATTERN": () => (/* binding */ PROXY_HEADER_PATTERN),
/* harmony export */   "REGION_SET_PARAM": () => (/* binding */ REGION_SET_PARAM),
/* harmony export */   "SEC_HEADER_PATTERN": () => (/* binding */ SEC_HEADER_PATTERN),
/* harmony export */   "SHA256_HEADER": () => (/* binding */ SHA256_HEADER),
/* harmony export */   "SIGNATURE_HEADER": () => (/* binding */ SIGNATURE_HEADER),
/* harmony export */   "SIGNATURE_QUERY_PARAM": () => (/* binding */ SIGNATURE_QUERY_PARAM),
/* harmony export */   "SIGNED_HEADERS_QUERY_PARAM": () => (/* binding */ SIGNED_HEADERS_QUERY_PARAM),
/* harmony export */   "TOKEN_HEADER": () => (/* binding */ TOKEN_HEADER),
/* harmony export */   "TOKEN_QUERY_PARAM": () => (/* binding */ TOKEN_QUERY_PARAM),
/* harmony export */   "UNSIGNABLE_PATTERNS": () => (/* binding */ UNSIGNABLE_PATTERNS),
/* harmony export */   "UNSIGNED_PAYLOAD": () => (/* binding */ UNSIGNED_PAYLOAD)
/* harmony export */ });
const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
const REGION_SET_PARAM = "X-Amz-Region-Set";
const AUTH_HEADER = "authorization";
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const DATE_HEADER = "date";
const GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
const SHA256_HEADER = "x-amz-content-sha256";
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
const HOST_HEADER = "host";
const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true,
};
const PROXY_HEADER_PATTERN = /^proxy-/;
const SEC_HEADER_PATTERN = /^sec-/;
const UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
const ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
const MAX_CACHE_SIZE = 50;
const KEY_TYPE_IDENTIFIER = "aws4_request";
const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearCredentialCache": () => (/* binding */ clearCredentialCache),
/* harmony export */   "createScope": () => (/* binding */ createScope),
/* harmony export */   "getSigningKey": () => (/* binding */ getSigningKey)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js");


const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${_constants__WEBPACK_IMPORTED_MODULE_1__.KEY_TYPE_IDENTIFIER}`;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > _constants__WEBPACK_IMPORTED_MODULE_1__.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [shortDate, region, service, _constants__WEBPACK_IMPORTED_MODULE_1__.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
    }
    return (signingKeyCache[cacheKey] = key);
};
const clearCredentialCache = () => {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
    });
};
const hmac = (ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCanonicalHeaders": () => (/* binding */ getCanonicalHeaders)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js");

const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == undefined) {
            continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in _constants__WEBPACK_IMPORTED_MODULE_0__.ALWAYS_UNSIGNABLE_HEADERS ||
            unsignableHeaders?.has(canonicalHeaderName) ||
            _constants__WEBPACK_IMPORTED_MODULE_0__.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
            _constants__WEBPACK_IMPORTED_MODULE_0__.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
                continue;
            }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCanonicalQuery": () => (/* binding */ getCanonicalQuery)
/* harmony export */ });
/* harmony import */ var _aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-uri-escape */ "./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js");


const getCanonicalQuery = ({ query = {} }) => {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_1__.SIGNATURE_HEADER) {
            continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
            serialized[key] = `${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key)}=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`;
        }
        else if (Array.isArray(value)) {
            serialized[key] = value
                .slice(0)
                .sort()
                .reduce((encoded, value) => encoded.concat([`${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key)}=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`]), [])
                .join("&");
        }
    }
    return keys
        .map((key) => serialized[key])
        .filter((serialized) => serialized)
        .join("&");
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPayloadHash": () => (/* binding */ getPayloadHash)
/* harmony export */ });
/* harmony import */ var _aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/is-array-buffer */ "./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js");



const getPayloadHash = async ({ headers, body }, hashConstructor) => {
    for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER) {
            return headers[headerName];
        }
    }
    if (body == undefined) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    }
    else if (typeof body === "string" || ArrayBuffer.isView(body) || (0,_aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__.toHex)(await hashCtor.digest());
    }
    return _constants__WEBPACK_IMPORTED_MODULE_2__.UNSIGNED_PAYLOAD;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteHeader": () => (/* binding */ deleteHeader),
/* harmony export */   "getHeaderValue": () => (/* binding */ getHeaderValue),
/* harmony export */   "hasHeader": () => (/* binding */ hasHeader)
/* harmony export */ });
const hasHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return true;
        }
    }
    return false;
};
const getHeaderValue = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return headers[headerName];
        }
    }
    return undefined;
};
const deleteHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            delete headers[headerName];
        }
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignatureV4": () => (/* reexport safe */ _SignatureV4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4),
/* harmony export */   "clearCredentialCache": () => (/* reexport safe */ _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__.clearCredentialCache),
/* harmony export */   "createScope": () => (/* reexport safe */ _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__.createScope),
/* harmony export */   "getCanonicalHeaders": () => (/* reexport safe */ _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_1__.getCanonicalHeaders),
/* harmony export */   "getCanonicalQuery": () => (/* reexport safe */ _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_2__.getCanonicalQuery),
/* harmony export */   "getPayloadHash": () => (/* reexport safe */ _getPayloadHash__WEBPACK_IMPORTED_MODULE_3__.getPayloadHash),
/* harmony export */   "getSigningKey": () => (/* reexport safe */ _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__.getSigningKey),
/* harmony export */   "moveHeadersToQuery": () => (/* reexport safe */ _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_4__.moveHeadersToQuery),
/* harmony export */   "prepareRequest": () => (/* reexport safe */ _prepareRequest__WEBPACK_IMPORTED_MODULE_5__.prepareRequest)
/* harmony export */ });
/* harmony import */ var _SignatureV4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SignatureV4 */ "./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js");
/* harmony import */ var _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCanonicalHeaders */ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js");
/* harmony import */ var _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getCanonicalQuery */ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js");
/* harmony import */ var _getPayloadHash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getPayloadHash */ "./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js");
/* harmony import */ var _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./moveHeadersToQuery */ "./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js");
/* harmony import */ var _prepareRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./prepareRequest */ "./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js");
/* harmony import */ var _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentialDerivation */ "./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js");









/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moveHeadersToQuery": () => (/* binding */ moveHeadersToQuery)
/* harmony export */ });
/* harmony import */ var _cloneRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloneRequest */ "./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js");

const moveHeadersToQuery = (request, options = {}) => {
    const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0,_cloneRequest__WEBPACK_IMPORTED_MODULE_0__.cloneRequest)(request);
    for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prepareRequest": () => (/* binding */ prepareRequest)
/* harmony export */ });
/* harmony import */ var _cloneRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloneRequest */ "./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js");


const prepareRequest = (request) => {
    request = typeof request.clone === "function" ? request.clone() : (0,_cloneRequest__WEBPACK_IMPORTED_MODULE_0__.cloneRequest)(request);
    for (const headerName of Object.keys(request.headers)) {
        if (_constants__WEBPACK_IMPORTED_MODULE_1__.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
            delete request.headers[headerName];
        }
    }
    return request;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iso8601": () => (/* binding */ iso8601),
/* harmony export */   "toDate": () => (/* binding */ toDate)
/* harmony export */ });
const iso8601 = (time) => toDate(time)
    .toISOString()
    .replace(/\.\d{3}Z$/, "Z");
const toDate = (time) => {
    if (typeof time === "number") {
        return new Date(time * 1000);
    }
    if (typeof time === "string") {
        if (Number(time)) {
            return new Date(Number(time) * 1000);
        }
        return new Date(time);
    }
    return time;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/NoOpLogger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/NoOpLogger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoOpLogger": () => (/* binding */ NoOpLogger)
/* harmony export */ });
class NoOpLogger {
    trace() { }
    debug() { }
    info() { }
    warn() { }
    error() { }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/client.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/client.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Client": () => (/* binding */ Client)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-stack */ "./node_modules/@aws-sdk/middleware-stack/dist-es/index.js");

class Client {
    constructor(config) {
        this.middlewareStack = (0,_aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__.constructStack)();
        this.config = config;
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
            handler(command)
                .then((result) => callback(null, result.output), (err) => callback(err))
                .catch(() => { });
        }
        else {
            return handler(command).then((result) => result.output);
        }
    }
    destroy() {
        if (this.config.requestHandler.destroy)
            this.config.requestHandler.destroy();
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/command.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/command.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Command": () => (/* binding */ Command)
/* harmony export */ });
/* harmony import */ var _aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-stack */ "./node_modules/@aws-sdk/middleware-stack/dist-es/index.js");

class Command {
    constructor() {
        this.middlewareStack = (0,_aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__.constructStack)();
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SENSITIVE_STRING": () => (/* binding */ SENSITIVE_STRING)
/* harmony export */ });
const SENSITIVE_STRING = "***SensitiveInformation***";


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dateToUtcString": () => (/* binding */ dateToUtcString),
/* harmony export */   "parseEpochTimestamp": () => (/* binding */ parseEpochTimestamp),
/* harmony export */   "parseRfc3339DateTime": () => (/* binding */ parseRfc3339DateTime),
/* harmony export */   "parseRfc7231DateTime": () => (/* binding */ parseRfc7231DateTime)
/* harmony export */ });
/* harmony import */ var _parse_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-utils */ "./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js");

const DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
const MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
const RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
const parseRfc3339DateTime = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
};
const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
const parseRfc7231DateTime = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds,
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
const parseEpochTimestamp = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    let valueAsDouble;
    if (typeof value === "number") {
        valueAsDouble = value;
    }
    else if (typeof value === "string") {
        valueAsDouble = (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseDouble)(value);
    }
    else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    }
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    }
    return new Date(Math.round(valueAsDouble * 1000));
};
const buildDate = (year, month, day, time) => {
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value) => {
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
    }
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;
const adjustRfc850Year = (input) => {
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
};
const parseMonthByShortName = (value) => {
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const validateDayOfMonth = (year, month, day) => {
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
    }
    if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
};
const isLeapYear = (year) => {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper) => {
    const dateVal = (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseByte)(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
};
const parseMilliseconds = (value) => {
    if (value === null || value === undefined) {
        return 0;
    }
    return (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseFloat32)("0." + value) * 1000;
};
const stripLeadingZeroes = (value) => {
    let idx = 0;
    while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
    }
    if (idx === 0) {
        return value;
    }
    return value.slice(idx);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throwDefaultError": () => (/* binding */ throwDefaultError)
/* harmony export */ });
/* harmony import */ var _exceptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exceptions */ "./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js");

const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata,
    });
    throw (0,_exceptions__WEBPACK_IMPORTED_MODULE_0__.decorateServiceException)(response, parsedBody);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadConfigsForDefaultMode": () => (/* binding */ loadConfigsForDefaultMode)
/* harmony export */ });
const loadConfigsForDefaultMode = (mode) => {
    switch (mode) {
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100,
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100,
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100,
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000,
            };
        default:
            return {};
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emitWarningIfUnsupportedVersion": () => (/* binding */ emitWarningIfUnsupportedVersion)
/* harmony export */ });
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version) => {
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
        warningEmitted = true;
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServiceException": () => (/* binding */ ServiceException),
/* harmony export */   "decorateServiceException": () => (/* binding */ decorateServiceException)
/* harmony export */ });
class ServiceException extends Error {
    constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
}
const decorateServiceException = (exception, additions = {}) => {
    Object.entries(additions)
        .filter(([, v]) => v !== undefined)
        .forEach(([k, v]) => {
        if (exception[k] == undefined || exception[k] === "") {
            exception[k] = v;
        }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extendedEncodeURIComponent": () => (/* binding */ extendedEncodeURIComponent)
/* harmony export */ });
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getArrayIfSingleItem": () => (/* binding */ getArrayIfSingleItem)
/* harmony export */ });
const getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getValueFromTextNode": () => (/* binding */ getValueFromTextNode)
/* harmony export */ });
const getValueFromTextNode = (obj) => {
    const textNodeName = "#text";
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
            obj[key] = obj[key][textNodeName];
        }
        else if (typeof obj[key] === "object" && obj[key] !== null) {
            obj[key] = getValueFromTextNode(obj[key]);
        }
    }
    return obj;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Client": () => (/* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_1__.Client),
/* harmony export */   "Command": () => (/* reexport safe */ _command__WEBPACK_IMPORTED_MODULE_2__.Command),
/* harmony export */   "LazyJsonString": () => (/* reexport safe */ _lazy_json__WEBPACK_IMPORTED_MODULE_12__.LazyJsonString),
/* harmony export */   "NoOpLogger": () => (/* reexport safe */ _NoOpLogger__WEBPACK_IMPORTED_MODULE_0__.NoOpLogger),
/* harmony export */   "SENSITIVE_STRING": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_3__.SENSITIVE_STRING),
/* harmony export */   "ServiceException": () => (/* reexport safe */ _exceptions__WEBPACK_IMPORTED_MODULE_8__.ServiceException),
/* harmony export */   "StringWrapper": () => (/* reexport safe */ _lazy_json__WEBPACK_IMPORTED_MODULE_12__.StringWrapper),
/* harmony export */   "convertMap": () => (/* reexport safe */ _object_mapping__WEBPACK_IMPORTED_MODULE_13__.convertMap),
/* harmony export */   "dateToUtcString": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_4__.dateToUtcString),
/* harmony export */   "decorateServiceException": () => (/* reexport safe */ _exceptions__WEBPACK_IMPORTED_MODULE_8__.decorateServiceException),
/* harmony export */   "emitWarningIfUnsupportedVersion": () => (/* reexport safe */ _emitWarningIfUnsupportedVersion__WEBPACK_IMPORTED_MODULE_7__.emitWarningIfUnsupportedVersion),
/* harmony export */   "expectBoolean": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectBoolean),
/* harmony export */   "expectByte": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectByte),
/* harmony export */   "expectFloat32": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectFloat32),
/* harmony export */   "expectInt": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectInt),
/* harmony export */   "expectInt32": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectInt32),
/* harmony export */   "expectLong": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectLong),
/* harmony export */   "expectNonNull": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectNonNull),
/* harmony export */   "expectNumber": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectNumber),
/* harmony export */   "expectObject": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectObject),
/* harmony export */   "expectShort": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectShort),
/* harmony export */   "expectString": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectString),
/* harmony export */   "expectUnion": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.expectUnion),
/* harmony export */   "extendedEncodeURIComponent": () => (/* reexport safe */ _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_9__.extendedEncodeURIComponent),
/* harmony export */   "getArrayIfSingleItem": () => (/* reexport safe */ _get_array_if_single_item__WEBPACK_IMPORTED_MODULE_10__.getArrayIfSingleItem),
/* harmony export */   "getValueFromTextNode": () => (/* reexport safe */ _get_value_from_text_node__WEBPACK_IMPORTED_MODULE_11__.getValueFromTextNode),
/* harmony export */   "handleFloat": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.handleFloat),
/* harmony export */   "limitedParseDouble": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.limitedParseDouble),
/* harmony export */   "limitedParseFloat": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.limitedParseFloat),
/* harmony export */   "limitedParseFloat32": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.limitedParseFloat32),
/* harmony export */   "loadConfigsForDefaultMode": () => (/* reexport safe */ _defaults_mode__WEBPACK_IMPORTED_MODULE_6__.loadConfigsForDefaultMode),
/* harmony export */   "logger": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.logger),
/* harmony export */   "map": () => (/* reexport safe */ _object_mapping__WEBPACK_IMPORTED_MODULE_13__.map),
/* harmony export */   "parseBoolean": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.parseBoolean),
/* harmony export */   "parseEpochTimestamp": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_4__.parseEpochTimestamp),
/* harmony export */   "parseRfc3339DateTime": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_4__.parseRfc3339DateTime),
/* harmony export */   "parseRfc7231DateTime": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_4__.parseRfc7231DateTime),
/* harmony export */   "resolvedPath": () => (/* reexport safe */ _resolve_path__WEBPACK_IMPORTED_MODULE_15__.resolvedPath),
/* harmony export */   "serializeFloat": () => (/* reexport safe */ _ser_utils__WEBPACK_IMPORTED_MODULE_16__.serializeFloat),
/* harmony export */   "splitEvery": () => (/* reexport safe */ _split_every__WEBPACK_IMPORTED_MODULE_17__.splitEvery),
/* harmony export */   "strictParseByte": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseByte),
/* harmony export */   "strictParseDouble": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseDouble),
/* harmony export */   "strictParseFloat": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseFloat),
/* harmony export */   "strictParseFloat32": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseFloat32),
/* harmony export */   "strictParseInt": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseInt),
/* harmony export */   "strictParseInt32": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseInt32),
/* harmony export */   "strictParseLong": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseLong),
/* harmony export */   "strictParseShort": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_14__.strictParseShort),
/* harmony export */   "throwDefaultError": () => (/* reexport safe */ _default_error_handler__WEBPACK_IMPORTED_MODULE_5__.throwDefaultError)
/* harmony export */ });
/* harmony import */ var _NoOpLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoOpLogger */ "./node_modules/@aws-sdk/smithy-client/dist-es/NoOpLogger.js");
/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client */ "./node_modules/@aws-sdk/smithy-client/dist-es/client.js");
/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./command */ "./node_modules/@aws-sdk/smithy-client/dist-es/command.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/smithy-client/dist-es/constants.js");
/* harmony import */ var _date_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-utils */ "./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js");
/* harmony import */ var _default_error_handler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./default-error-handler */ "./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js");
/* harmony import */ var _defaults_mode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./defaults-mode */ "./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js");
/* harmony import */ var _emitWarningIfUnsupportedVersion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./emitWarningIfUnsupportedVersion */ "./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js");
/* harmony import */ var _exceptions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./exceptions */ "./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js");
/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extended-encode-uri-component */ "./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js");
/* harmony import */ var _get_array_if_single_item__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./get-array-if-single-item */ "./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js");
/* harmony import */ var _get_value_from_text_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./get-value-from-text-node */ "./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js");
/* harmony import */ var _lazy_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lazy-json */ "./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js");
/* harmony import */ var _object_mapping__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./object-mapping */ "./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js");
/* harmony import */ var _parse_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parse-utils */ "./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js");
/* harmony import */ var _resolve_path__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resolve-path */ "./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js");
/* harmony import */ var _ser_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ser-utils */ "./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js");
/* harmony import */ var _split_every__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./split-every */ "./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js");




















/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LazyJsonString": () => (/* binding */ LazyJsonString),
/* harmony export */   "StringWrapper": () => (/* binding */ StringWrapper)
/* harmony export */ });
const StringWrapper = function () {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [null, ...arguments]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true,
    },
});
Object.setPrototypeOf(StringWrapper, String);
class LazyJsonString extends StringWrapper {
    deserializeJSON() {
        return JSON.parse(super.toString());
    }
    toJSON() {
        return super.toString();
    }
    static fromObject(object) {
        if (object instanceof LazyJsonString) {
            return object;
        }
        else if (object instanceof String || typeof object === "string") {
            return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertMap": () => (/* binding */ convertMap),
/* harmony export */   "map": () => (/* binding */ map)
/* harmony export */ });
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    }
    else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        }
        else {
            instructions = arg1;
        }
    }
    for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        let [filter, value] = instructions[key];
        if (typeof value === "function") {
            let _value;
            const defaultFilterPassed = filter === undefined && (_value = value()) != null;
            const customFilterPassed = (typeof filter === "function" && !!filter(void 0)) || (typeof filter !== "function" && !!filter);
            if (defaultFilterPassed) {
                target[key] = _value;
            }
            else if (customFilterPassed) {
                target[key] = value();
            }
        }
        else {
            const defaultFilterPassed = filter === undefined && value != null;
            const customFilterPassed = (typeof filter === "function" && !!filter(value)) || (typeof filter !== "function" && !!filter);
            if (defaultFilterPassed || customFilterPassed) {
                target[key] = value;
            }
        }
    }
    return target;
}
const convertMap = (target) => {
    const output = {};
    for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
    }
    return output;
};
const mapWithFilter = (target, filter, instructions) => {
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
            _instructions[key] = value;
        }
        else {
            if (typeof value === "function") {
                _instructions[key] = [filter, value()];
            }
            else {
                _instructions[key] = [filter, value];
            }
        }
        return _instructions;
    }, {}));
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expectBoolean": () => (/* binding */ expectBoolean),
/* harmony export */   "expectByte": () => (/* binding */ expectByte),
/* harmony export */   "expectFloat32": () => (/* binding */ expectFloat32),
/* harmony export */   "expectInt": () => (/* binding */ expectInt),
/* harmony export */   "expectInt32": () => (/* binding */ expectInt32),
/* harmony export */   "expectLong": () => (/* binding */ expectLong),
/* harmony export */   "expectNonNull": () => (/* binding */ expectNonNull),
/* harmony export */   "expectNumber": () => (/* binding */ expectNumber),
/* harmony export */   "expectObject": () => (/* binding */ expectObject),
/* harmony export */   "expectShort": () => (/* binding */ expectShort),
/* harmony export */   "expectString": () => (/* binding */ expectString),
/* harmony export */   "expectUnion": () => (/* binding */ expectUnion),
/* harmony export */   "handleFloat": () => (/* binding */ handleFloat),
/* harmony export */   "limitedParseDouble": () => (/* binding */ limitedParseDouble),
/* harmony export */   "limitedParseFloat": () => (/* binding */ limitedParseFloat),
/* harmony export */   "limitedParseFloat32": () => (/* binding */ limitedParseFloat32),
/* harmony export */   "logger": () => (/* binding */ logger),
/* harmony export */   "parseBoolean": () => (/* binding */ parseBoolean),
/* harmony export */   "strictParseByte": () => (/* binding */ strictParseByte),
/* harmony export */   "strictParseDouble": () => (/* binding */ strictParseDouble),
/* harmony export */   "strictParseFloat": () => (/* binding */ strictParseFloat),
/* harmony export */   "strictParseFloat32": () => (/* binding */ strictParseFloat32),
/* harmony export */   "strictParseInt": () => (/* binding */ strictParseInt),
/* harmony export */   "strictParseInt32": () => (/* binding */ strictParseInt32),
/* harmony export */   "strictParseLong": () => (/* binding */ strictParseLong),
/* harmony export */   "strictParseShort": () => (/* binding */ strictParseShort)
/* harmony export */ });
const parseBoolean = (value) => {
    switch (value) {
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
const expectBoolean = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "number") {
        if (value === 0 || value === 1) {
            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
            return false;
        }
        if (value === 1) {
            return true;
        }
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
            return false;
        }
        if (lower === "true") {
            return true;
        }
    }
    if (typeof value === "boolean") {
        return value;
    }
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
const expectNumber = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) {
                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            }
            return parsed;
        }
    }
    if (typeof value === "number") {
        return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value) => {
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
            throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
    }
    return expected;
};
const expectLong = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
const expectInt = expectLong;
const expectInt32 = (value) => expectSizedInt(value, 32);
const expectShort = (value) => expectSizedInt(value, 16);
const expectByte = (value) => expectSizedInt(value, 8);
const expectSizedInt = (value, size) => {
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
};
const castInt = (value, size) => {
    switch (size) {
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location) => {
    if (value === null || value === undefined) {
        if (location) {
            throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
const expectObject = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
        return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
const expectString = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        return value;
    }
    if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
const expectUnion = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject)
        .filter(([, v]) => v != null)
        .map(([k]) => k);
    if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
};
const strictParseDouble = (value) => {
    if (typeof value == "string") {
        return expectNumber(parseNumber(value));
    }
    return expectNumber(value);
};
const strictParseFloat = strictParseDouble;
const strictParseFloat32 = (value) => {
    if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
    }
    return expectFloat32(value);
};
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value) => {
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
};
const limitedParseDouble = (value) => {
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return expectNumber(value);
};
const handleFloat = limitedParseDouble;
const limitedParseFloat = limitedParseDouble;
const limitedParseFloat32 = (value) => {
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return expectFloat32(value);
};
const parseFloatString = (value) => {
    switch (value) {
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value) => {
    if (typeof value === "string") {
        return expectLong(parseNumber(value));
    }
    return expectLong(value);
};
const strictParseInt = strictParseLong;
const strictParseInt32 = (value) => {
    if (typeof value === "string") {
        return expectInt32(parseNumber(value));
    }
    return expectInt32(value);
};
const strictParseShort = (value) => {
    if (typeof value === "string") {
        return expectShort(parseNumber(value));
    }
    return expectShort(value);
};
const strictParseByte = (value) => {
    if (typeof value === "string") {
        return expectByte(parseNumber(value));
    }
    return expectByte(value);
};
const stackTraceWarning = (message) => {
    return String(new TypeError(message).stack || message)
        .split("\n")
        .slice(0, 5)
        .filter((s) => !s.includes("stackTraceWarning"))
        .join("\n");
};
const logger = {
    warn: console.warn,
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolvedPath": () => (/* binding */ resolvedPath)
/* harmony export */ });
/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extended-encode-uri-component */ "./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js");

const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel
            ? labelValue
                .split("/")
                .map((segment) => (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(segment))
                .join("/")
            : (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "serializeFloat": () => (/* binding */ serializeFloat)
/* harmony export */ });
const serializeFloat = (value) => {
    if (value !== value) {
        return "NaN";
    }
    switch (value) {
        case Infinity:
            return "Infinity";
        case -Infinity:
            return "-Infinity";
        default:
            return value;
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitEvery": () => (/* binding */ splitEvery)
/* harmony export */ });
function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    }
    const segments = value.split(delimiter);
    if (numDelimiters === 1) {
        return segments;
    }
    const compoundSegments = [];
    let currentSegment = "";
    for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
            currentSegment = segments[i];
        }
        else {
            currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
            compoundSegments.push(currentSegment);
            currentSegment = "";
        }
    }
    if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
    }
    return compoundSegments;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/abort.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/abort.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/auth.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/auth.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/client.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/client.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/command.js":
/*!********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/command.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/credentials.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/credentials.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/crypto.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/crypto.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/endpoint.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/endpoint.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EndpointURLScheme": () => (/* binding */ EndpointURLScheme)
/* harmony export */ });
var EndpointURLScheme;
(function (EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme || (EndpointURLScheme = {}));


/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/eventStream.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/eventStream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/http.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/http.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EndpointURLScheme": () => (/* reexport safe */ _endpoint__WEBPACK_IMPORTED_MODULE_6__.EndpointURLScheme)
/* harmony export */ });
/* harmony import */ var _abort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abort */ "./node_modules/@aws-sdk/types/dist-es/abort.js");
/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */ "./node_modules/@aws-sdk/types/dist-es/auth.js");
/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client */ "./node_modules/@aws-sdk/types/dist-es/client.js");
/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./command */ "./node_modules/@aws-sdk/types/dist-es/command.js");
/* harmony import */ var _credentials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./credentials */ "./node_modules/@aws-sdk/types/dist-es/credentials.js");
/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./crypto */ "./node_modules/@aws-sdk/types/dist-es/crypto.js");
/* harmony import */ var _endpoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./endpoint */ "./node_modules/@aws-sdk/types/dist-es/endpoint.js");
/* harmony import */ var _eventStream__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./eventStream */ "./node_modules/@aws-sdk/types/dist-es/eventStream.js");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./http */ "./node_modules/@aws-sdk/types/dist-es/http.js");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logger */ "./node_modules/@aws-sdk/types/dist-es/logger.js");
/* harmony import */ var _middleware__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./middleware */ "./node_modules/@aws-sdk/types/dist-es/middleware.js");
/* harmony import */ var _pagination__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pagination */ "./node_modules/@aws-sdk/types/dist-es/pagination.js");
/* harmony import */ var _profile__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./profile */ "./node_modules/@aws-sdk/types/dist-es/profile.js");
/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./response */ "./node_modules/@aws-sdk/types/dist-es/response.js");
/* harmony import */ var _serde__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./serde */ "./node_modules/@aws-sdk/types/dist-es/serde.js");
/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shapes */ "./node_modules/@aws-sdk/types/dist-es/shapes.js");
/* harmony import */ var _signature__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./signature */ "./node_modules/@aws-sdk/types/dist-es/signature.js");
/* harmony import */ var _stream__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./stream */ "./node_modules/@aws-sdk/types/dist-es/stream.js");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./token */ "./node_modules/@aws-sdk/types/dist-es/token.js");
/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./transfer */ "./node_modules/@aws-sdk/types/dist-es/transfer.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./util */ "./node_modules/@aws-sdk/types/dist-es/util.js");
/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./waiter */ "./node_modules/@aws-sdk/types/dist-es/waiter.js");
























/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/logger.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/logger.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/middleware.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/middleware.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/pagination.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/pagination.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/profile.js":
/*!********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/profile.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/response.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/response.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/serde.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/serde.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/shapes.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/shapes.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/signature.js":
/*!**********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/signature.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/stream.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/stream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/token.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/token.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/transfer.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/transfer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/util.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/waiter.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/waiter.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/url-parser/dist-es/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/url-parser/dist-es/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseUrl": () => (/* binding */ parseUrl)
/* harmony export */ });
/* harmony import */ var _aws_sdk_querystring_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/querystring-parser */ "./node_modules/@aws-sdk/querystring-parser/dist-es/index.js");

const parseUrl = (url) => {
    if (typeof url === "string") {
        return parseUrl(new URL(url));
    }
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) {
        query = (0,_aws_sdk_querystring_parser__WEBPACK_IMPORTED_MODULE_0__.parseQueryString)(search);
    }
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "build": () => (/* binding */ build),
/* harmony export */   "parse": () => (/* binding */ parse),
/* harmony export */   "validate": () => (/* binding */ validate)
/* harmony export */ });
const validate = (str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
const parse = (arn) => {
    const segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn")
        throw new Error("Malformed ARN");
    const [, partition, service, region, accountId, ...resource] = segments;
    return {
        partition,
        service,
        region,
        accountId,
        resource: resource.join(":"),
    };
};
const build = (arnObject) => {
    const { partition = "aws", service, region, accountId, resource } = arnObject;
    if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
        throw new Error("Input ARN object is invalid");
    }
    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "alphabetByEncoding": () => (/* binding */ alphabetByEncoding),
/* harmony export */   "alphabetByValue": () => (/* binding */ alphabetByValue),
/* harmony export */   "bitsPerByte": () => (/* binding */ bitsPerByte),
/* harmony export */   "bitsPerLetter": () => (/* binding */ bitsPerLetter),
/* harmony export */   "maxLetterValue": () => (/* binding */ maxLetterValue)
/* harmony export */ });
const alphabetByEncoding = {};
const alphabetByValue = new Array(64);
for (let i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
    const char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
}
for (let i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
    const char = String.fromCharCode(i + start);
    const index = i + 26;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
for (let i = 0; i < 10; i++) {
    alphabetByEncoding[i.toString(10)] = i + 52;
    const char = i.toString(10);
    const index = i + 52;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
const bitsPerLetter = 6;
const bitsPerByte = 8;
const maxLetterValue = 0b111111;



/***/ }),

/***/ "./node_modules/@aws-sdk/util-base64/dist-es/fromBase64.browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-base64/dist-es/fromBase64.browser.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromBase64": () => (/* binding */ fromBase64)
/* harmony export */ });
/* harmony import */ var _constants_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.browser */ "./node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js");

const fromBase64 = (input) => {
    let totalByteLength = (input.length / 4) * 3;
    if (input.slice(-2) === "==") {
        totalByteLength -= 2;
    }
    else if (input.slice(-1) === "=") {
        totalByteLength--;
    }
    const out = new ArrayBuffer(totalByteLength);
    const dataView = new DataView(out);
    for (let i = 0; i < input.length; i += 4) {
        let bits = 0;
        let bitLength = 0;
        for (let j = i, limit = i + 3; j <= limit; j++) {
            if (input[j] !== "=") {
                if (!(input[j] in _constants_browser__WEBPACK_IMPORTED_MODULE_0__.alphabetByEncoding)) {
                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);
                }
                bits |= _constants_browser__WEBPACK_IMPORTED_MODULE_0__.alphabetByEncoding[input[j]] << ((limit - j) * _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerLetter);
                bitLength += _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerLetter;
            }
            else {
                bits >>= _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerLetter;
            }
        }
        const chunkOffset = (i / 4) * 3;
        bits >>= bitLength % _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerByte;
        const byteLength = Math.floor(bitLength / _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerByte);
        for (let k = 0; k < byteLength; k++) {
            const offset = (byteLength - k - 1) * _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerByte;
            dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);
        }
    }
    return new Uint8Array(out);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-base64/dist-es/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-base64/dist-es/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromBase64": () => (/* reexport safe */ _fromBase64__WEBPACK_IMPORTED_MODULE_0__.fromBase64),
/* harmony export */   "toBase64": () => (/* reexport safe */ _toBase64__WEBPACK_IMPORTED_MODULE_1__.toBase64)
/* harmony export */ });
/* harmony import */ var _fromBase64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromBase64 */ "./node_modules/@aws-sdk/util-base64/dist-es/fromBase64.browser.js");
/* harmony import */ var _toBase64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toBase64 */ "./node_modules/@aws-sdk/util-base64/dist-es/toBase64.browser.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/util-base64/dist-es/toBase64.browser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-base64/dist-es/toBase64.browser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toBase64": () => (/* binding */ toBase64)
/* harmony export */ });
/* harmony import */ var _constants_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.browser */ "./node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js");

function toBase64(input) {
    let str = "";
    for (let i = 0; i < input.length; i += 3) {
        let bits = 0;
        let bitLength = 0;
        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
            bits |= input[j] << ((limit - j - 1) * _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerByte);
            bitLength += _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerByte;
        }
        const bitClusterCount = Math.ceil(bitLength / _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerLetter);
        bits <<= bitClusterCount * _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerLetter - bitLength;
        for (let k = 1; k <= bitClusterCount; k++) {
            const offset = (bitClusterCount - k) * _constants_browser__WEBPACK_IMPORTED_MODULE_0__.bitsPerLetter;
            str += _constants_browser__WEBPACK_IMPORTED_MODULE_0__.alphabetByValue[(bits & (_constants_browser__WEBPACK_IMPORTED_MODULE_0__.maxLetterValue << offset)) >> offset];
        }
        str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateBodyLength": () => (/* binding */ calculateBodyLength)
/* harmony export */ });
const calculateBodyLength = (body) => {
    if (typeof body === "string") {
        let len = body.length;
        for (let i = len - 1; i >= 0; i--) {
            const code = body.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff)
                len++;
            else if (code > 0x7ff && code <= 0xffff)
                len += 2;
            if (code >= 0xdc00 && code <= 0xdfff)
                i--;
        }
        return len;
    }
    else if (typeof body.byteLength === "number") {
        return body.byteLength;
    }
    else if (typeof body.size === "number") {
        return body.size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateBodyLength": () => (/* reexport safe */ _calculateBodyLength__WEBPACK_IMPORTED_MODULE_0__.calculateBodyLength)
/* harmony export */ });
/* harmony import */ var _calculateBodyLength__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculateBodyLength */ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectorType": () => (/* binding */ SelectorType),
/* harmony export */   "booleanSelector": () => (/* binding */ booleanSelector)
/* harmony export */ });
var SelectorType;
(function (SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));
const booleanSelector = (obj, key, type) => {
    if (!(key in obj))
        return undefined;
    if (obj[key] === "true")
        return true;
    if (obj[key] === "false")
        return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-config-provider/dist-es/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-config-provider/dist-es/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectorType": () => (/* reexport safe */ _booleanSelector__WEBPACK_IMPORTED_MODULE_0__.SelectorType),
/* harmony export */   "booleanSelector": () => (/* reexport safe */ _booleanSelector__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)
/* harmony export */ });
/* harmony import */ var _booleanSelector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./booleanSelector */ "./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULTS_MODE_OPTIONS": () => (/* binding */ DEFAULTS_MODE_OPTIONS)
/* harmony export */ });
const DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];


/***/ }),

/***/ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveDefaultsModeConfig": () => (/* reexport safe */ _resolveDefaultsModeConfig__WEBPACK_IMPORTED_MODULE_0__.resolveDefaultsModeConfig)
/* harmony export */ });
/* harmony import */ var _resolveDefaultsModeConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolveDefaultsModeConfig */ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveDefaultsModeConfig": () => (/* binding */ resolveDefaultsModeConfig)
/* harmony export */ });
/* harmony import */ var _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/property-provider */ "./node_modules/@aws-sdk/property-provider/dist-es/index.js");
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bowser */ "./node_modules/bowser/es5.js");
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js");



const resolveDefaultsModeConfig = ({ defaultsMode, } = {}) => (0,_aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.memoize)(async () => {
    const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
    switch (mode?.toLowerCase()) {
        case "auto":
            return Promise.resolve(isMobileBrowser() ? "mobile" : "standard");
        case "mobile":
        case "in-region":
        case "cross-region":
        case "standard":
        case "legacy":
            return Promise.resolve(mode?.toLocaleLowerCase());
        case undefined:
            return Promise.resolve("legacy");
        default:
            throw new Error(`Invalid parameter for "defaultsMode", expect ${_constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
    }
});
const isMobileBrowser = () => {
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent
        ? bowser__WEBPACK_IMPORTED_MODULE_1___default().parse(window.navigator.userAgent)
        : undefined;
    const platform = parsedUA?.platform?.type;
    return platform === "tablet" || platform === "mobile";
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debugId": () => (/* binding */ debugId)
/* harmony export */ });
const debugId = "endpoints";


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debugId": () => (/* reexport safe */ _debugId__WEBPACK_IMPORTED_MODULE_0__.debugId),
/* harmony export */   "toDebugString": () => (/* reexport safe */ _toDebugString__WEBPACK_IMPORTED_MODULE_1__.toDebugString)
/* harmony export */ });
/* harmony import */ var _debugId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debugId */ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js");
/* harmony import */ var _toDebugString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDebugString */ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toDebugString": () => (/* binding */ toDebugString)
/* harmony export */ });
function toDebugString(input) {
    if (typeof input !== "object" || input == null) {
        return input;
    }
    if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
}


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EndpointError": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.EndpointError),
/* harmony export */   "partition": () => (/* reexport safe */ _lib_aws_partition__WEBPACK_IMPORTED_MODULE_0__.partition),
/* harmony export */   "resolveEndpoint": () => (/* reexport safe */ _resolveEndpoint__WEBPACK_IMPORTED_MODULE_1__.resolveEndpoint)
/* harmony export */ });
/* harmony import */ var _lib_aws_partition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/aws/partition */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js");
/* harmony import */ var _resolveEndpoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveEndpoint */ "./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isVirtualHostableS3Bucket": () => (/* reexport safe */ _isVirtualHostableS3Bucket__WEBPACK_IMPORTED_MODULE_0__.isVirtualHostableS3Bucket),
/* harmony export */   "parseArn": () => (/* reexport safe */ _parseArn__WEBPACK_IMPORTED_MODULE_1__.parseArn),
/* harmony export */   "partition": () => (/* reexport safe */ _partition__WEBPACK_IMPORTED_MODULE_2__.partition)
/* harmony export */ });
/* harmony import */ var _isVirtualHostableS3Bucket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isVirtualHostableS3Bucket */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js");
/* harmony import */ var _parseArn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parseArn */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js");
/* harmony import */ var _partition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./partition */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js");





/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isVirtualHostableS3Bucket": () => (/* binding */ isVirtualHostableS3Bucket)
/* harmony export */ });
/* harmony import */ var _isIpAddress__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../isIpAddress */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js");
/* harmony import */ var _isValidHostLabel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../isValidHostLabel */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js");


const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
    if (allowSubDomains) {
        for (const label of value.split(".")) {
            if (!isVirtualHostableS3Bucket(label)) {
                return false;
            }
        }
        return true;
    }
    if (!(0,_isValidHostLabel__WEBPACK_IMPORTED_MODULE_1__.isValidHostLabel)(value)) {
        return false;
    }
    if (value.length < 3 || value.length > 63) {
        return false;
    }
    if (value !== value.toLowerCase()) {
        return false;
    }
    if ((0,_isIpAddress__WEBPACK_IMPORTED_MODULE_0__.isIpAddress)(value)) {
        return false;
    }
    return true;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseArn": () => (/* binding */ parseArn)
/* harmony export */ });
const parseArn = (value) => {
    const segments = value.split(":");
    if (segments.length < 6)
        return null;
    const [arn, partition, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
    return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partition": () => (/* binding */ partition)
/* harmony export */ });
/* harmony import */ var _partitions_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partitions.json */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json");

const { partitions } = _partitions_json__WEBPACK_IMPORTED_MODULE_0__;
const DEFAULT_PARTITION = partitions.find((partition) => partition.id === "aws");
const partition = (value) => {
    for (const partition of partitions) {
        const { regions, outputs } = partition;
        for (const [region, regionData] of Object.entries(regions)) {
            if (region === value) {
                return {
                    ...outputs,
                    ...regionData,
                };
            }
        }
    }
    for (const partition of partitions) {
        const { regionRegex, outputs } = partition;
        if (new RegExp(regionRegex).test(value)) {
            return {
                ...outputs,
            };
        }
    }
    if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex," +
            " and default partition with id 'aws' doesn't exist.");
    }
    return {
        ...DEFAULT_PARTITION.outputs,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanEquals": () => (/* binding */ booleanEquals)
/* harmony export */ });
const booleanEquals = (value1, value2) => value1 === value2;


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAttr": () => (/* binding */ getAttr)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _getAttrPathList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAttrPathList */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js");


const getAttr = (value, path) => (0,_getAttrPathList__WEBPACK_IMPORTED_MODULE_1__.getAttrPathList)(path).reduce((acc, index) => {
    if (typeof acc !== "object") {
        throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
    }
    else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
    }
    return acc[index];
}, value);


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAttrPathList": () => (/* binding */ getAttrPathList)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");

const getAttrPathList = (path) => {
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) {
                throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Path: '${path}' does not end with ']'`);
            }
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) {
                throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            }
            if (squareBracketIndex !== 0) {
                pathList.push(part.slice(0, squareBracketIndex));
            }
            pathList.push(arrayIndex);
        }
        else {
            pathList.push(part);
        }
    }
    return pathList;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aws": () => (/* reexport module object */ _aws__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "booleanEquals": () => (/* reexport safe */ _booleanEquals__WEBPACK_IMPORTED_MODULE_1__.booleanEquals),
/* harmony export */   "getAttr": () => (/* reexport safe */ _getAttr__WEBPACK_IMPORTED_MODULE_2__.getAttr),
/* harmony export */   "isSet": () => (/* reexport safe */ _isSet__WEBPACK_IMPORTED_MODULE_3__.isSet),
/* harmony export */   "isValidHostLabel": () => (/* reexport safe */ _isValidHostLabel__WEBPACK_IMPORTED_MODULE_4__.isValidHostLabel),
/* harmony export */   "not": () => (/* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_5__.not),
/* harmony export */   "parseURL": () => (/* reexport safe */ _parseURL__WEBPACK_IMPORTED_MODULE_6__.parseURL),
/* harmony export */   "stringEquals": () => (/* reexport safe */ _stringEquals__WEBPACK_IMPORTED_MODULE_7__.stringEquals),
/* harmony export */   "substring": () => (/* reexport safe */ _substring__WEBPACK_IMPORTED_MODULE_8__.substring),
/* harmony export */   "uriEncode": () => (/* reexport safe */ _uriEncode__WEBPACK_IMPORTED_MODULE_9__.uriEncode)
/* harmony export */ });
/* harmony import */ var _aws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aws */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js");
/* harmony import */ var _booleanEquals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./booleanEquals */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js");
/* harmony import */ var _getAttr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getAttr */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js");
/* harmony import */ var _isSet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isSet */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js");
/* harmony import */ var _isValidHostLabel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isValidHostLabel */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js");
/* harmony import */ var _not__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./not */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js");
/* harmony import */ var _parseURL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parseURL */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js");
/* harmony import */ var _stringEquals__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringEquals */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js");
/* harmony import */ var _substring__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./substring */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js");
/* harmony import */ var _uriEncode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./uriEncode */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js");












/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIpAddress": () => (/* binding */ isIpAddress)
/* harmony export */ });
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value) => IP_V4_REGEX.test(value) || (value.startsWith("[") && value.endsWith("]"));


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isSet": () => (/* binding */ isSet)
/* harmony export */ });
const isSet = (value) => value != null;


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isValidHostLabel": () => (/* binding */ isValidHostLabel)
/* harmony export */ });
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false) => {
    if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels) {
        if (!isValidHostLabel(label)) {
            return false;
        }
    }
    return true;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "not": () => (/* binding */ not)
/* harmony export */ });
const not = (value) => !value;


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseURL": () => (/* binding */ parseURL)
/* harmony export */ });
/* harmony import */ var _aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/types */ "./node_modules/@aws-sdk/types/dist-es/index.js");
/* harmony import */ var _isIpAddress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isIpAddress */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js");


const DEFAULT_PORTS = {
    [_aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme.HTTP]: 80,
    [_aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme.HTTPS]: 443,
};
const parseURL = (value) => {
    const whatwgURL = (() => {
        try {
            if (value instanceof URL) {
                return value;
            }
            if (typeof value === "object" && "hostname" in value) {
                const { hostname, port, protocol = "", path = "", query = {} } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query)
                    .map(([k, v]) => `${k}=${v}`)
                    .join("&");
                return url;
            }
            return new URL(value);
        }
        catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) {
        return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(_aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme).includes(scheme)) {
        return null;
    }
    const isIp = (0,_isIpAddress__WEBPACK_IMPORTED_MODULE_1__.isIpAddress)(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||
        (typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp,
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringEquals": () => (/* binding */ stringEquals)
/* harmony export */ });
const stringEquals = (value1, value2) => value1 === value2;


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "substring": () => (/* binding */ substring)
/* harmony export */ });
const substring = (input, start, stop, reverse) => {
    if (start >= stop || input.length < stop) {
        return null;
    }
    if (!reverse) {
        return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uriEncode": () => (/* binding */ uriEncode)
/* harmony export */ });
const uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveEndpoint": () => (/* binding */ resolveEndpoint)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js");



const resolveEndpoint = (ruleSetObject, options) => {
    const { endpointParams, logger } = options;
    const { parameters, rules } = ruleSetObject;
    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `Initial EndpointParams: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters)
        .filter(([, v]) => v.default != null)
        .map(([k, v]) => [k, v.default]);
    if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
    }
    const requiredParams = Object.entries(parameters)
        .filter(([, v]) => v.required)
        .map(([k]) => k);
    for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
            throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
    }
    const endpoint = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
    if (options.endpointParams?.Endpoint) {
        try {
            const givenEndpoint = new URL(options.endpointParams.Endpoint);
            const { protocol, port } = givenEndpoint;
            endpoint.url.protocol = protocol;
            endpoint.url.port = port;
        }
        catch (e) {
        }
    }
    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `Resolved endpoint: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(endpoint)}`);
    return endpoint;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EndpointError": () => (/* binding */ EndpointError)
/* harmony export */ });
class EndpointError extends Error {
    constructor(message) {
        super(message);
        this.name = "EndpointError";
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EndpointError": () => (/* reexport safe */ _EndpointError__WEBPACK_IMPORTED_MODULE_0__.EndpointError)
/* harmony export */ });
/* harmony import */ var _EndpointError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EndpointError */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js");
/* harmony import */ var _EndpointRuleObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EndpointRuleObject */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js");
/* harmony import */ var _ErrorRuleObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ErrorRuleObject */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js");
/* harmony import */ var _RuleSetObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RuleSetObject */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js");
/* harmony import */ var _TreeRuleObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TreeRuleObject */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js");
/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js");








/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callFunction": () => (/* binding */ callFunction)
/* harmony export */ });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js");
/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js");


const callFunction = ({ fn, argv }, options) => {
    const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(arg, "arg", options));
    return fn.split(".").reduce((acc, key) => acc[key], _lib__WEBPACK_IMPORTED_MODULE_0__)(...evaluatedArgs);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateCondition": () => (/* binding */ evaluateCondition)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _callFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./callFunction */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js");



const evaluateCondition = ({ assign, ...fnArgs }, options) => {
    if (assign && assign in options.referenceRecord) {
        throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`'${assign}' is already defined in Reference Record.`);
    }
    const value = (0,_callFunction__WEBPACK_IMPORTED_MODULE_2__.callFunction)(fnArgs, options);
    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `evaluateCondition: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(fnArgs)} = ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...(assign != null && { toAssign: { name: assign, value } }),
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateConditions": () => (/* binding */ evaluateConditions)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js");
/* harmony import */ var _evaluateCondition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateCondition */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js");


const evaluateConditions = (conditions = [], options) => {
    const conditionsReferenceRecord = {};
    for (const condition of conditions) {
        const { result, toAssign } = (0,_evaluateCondition__WEBPACK_IMPORTED_MODULE_1__.evaluateCondition)(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord,
            },
        });
        if (!result) {
            return { result };
        }
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `assign: ${toAssign.name} := ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(toAssign.value)}`);
        }
    }
    return { result: true, referenceRecord: conditionsReferenceRecord };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateEndpointRule": () => (/* binding */ evaluateEndpointRule)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js");
/* harmony import */ var _evaluateConditions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateConditions */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js");
/* harmony import */ var _getEndpointHeaders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointHeaders */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js");
/* harmony import */ var _getEndpointProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getEndpointProperties */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js");
/* harmony import */ var _getEndpointUrl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getEndpointUrl */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js");





const evaluateEndpointRule = (endpointRule, options) => {
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = (0,_evaluateConditions__WEBPACK_IMPORTED_MODULE_1__.evaluateConditions)(conditions, options);
    if (!result) {
        return;
    }
    const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    };
    const { url, properties, headers } = endpoint;
    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `Resolving endpoint from template: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(endpoint)}`);
    return {
        ...(headers != undefined && {
            headers: (0,_getEndpointHeaders__WEBPACK_IMPORTED_MODULE_2__.getEndpointHeaders)(headers, endpointRuleOptions),
        }),
        ...(properties != undefined && {
            properties: (0,_getEndpointProperties__WEBPACK_IMPORTED_MODULE_3__.getEndpointProperties)(properties, endpointRuleOptions),
        }),
        url: (0,_getEndpointUrl__WEBPACK_IMPORTED_MODULE_4__.getEndpointUrl)(url, endpointRuleOptions),
    };
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateErrorRule": () => (/* binding */ evaluateErrorRule)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _evaluateConditions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateConditions */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js");
/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateExpression */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js");



const evaluateErrorRule = (errorRule, options) => {
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = (0,_evaluateConditions__WEBPACK_IMPORTED_MODULE_1__.evaluateConditions)(conditions, options);
    if (!result) {
        return;
    }
    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError((0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_2__.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    }));
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateExpression": () => (/* binding */ evaluateExpression)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _callFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callFunction */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js");
/* harmony import */ var _evaluateTemplate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateTemplate */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js");
/* harmony import */ var _getReferenceValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getReferenceValue */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js");




const evaluateExpression = (obj, keyName, options) => {
    if (typeof obj === "string") {
        return (0,_evaluateTemplate__WEBPACK_IMPORTED_MODULE_2__.evaluateTemplate)(obj, options);
    }
    else if (obj["fn"]) {
        return (0,_callFunction__WEBPACK_IMPORTED_MODULE_1__.callFunction)(obj, options);
    }
    else if (obj["ref"]) {
        return (0,_getReferenceValue__WEBPACK_IMPORTED_MODULE_3__.getReferenceValue)(obj, options);
    }
    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateRules": () => (/* binding */ evaluateRules)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _evaluateEndpointRule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateEndpointRule */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js");
/* harmony import */ var _evaluateErrorRule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateErrorRule */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js");
/* harmony import */ var _evaluateTreeRule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./evaluateTreeRule */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js");




const evaluateRules = (rules, options) => {
    for (const rule of rules) {
        if (rule.type === "endpoint") {
            const endpointOrUndefined = (0,_evaluateEndpointRule__WEBPACK_IMPORTED_MODULE_1__.evaluateEndpointRule)(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        }
        else if (rule.type === "error") {
            (0,_evaluateErrorRule__WEBPACK_IMPORTED_MODULE_2__.evaluateErrorRule)(rule, options);
        }
        else if (rule.type === "tree") {
            const endpointOrUndefined = (0,_evaluateTreeRule__WEBPACK_IMPORTED_MODULE_3__.evaluateTreeRule)(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        }
        else {
            throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
    }
    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Rules evaluation failed`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateTemplate": () => (/* binding */ evaluateTemplate)
/* harmony export */ });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js");

const evaluateTemplate = (template, options) => {
    const evaluatedTemplateArr = [];
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord,
    };
    let currentIndex = 0;
    while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(currentIndex));
            break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex));
            break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
            currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
            const [refName, attrName] = parameterName.split("#");
            evaluatedTemplateArr.push((0,_lib__WEBPACK_IMPORTED_MODULE_0__.getAttr)(templateContext[refName], attrName));
        }
        else {
            evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateTreeRule": () => (/* binding */ evaluateTreeRule)
/* harmony export */ });
/* harmony import */ var _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateConditions */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js");
/* harmony import */ var _evaluateRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateRules */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js");


const evaluateTreeRule = (treeRule, options) => {
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = (0,_evaluateConditions__WEBPACK_IMPORTED_MODULE_0__.evaluateConditions)(conditions, options);
    if (!result) {
        return;
    }
    return (0,_evaluateRules__WEBPACK_IMPORTED_MODULE_1__.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointHeaders": () => (/* binding */ getEndpointHeaders)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js");


const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
    ...acc,
    [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
            throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
    }),
}), {});


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointProperties": () => (/* binding */ getEndpointProperties)
/* harmony export */ });
/* harmony import */ var _getEndpointProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointProperty */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js");

const getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
    ...acc,
    [propertyKey]: (0,_getEndpointProperty__WEBPACK_IMPORTED_MODULE_0__.getEndpointProperty)(propertyVal, options),
}), {});


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointProperty": () => (/* binding */ getEndpointProperty)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _evaluateTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateTemplate */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js");
/* harmony import */ var _getEndpointProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointProperties */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js");



const getEndpointProperty = (property, options) => {
    if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
    }
    switch (typeof property) {
        case "string":
            return (0,_evaluateTemplate__WEBPACK_IMPORTED_MODULE_1__.evaluateTemplate)(property, options);
        case "object":
            if (property === null) {
                throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Unexpected endpoint property: ${property}`);
            }
            return (0,_getEndpointProperties__WEBPACK_IMPORTED_MODULE_2__.getEndpointProperties)(property, options);
        case "boolean":
            return property;
        default:
            throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEndpointUrl": () => (/* binding */ getEndpointUrl)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js");
/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js");


const getEndpointUrl = (endpointUrl, options) => {
    const expression = (0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
        try {
            return new URL(expression);
        }
        catch (error) {
            console.error(`Failed to construct URL with ${expression}`, error);
            throw error;
        }
    }
    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getReferenceValue": () => (/* binding */ getReferenceValue)
/* harmony export */ });
const getReferenceValue = ({ ref }, options) => {
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord,
    };
    return referenceRecord[ref];
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateRules": () => (/* reexport safe */ _evaluateRules__WEBPACK_IMPORTED_MODULE_0__.evaluateRules)
/* harmony export */ });
/* harmony import */ var _evaluateRules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateRules */ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromHex": () => (/* binding */ fromHex),
/* harmony export */   "toHex": () => (/* binding */ toHex)
/* harmony export */ });
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for (let i = 0; i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
            out[i / 2] = HEX_TO_SHORT[encodedByte];
        }
        else {
            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-locate-window/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "locateWindow": () => (/* binding */ locateWindow)
/* harmony export */ });
const fallbackWindow = {};
function locateWindow() {
    if (typeof window !== "undefined") {
        return window;
    }
    else if (typeof self !== "undefined") {
        return self;
    }
    return fallbackWindow;
}


/***/ }),

/***/ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-middleware/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeProvider": () => (/* reexport safe */ _normalizeProvider__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)
/* harmony export */ });
/* harmony import */ var _normalizeProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalizeProvider */ "./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js");



/***/ }),

/***/ "./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeProvider": () => (/* binding */ normalizeProvider)
/* harmony export */ });
const normalizeProvider = (input) => {
    if (typeof input === "function")
        return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAwsChunkedEncodingStream": () => (/* binding */ getAwsChunkedEncodingStream)
/* harmony export */ });
const getAwsChunkedEncodingStream = (readableStream, options) => {
    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
    const checksumRequired = base64Encoder !== undefined &&
        bodyLengthChecker !== undefined &&
        checksumAlgorithmFn !== undefined &&
        checksumLocationName !== undefined &&
        streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const reader = readableStream.getReader();
    return new ReadableStream({
        async pull(controller) {
            const { value, done } = await reader.read();
            if (done) {
                controller.enqueue(`0\r\n`);
                if (checksumRequired) {
                    const checksum = base64Encoder(await digest);
                    controller.enqueue(`${checksumLocationName}:${checksum}\r\n`);
                    controller.enqueue(`\r\n`);
                }
                controller.close();
            }
            else {
                controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\r\n${value}\r\n`);
            }
        },
    });
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAwsChunkedEncodingStream": () => (/* reexport safe */ _getAwsChunkedEncodingStream__WEBPACK_IMPORTED_MODULE_0__.getAwsChunkedEncodingStream),
/* harmony export */   "sdkStreamMixin": () => (/* reexport safe */ _sdk_stream_mixin__WEBPACK_IMPORTED_MODULE_1__.sdkStreamMixin)
/* harmony export */ });
/* harmony import */ var _getAwsChunkedEncodingStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getAwsChunkedEncodingStream */ "./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js");
/* harmony import */ var _sdk_stream_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdk-stream-mixin */ "./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sdkStreamMixin": () => (/* binding */ sdkStreamMixin)
/* harmony export */ });
/* harmony import */ var _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/fetch-http-handler */ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-base64 */ "./node_modules/@aws-sdk/util-base64/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js");
/* harmony import */ var _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js");




const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdkStreamMixin = (stream) => {
    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async () => {
        if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0,_aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__.streamCollector)(stream);
    };
    const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
            throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\n" +
                "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
    };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: async (encoding) => {
            const buf = await transformToByteArray();
            if (encoding === "base64") {
                return (0,_aws_sdk_util_base64__WEBPACK_IMPORTED_MODULE_1__.toBase64)(buf);
            }
            else if (encoding === "hex") {
                return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_2__.toHex)(buf);
            }
            else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
                return (0,_aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_3__.toUtf8)(buf);
            }
            else if (typeof TextDecoder === "function") {
                return new TextDecoder(encoding).decode(buf);
            }
            else {
                throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
            }
        },
        transformToWebStream: () => {
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            transformed = true;
            if (isBlobInstance(stream)) {
                return blobToWebStream(stream);
            }
            else if (isReadableStreamInstance(stream)) {
                return stream;
            }
            else {
                throw new Error(`Cannot transform payload to web stream, got ${stream}`);
            }
        },
    });
};
const isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
const isReadableStreamInstance = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;


/***/ }),

/***/ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escapeUriPath": () => (/* binding */ escapeUriPath)
/* harmony export */ });
/* harmony import */ var _escape_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-uri */ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js");

const escapeUriPath = (uri) => uri.split("/").map(_escape_uri__WEBPACK_IMPORTED_MODULE_0__.escapeUri).join("/");


/***/ }),

/***/ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escapeUri": () => (/* binding */ escapeUri)
/* harmony export */ });
const escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;


/***/ }),

/***/ "./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escapeUri": () => (/* reexport safe */ _escape_uri__WEBPACK_IMPORTED_MODULE_0__.escapeUri),
/* harmony export */   "escapeUriPath": () => (/* reexport safe */ _escape_uri_path__WEBPACK_IMPORTED_MODULE_1__.escapeUriPath)
/* harmony export */ });
/* harmony import */ var _escape_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-uri */ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js");
/* harmony import */ var _escape_uri_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./escape-uri-path */ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultUserAgent": () => (/* binding */ defaultUserAgent)
/* harmony export */ });
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bowser */ "./node_modules/bowser/es5.js");
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_0__);

const defaultUserAgent = ({ serviceId, clientVersion }) => async () => {
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent
        ? bowser__WEBPACK_IMPORTED_MODULE_0___default().parse(window.navigator.userAgent)
        : undefined;
    const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${parsedUA?.os?.name || "other"}`, parsedUA?.os?.version],
        ["lang/js"],
        ["md/browser", `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`],
    ];
    if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
    }
    return sections;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromUtf8": () => (/* binding */ fromUtf8),
/* harmony export */   "toUtf8": () => (/* binding */ toUtf8)
/* harmony export */ });
/* harmony import */ var _pureJs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pureJs */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js");
/* harmony import */ var _whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./whatwgEncodingApi */ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js");


const fromUtf8 = (input) => typeof TextEncoder === "function" ? (0,_whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(input) : (0,_pureJs__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(input);
const toUtf8 = (input) => typeof TextDecoder === "function" ? (0,_whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(input) : (0,_pureJs__WEBPACK_IMPORTED_MODULE_0__.toUtf8)(input);


/***/ }),

/***/ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromUtf8": () => (/* binding */ fromUtf8),
/* harmony export */   "toUtf8": () => (/* binding */ toUtf8)
/* harmony export */ });
const fromUtf8 = (input) => {
    const bytes = [];
    for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 0x80) {
            bytes.push(value);
        }
        else if (value < 0x800) {
            bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);
        }
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);
            bytes.push((surrogatePair >> 18) | 0b11110000, ((surrogatePair >> 12) & 0b111111) | 0b10000000, ((surrogatePair >> 6) & 0b111111) | 0b10000000, (surrogatePair & 0b111111) | 0b10000000);
        }
        else {
            bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);
        }
    }
    return Uint8Array.from(bytes);
};
const toUtf8 = (input) => {
    let decoded = "";
    for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 0x80) {
            decoded += String.fromCharCode(byte);
        }
        else if (0b11000000 <= byte && byte < 0b11100000) {
            const nextByte = input[++i];
            decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));
        }
        else if (0b11110000 <= byte && byte < 0b101101101) {
            const surrogatePair = [byte, input[++i], input[++i], input[++i]];
            const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
            decoded += decodeURIComponent(encoded);
        }
        else {
            decoded += String.fromCharCode(((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111));
        }
    }
    return decoded;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromUtf8": () => (/* binding */ fromUtf8),
/* harmony export */   "toUtf8": () => (/* binding */ toUtf8)
/* harmony export */ });
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}


/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createWaiter": () => (/* binding */ createWaiter)
/* harmony export */ });
/* harmony import */ var _poller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./poller */ "./node_modules/@aws-sdk/util-waiter/dist-es/poller.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js");
/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js");



const abortTimeout = async (abortSignal) => {
    return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: _waiter__WEBPACK_IMPORTED_MODULE_2__.WaiterState.ABORTED });
    });
};
const createWaiter = async (options, input, acceptorChecks) => {
    const params = {
        ..._waiter__WEBPACK_IMPORTED_MODULE_2__.waiterServiceDefaults,
        ...options,
    };
    (0,_utils__WEBPACK_IMPORTED_MODULE_1__.validateWaiterOptions)(params);
    const exitConditions = [(0,_poller__WEBPACK_IMPORTED_MODULE_0__.runPolling)(params, input, acceptorChecks)];
    if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
    }
    if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
    }
    return Promise.race(exitConditions);
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WaiterState": () => (/* reexport safe */ _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState),
/* harmony export */   "checkExceptions": () => (/* reexport safe */ _waiter__WEBPACK_IMPORTED_MODULE_1__.checkExceptions),
/* harmony export */   "createWaiter": () => (/* reexport safe */ _createWaiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter),
/* harmony export */   "waiterServiceDefaults": () => (/* reexport safe */ _waiter__WEBPACK_IMPORTED_MODULE_1__.waiterServiceDefaults)
/* harmony export */ });
/* harmony import */ var _createWaiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createWaiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js");
/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/poller.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/poller.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "runPolling": () => (/* binding */ runPolling)
/* harmony export */ });
/* harmony import */ var _utils_sleep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/sleep */ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js");
/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waiter */ "./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js");


const exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
    if (attempt > attemptCeiling)
        return maxDelay;
    const delay = minDelay * 2 ** (attempt - 1);
    return randomInRange(minDelay, delay);
};
const randomInRange = (min, max) => min + Math.random() * (max - min);
const runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
    const { state, reason } = await acceptorChecks(client, input);
    if (state !== _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.RETRY) {
        return { state, reason };
    }
    let currentAttempt = 1;
    const waitUntil = Date.now() + maxWaitTime * 1000;
    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
    while (true) {
        if (abortController?.signal?.aborted || abortSignal?.aborted) {
            return { state: _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1000 > waitUntil) {
            return { state: _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.TIMEOUT };
        }
        await (0,_utils_sleep__WEBPACK_IMPORTED_MODULE_0__.sleep)(delay);
        const { state, reason } = await acceptorChecks(client, input);
        if (state !== _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.RETRY) {
            return { state, reason };
        }
        currentAttempt += 1;
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sleep": () => (/* reexport safe */ _sleep__WEBPACK_IMPORTED_MODULE_0__.sleep),
/* harmony export */   "validateWaiterOptions": () => (/* reexport safe */ _validate__WEBPACK_IMPORTED_MODULE_1__.validateWaiterOptions)
/* harmony export */ });
/* harmony import */ var _sleep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sleep */ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js");
/* harmony import */ var _validate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validate */ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js");




/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sleep": () => (/* binding */ sleep)
/* harmony export */ });
const sleep = (seconds) => {
    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "validateWaiterOptions": () => (/* binding */ validateWaiterOptions)
/* harmony export */ });
const validateWaiterOptions = (options) => {
    if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
    }
    else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
    }
    else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
    }
    else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
    else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
};


/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WaiterState": () => (/* binding */ WaiterState),
/* harmony export */   "checkExceptions": () => (/* binding */ checkExceptions),
/* harmony export */   "waiterServiceDefaults": () => (/* binding */ waiterServiceDefaults)
/* harmony export */ });
const waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120,
};
var WaiterState;
(function (WaiterState) {
    WaiterState["ABORTED"] = "ABORTED";
    WaiterState["FAILURE"] = "FAILURE";
    WaiterState["SUCCESS"] = "SUCCESS";
    WaiterState["RETRY"] = "RETRY";
    WaiterState["TIMEOUT"] = "TIMEOUT";
})(WaiterState || (WaiterState = {}));
const checkExceptions = (result) => {
    if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
            ...result,
            reason: "Request was aborted",
        })}`);
        abortError.name = "AbortError";
        throw abortError;
    }
    else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
            ...result,
            reason: "Waiter has timed out",
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
    }
    else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
    }
    return result;
};


/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XmlNode": () => (/* binding */ XmlNode)
/* harmony export */ });
/* harmony import */ var _escape_attribute__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-attribute */ "./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js");
/* harmony import */ var _XmlText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XmlText */ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js");


class XmlNode {
    constructor(name, children = []) {
        this.name = name;
        this.children = children;
        this.attributes = {};
    }
    static of(name, childText, withName) {
        const node = new XmlNode(name);
        if (childText !== undefined) {
            node.addChildNode(new _XmlText__WEBPACK_IMPORTED_MODULE_1__.XmlText(childText));
        }
        if (withName !== undefined) {
            node.withName(withName);
        }
        return node;
    }
    withName(name) {
        this.name = name;
        return this;
    }
    addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
    }
    addChildNode(child) {
        this.children.push(child);
        return this;
    }
    removeAttribute(name) {
        delete this.attributes[name];
        return this;
    }
    toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
            const attribute = attributes[attributeName];
            if (typeof attribute !== "undefined" && attribute !== null) {
                xmlText += ` ${attributeName}="${(0,_escape_attribute__WEBPACK_IMPORTED_MODULE_0__.escapeAttribute)("" + attribute)}"`;
            }
        }
        return (xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XmlText": () => (/* binding */ XmlText)
/* harmony export */ });
/* harmony import */ var _escape_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-element */ "./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js");

class XmlText {
    constructor(value) {
        this.value = value;
    }
    toString() {
        return (0,_escape_element__WEBPACK_IMPORTED_MODULE_0__.escapeElement)("" + this.value);
    }
}


/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escapeAttribute": () => (/* binding */ escapeAttribute)
/* harmony export */ });
function escapeAttribute(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}


/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "escapeElement": () => (/* binding */ escapeElement)
/* harmony export */ });
function escapeElement(value) {
    return value
        .replace(/&/g, "&amp;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&apos;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/\r/g, "&#x0D;")
        .replace(/\n/g, "&#x0A;")
        .replace(/\u0085/g, "&#x85;")
        .replace(/\u2028/, "&#x2028;");
}


/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XmlNode": () => (/* reexport safe */ _XmlNode__WEBPACK_IMPORTED_MODULE_0__.XmlNode),
/* harmony export */   "XmlText": () => (/* reexport safe */ _XmlText__WEBPACK_IMPORTED_MODULE_1__.XmlText)
/* harmony export */ });
/* harmony import */ var _XmlNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./XmlNode */ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js");
/* harmony import */ var _XmlText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XmlText */ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js");




/***/ }),

/***/ "./node_modules/bowser/es5.js":
/*!************************************!*\
  !*** ./node_modules/bowser/es5.js ***!
  \************************************/
/***/ (function(module) {

!function(e,t){ true?module.exports=t():0}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1}else if(u[0][a]<u[1][a])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default},18:function(e,t,r){"use strict";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default},91:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1)})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default},93:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default},94:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default},95:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default}})}));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/fxp.js":
/*!*************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/fxp.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const validator = __webpack_require__(/*! ./validator */ "./node_modules/fast-xml-parser/src/validator.js");
const XMLParser = __webpack_require__(/*! ./xmlparser/XMLParser */ "./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js");
const XMLBuilder = __webpack_require__(/*! ./xmlbuilder/json2xml */ "./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js");

module.exports = {
  XMLParser: XMLParser,
  XMLValidator: validator,
  XMLBuilder: XMLBuilder
}

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/util.js":
/*!**************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/util.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


const nameStartChar = ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
const nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'
const regexName = new RegExp('^' + nameRegexp + '$');

const getAllMatches = function(string, regex) {
  const matches = [];
  let match = regex.exec(string);
  while (match) {
    const allmatches = [];
    allmatches.startIndex = regex.lastIndex - match[0].length;
    const len = match.length;
    for (let index = 0; index < len; index++) {
      allmatches.push(match[index]);
    }
    matches.push(allmatches);
    match = regex.exec(string);
  }
  return matches;
};

const isName = function(string) {
  const match = regexName.exec(string);
  return !(match === null || typeof match === 'undefined');
};

exports.isExist = function(v) {
  return typeof v !== 'undefined';
};

exports.isEmptyObject = function(obj) {
  return Object.keys(obj).length === 0;
};

/**
 * Copy all the properties of a into b.
 * @param {*} target
 * @param {*} a
 */
exports.merge = function(target, a, arrayMode) {
  if (a) {
    const keys = Object.keys(a); // will return an array of own properties
    const len = keys.length; //don't make it inline
    for (let i = 0; i < len; i++) {
      if (arrayMode === 'strict') {
        target[keys[i]] = [ a[keys[i]] ];
      } else {
        target[keys[i]] = a[keys[i]];
      }
    }
  }
};
/* exports.merge =function (b,a){
  return Object.assign(b,a);
} */

exports.getValue = function(v) {
  if (exports.isExist(v)) {
    return v;
  } else {
    return '';
  }
};

// const fakeCall = function(a) {return a;};
// const fakeCallNoReturn = function() {};

exports.isName = isName;
exports.getAllMatches = getAllMatches;
exports.nameRegexp = nameRegexp;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/validator.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/validator.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js");

const defaultOptions = {
  allowBooleanAttributes: false, //A tag can have attributes without any value
  unpairedTags: []
};

//const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
exports.validate = function (xmlData, options) {
  options = Object.assign({}, defaultOptions, options);

  //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
  //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
  //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
  const tags = [];
  let tagFound = false;

  //indicates that the root tag has been closed (aka. depth 0 has been reached)
  let reachedRoot = false;

  if (xmlData[0] === '\ufeff') {
    // check for byte order mark (BOM)
    xmlData = xmlData.substr(1);
  }
  
  for (let i = 0; i < xmlData.length; i++) {

    if (xmlData[i] === '<' && xmlData[i+1] === '?') {
      i+=2;
      i = readPI(xmlData,i);
      if (i.err) return i;
    }else if (xmlData[i] === '<') {
      //starting of tag
      //read until you reach to '>' avoiding any '>' in attribute value
      let tagStartPos = i;
      i++;
      
      if (xmlData[i] === '!') {
        i = readCommentAndCDATA(xmlData, i);
        continue;
      } else {
        let closingTag = false;
        if (xmlData[i] === '/') {
          //closing tag
          closingTag = true;
          i++;
        }
        //read tagname
        let tagName = '';
        for (; i < xmlData.length &&
          xmlData[i] !== '>' &&
          xmlData[i] !== ' ' &&
          xmlData[i] !== '\t' &&
          xmlData[i] !== '\n' &&
          xmlData[i] !== '\r'; i++
        ) {
          tagName += xmlData[i];
        }
        tagName = tagName.trim();
        //console.log(tagName);

        if (tagName[tagName.length - 1] === '/') {
          //self closing tag without attributes
          tagName = tagName.substring(0, tagName.length - 1);
          //continue;
          i--;
        }
        if (!validateTagName(tagName)) {
          let msg;
          if (tagName.trim().length === 0) {
            msg = "Invalid space after '<'.";
          } else {
            msg = "Tag '"+tagName+"' is an invalid name.";
          }
          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
        }

        const result = readAttributeStr(xmlData, i);
        if (result === false) {
          return getErrorObject('InvalidAttr', "Attributes for '"+tagName+"' have open quote.", getLineNumberForPosition(xmlData, i));
        }
        let attrStr = result.value;
        i = result.index;

        if (attrStr[attrStr.length - 1] === '/') {
          //self closing tag
          const attrStrStart = i - attrStr.length;
          attrStr = attrStr.substring(0, attrStr.length - 1);
          const isValid = validateAttributeString(attrStr, options);
          if (isValid === true) {
            tagFound = true;
            //continue; //text may presents after self closing tag
          } else {
            //the result from the nested function returns the position of the error within the attribute
            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
            //this gives us the absolute index in the entire xml, which we can use to find the line at last
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
          }
        } else if (closingTag) {
          if (!result.tagClosed) {
            return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
          } else if (attrStr.trim().length > 0) {
            return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
          } else {
            const otg = tags.pop();
            if (tagName !== otg.tagName) {
              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
              return getErrorObject('InvalidTag',
                "Expected closing tag '"+otg.tagName+"' (opened in line "+openPos.line+", col "+openPos.col+") instead of closing tag '"+tagName+"'.",
                getLineNumberForPosition(xmlData, tagStartPos));
            }

            //when there are no more tags, we reached the root level.
            if (tags.length == 0) {
              reachedRoot = true;
            }
          }
        } else {
          const isValid = validateAttributeString(attrStr, options);
          if (isValid !== true) {
            //the result from the nested function returns the position of the error within the attribute
            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
            //this gives us the absolute index in the entire xml, which we can use to find the line at last
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
          }

          //if the root level has been reached before ...
          if (reachedRoot === true) {
            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));
          } else if(options.unpairedTags.indexOf(tagName) !== -1){
            //don't push into stack
          } else {
            tags.push({tagName, tagStartPos});
          }
          tagFound = true;
        }

        //skip tag text value
        //It may include comments and CDATA value
        for (i++; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            if (xmlData[i + 1] === '!') {
              //comment or CADATA
              i++;
              i = readCommentAndCDATA(xmlData, i);
              continue;
            } else if (xmlData[i+1] === '?') {
              i = readPI(xmlData, ++i);
              if (i.err) return i;
            } else{
              break;
            }
          } else if (xmlData[i] === '&') {
            const afterAmp = validateAmpersand(xmlData, i);
            if (afterAmp == -1)
              return getErrorObject('InvalidChar', "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
            i = afterAmp;
          }else{
            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
              return getErrorObject('InvalidXml', "Extra text at the end", getLineNumberForPosition(xmlData, i));
            }
          }
        } //end of reading tag text value
        if (xmlData[i] === '<') {
          i--;
        }
      }
    } else {
      if ( isWhiteSpace(xmlData[i])) {
        continue;
      }
      return getErrorObject('InvalidChar', "char '"+xmlData[i]+"' is not expected.", getLineNumberForPosition(xmlData, i));
    }
  }

  if (!tagFound) {
    return getErrorObject('InvalidXml', 'Start tag expected.', 1);
  }else if (tags.length == 1) {
      return getErrorObject('InvalidTag', "Unclosed tag '"+tags[0].tagName+"'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
  }else if (tags.length > 0) {
      return getErrorObject('InvalidXml', "Invalid '"+
          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\r?\n/g, '')+
          "' found.", {line: 1, col: 1});
  }

  return true;
};

function isWhiteSpace(char){
  return char === ' ' || char === '\t' || char === '\n'  || char === '\r';
}
/**
 * Read Processing insstructions and skip
 * @param {*} xmlData
 * @param {*} i
 */
function readPI(xmlData, i) {
  const start = i;
  for (; i < xmlData.length; i++) {
    if (xmlData[i] == '?' || xmlData[i] == ' ') {
      //tagname
      const tagname = xmlData.substr(start, i - start);
      if (i > 5 && tagname === 'xml') {
        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));
      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
        //check if valid attribut string
        i++;
        break;
      } else {
        continue;
      }
    }
  }
  return i;
}

function readCommentAndCDATA(xmlData, i) {
  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
    //comment
    for (i += 3; i < xmlData.length; i++) {
      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
        i += 2;
        break;
      }
    }
  } else if (
    xmlData.length > i + 8 &&
    xmlData[i + 1] === 'D' &&
    xmlData[i + 2] === 'O' &&
    xmlData[i + 3] === 'C' &&
    xmlData[i + 4] === 'T' &&
    xmlData[i + 5] === 'Y' &&
    xmlData[i + 6] === 'P' &&
    xmlData[i + 7] === 'E'
  ) {
    let angleBracketsCount = 1;
    for (i += 8; i < xmlData.length; i++) {
      if (xmlData[i] === '<') {
        angleBracketsCount++;
      } else if (xmlData[i] === '>') {
        angleBracketsCount--;
        if (angleBracketsCount === 0) {
          break;
        }
      }
    }
  } else if (
    xmlData.length > i + 9 &&
    xmlData[i + 1] === '[' &&
    xmlData[i + 2] === 'C' &&
    xmlData[i + 3] === 'D' &&
    xmlData[i + 4] === 'A' &&
    xmlData[i + 5] === 'T' &&
    xmlData[i + 6] === 'A' &&
    xmlData[i + 7] === '['
  ) {
    for (i += 8; i < xmlData.length; i++) {
      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
        i += 2;
        break;
      }
    }
  }

  return i;
}

const doubleQuote = '"';
const singleQuote = "'";

/**
 * Keep reading xmlData until '<' is found outside the attribute value.
 * @param {string} xmlData
 * @param {number} i
 */
function readAttributeStr(xmlData, i) {
  let attrStr = '';
  let startChar = '';
  let tagClosed = false;
  for (; i < xmlData.length; i++) {
    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
      if (startChar === '') {
        startChar = xmlData[i];
      } else if (startChar !== xmlData[i]) {
        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa
      } else {
        startChar = '';
      }
    } else if (xmlData[i] === '>') {
      if (startChar === '') {
        tagClosed = true;
        break;
      }
    }
    attrStr += xmlData[i];
  }
  if (startChar !== '') {
    return false;
  }

  return {
    value: attrStr,
    index: i,
    tagClosed: tagClosed
  };
}

/**
 * Select all the attributes whether valid or invalid.
 */
const validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', 'g');

//attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""

function validateAttributeString(attrStr, options) {
  //console.log("start:"+attrStr+":end");

  //if(attrStr.trim().length === 0) return true; //empty string

  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
  const attrNames = {};

  for (let i = 0; i < matches.length; i++) {
    if (matches[i][1].length === 0) {
      //nospace before attribute name: a="sd"b="saf"
      return getErrorObject('InvalidAttr', "Attribute '"+matches[i][2]+"' has no space in starting.", getPositionFromMatch(matches[i]))
    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {
      return getErrorObject('InvalidAttr', "Attribute '"+matches[i][2]+"' is without value.", getPositionFromMatch(matches[i]));
    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
      //independent attribute: ab
      return getErrorObject('InvalidAttr', "boolean attribute '"+matches[i][2]+"' is not allowed.", getPositionFromMatch(matches[i]));
    }
    /* else if(matches[i][6] === undefined){//attribute without value: ab=
                    return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                } */
    const attrName = matches[i][2];
    if (!validateAttrName(attrName)) {
      return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is an invalid name.", getPositionFromMatch(matches[i]));
    }
    if (!attrNames.hasOwnProperty(attrName)) {
      //check for duplicate attribute.
      attrNames[attrName] = 1;
    } else {
      return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is repeated.", getPositionFromMatch(matches[i]));
    }
  }

  return true;
}

function validateNumberAmpersand(xmlData, i) {
  let re = /\d/;
  if (xmlData[i] === 'x') {
    i++;
    re = /[\da-fA-F]/;
  }
  for (; i < xmlData.length; i++) {
    if (xmlData[i] === ';')
      return i;
    if (!xmlData[i].match(re))
      break;
  }
  return -1;
}

function validateAmpersand(xmlData, i) {
  // https://www.w3.org/TR/xml/#dt-charref
  i++;
  if (xmlData[i] === ';')
    return -1;
  if (xmlData[i] === '#') {
    i++;
    return validateNumberAmpersand(xmlData, i);
  }
  let count = 0;
  for (; i < xmlData.length; i++, count++) {
    if (xmlData[i].match(/\w/) && count < 20)
      continue;
    if (xmlData[i] === ';')
      break;
    return -1;
  }
  return i;
}

function getErrorObject(code, message, lineNumber) {
  return {
    err: {
      code: code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col,
    },
  };
}

function validateAttrName(attrName) {
  return util.isName(attrName);
}

// const startsWithXML = /^xml/i;

function validateTagName(tagname) {
  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;
}

//this function returns the line number for the character at the given index
function getLineNumberForPosition(xmlData, index) {
  const lines = xmlData.substring(0, index).split(/\r?\n/);
  return {
    line: lines.length,

    // column number is last line's length + 1, because column numbering starts at 1:
    col: lines[lines.length - 1].length + 1
  };
}

//this function returns the position of the first character of match within attrStr
function getPositionFromMatch(match) {
  return match.startIndex + match[1].length;
}


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

//parse Empty Node as self closing node
const buildFromOrderedJs = __webpack_require__(/*! ./orderedJs2Xml */ "./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js");

const defaultOptions = {
  attributeNamePrefix: '@_',
  attributesGroupName: false,
  textNodeName: '#text',
  ignoreAttributes: true,
  cdataPropName: false,
  format: false,
  indentBy: '  ',
  suppressEmptyNode: false,
  suppressUnpairedNode: true,
  suppressBooleanAttributes: true,
  tagValueProcessor: function(key, a) {
    return a;
  },
  attributeValueProcessor: function(attrName, a) {
    return a;
  },
  preserveOrder: false,
  commentPropName: false,
  unpairedTags: [],
  entities: [
    { regex: new RegExp("&", "g"), val: "&amp;" },//it must be on top
    { regex: new RegExp(">", "g"), val: "&gt;" },
    { regex: new RegExp("<", "g"), val: "&lt;" },
    { regex: new RegExp("\'", "g"), val: "&apos;" },
    { regex: new RegExp("\"", "g"), val: "&quot;" }
  ],
  processEntities: true,
  stopNodes: [],
  transformTagName: false,
};

function Builder(options) {
  this.options = Object.assign({}, defaultOptions, options);
  if (this.options.ignoreAttributes || this.options.attributesGroupName) {
    this.isAttribute = function(/*a*/) {
      return false;
    };
  } else {
    this.attrPrefixLen = this.options.attributeNamePrefix.length;
    this.isAttribute = isAttribute;
  }

  this.processTextOrObjNode = processTextOrObjNode

  if (this.options.format) {
    this.indentate = indentate;
    this.tagEndChar = '>\n';
    this.newLine = '\n';
  } else {
    this.indentate = function() {
      return '';
    };
    this.tagEndChar = '>';
    this.newLine = '';
  }

  if (this.options.suppressEmptyNode) {
    this.buildTextNode = buildEmptyTextNode;
    this.buildObjNode = buildEmptyObjNode;
  } else {
    this.buildTextNode = buildTextValNode;
    this.buildObjNode = buildObjectNode;
  }

  this.buildTextValNode = buildTextValNode;
  this.buildObjectNode = buildObjectNode;

  this.replaceEntitiesValue = replaceEntitiesValue;
  this.buildAttrPairStr = buildAttrPairStr;
}

Builder.prototype.build = function(jObj) {
  if(this.options.preserveOrder){
    return buildFromOrderedJs(jObj, this.options);
  }else {
    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){
      jObj = {
        [this.options.arrayNodeName] : jObj
      }
    }
    return this.j2x(jObj, 0).val;
  }
};

Builder.prototype.j2x = function(jObj, level) {
  let attrStr = '';
  let val = '';
  for (let key in jObj) {
    if (typeof jObj[key] === 'undefined') {
      // supress undefined node
    } else if (jObj[key] === null) {
      if(key[0] === "?") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;
      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
    } else if (jObj[key] instanceof Date) {
      val += this.buildTextNode(jObj[key], key, '', level);
    } else if (typeof jObj[key] !== 'object') {
      //premitive type
      const attr = this.isAttribute(key);
      if (attr) {
        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);
      }else {
        //tag value
        if (key === this.options.textNodeName) {
          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);
          val += this.replaceEntitiesValue(newval);
        } else {
          val += this.buildTextNode(jObj[key], key, '', level);
        }
      }
    } else if (Array.isArray(jObj[key])) {
      //repeated nodes
      const arrLen = jObj[key].length;
      for (let j = 0; j < arrLen; j++) {
        const item = jObj[key][j];
        if (typeof item === 'undefined') {
          // supress undefined node
        } else if (item === null) {
          if(key[0] === "?") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;
          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        } else if (typeof item === 'object') {
          val += this.processTextOrObjNode(item, key, level)
        } else {
          val += this.buildTextNode(item, key, '', level);
        }
      }
    } else {
      //nested node
      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
        const Ks = Object.keys(jObj[key]);
        const L = Ks.length;
        for (let j = 0; j < L; j++) {
          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);
        }
      } else {
        val += this.processTextOrObjNode(jObj[key], key, level)
      }
    }
  }
  return {attrStr: attrStr, val: val};
};

function buildAttrPairStr(attrName, val){
  val = this.options.attributeValueProcessor(attrName, '' + val);
  val = this.replaceEntitiesValue(val);
  if (this.options.suppressBooleanAttributes && val === "true") {
    return ' ' + attrName;
  } else return ' ' + attrName + '="' + val + '"';
}

function processTextOrObjNode (object, key, level) {
  const result = this.j2x(object, level + 1);
  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {
    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);
  } else {
    return this.buildObjNode(result.val, key, result.attrStr, level);
  }
}

function buildObjectNode(val, key, attrStr, level) {
  let tagEndExp = '</' + key + this.tagEndChar;
  let piClosingChar = "";
  
  if(key[0] === "?") {
    piClosingChar = "?";
    tagEndExp = "";
  }

  if (attrStr && val.indexOf('<') === -1) {
    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );
  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
    return this.indentate(level) + `<!--${val}-->` + this.newLine;
  }else {
    return (
      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +
      val +
      this.indentate(level) + tagEndExp    );
  }
}

function buildEmptyObjNode(val, key, attrStr, level) {
  if (val !== '') {
    return this.buildObjectNode(val, key, attrStr, level);
  } else {
    if(key[0] === "?") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;
    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
  }
}

function buildTextValNode(val, key, attrStr, level) {
  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;
  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
    return this.indentate(level) + `<!--${val}-->` +  this.newLine;
  }else{
    let textValue = this.options.tagValueProcessor(key, val);
    textValue = this.replaceEntitiesValue(textValue);
  
    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired
      if(this.options.suppressUnpairedNode){
        return this.indentate(level) + '<' + key + this.tagEndChar;
      }else{
        return this.indentate(level) + '<' + key + "/" + this.tagEndChar;
      }
    } else{
      return (
        this.indentate(level) + '<' + key + attrStr + '>' +
         textValue +
        '</' + key + this.tagEndChar  );
    }

  }
}

function replaceEntitiesValue(textValue){
  if(textValue && textValue.length > 0 && this.options.processEntities){
    for (let i=0; i<this.options.entities.length; i++) {
      const entity = this.options.entities[i];
      textValue = textValue.replace(entity.regex, entity.val);
    }
  }
  return textValue;
}

function buildEmptyTextNode(val, key, attrStr, level) {
  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired
    if(this.options.suppressUnpairedNode){
      return this.indentate(level) + '<' + key + this.tagEndChar;
    }else{
      return this.indentate(level) + '<' + key + "/" + this.tagEndChar;
    }
  }else if (val !== '') { //empty
    return this.buildTextValNode(val, key, attrStr, level);
  } else {
    if(key[0] === "?") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag
    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal
  }
}

function indentate(level) {
  return this.options.indentBy.repeat(level);
}

function isAttribute(name /*, options*/) {
  if (name.startsWith(this.options.attributeNamePrefix)) {
    return name.substr(this.attrPrefixLen);
  } else {
    return false;
  }
}

module.exports = Builder;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js ***!
  \**********************************************************************/
/***/ ((module) => {

const EOL = "\n";

/**
 * 
 * @param {array} jArray 
 * @param {any} options 
 * @returns 
 */
function toXml(jArray, options){
    return arrToStr( jArray, options, "", 0);
}

function arrToStr(arr, options, jPath, level){
    let xmlStr = "";

    let indentation = "";
    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call
        indentation = EOL + "" + options.indentBy.repeat(level);
    }

    for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if(jPath.length === 0) newJPath = tagName
        else newJPath = `${jPath}.${tagName}`;

        if(tagName === options.textNodeName){
            let tagText = tagObj[tagName];
            if(!isStopNode(newJPath, options)){
                tagText = options.tagValueProcessor( tagName, tagText);
                tagText = replaceEntitiesValue(tagText, options);
            }
            xmlStr += indentation + tagText;
            continue;
        }else if( tagName === options.cdataPropName){
            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
            continue;
        }else if( tagName === options.commentPropName){
            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
            continue;
        }else if( tagName[0] === "?"){
            const attStr = attr_to_str(tagObj[":@"], options);
            const tempInd = tagName === "?xml" ? "" : indentation;
            let piTextNodeName = tagObj[tagName][0][options.textNodeName];
            piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : ""; //remove extra spacing
            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;
            continue;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        let tagStart =  indentation + `<${tagName}${attStr}`;
        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);
        if(options.unpairedTags.indexOf(tagName) !== -1){
            if(options.suppressUnpairedNode)  xmlStr += tagStart + ">"; 
            else xmlStr += tagStart + "/>"; 
        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ 
            xmlStr += tagStart + "/>"; 
        }else{ 
            //TODO: node with only text value should not parse the text value in next line
            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;
        }
    }
    
    return xmlStr;
}

function propName(obj){
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if(key !== ":@") return key;
    }
  }

function attr_to_str(attrMap, options){
    let attrStr = "";
    if(attrMap && !options.ignoreAttributes){
        for (let attr in attrMap){
            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
            attrVal = replaceEntitiesValue(attrVal, options);
            if(attrVal === true && options.suppressBooleanAttributes){
                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;
            }else{
                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
            }
        }
    }
    return attrStr;
}

function isStopNode(jPath, options){
    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);
    let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
    for(let index in options.stopNodes){
        if(options.stopNodes[index] === jPath || options.stopNodes[index] === "*."+tagName) return true;
    }
    return false;
}

function replaceEntitiesValue(textValue, options){
    if(textValue && textValue.length > 0 && options.processEntities){
      for (let i=0; i< options.entities.length; i++) {
        const entity = options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  }
module.exports = toXml;

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js":
/*!*********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js ***!
  \*********************************************************************/
/***/ ((module) => {

//TODO: handle comments
function readDocType(xmlData, i){
    
    const entities = {};
    if( xmlData[i + 3] === 'O' &&
         xmlData[i + 4] === 'C' &&
         xmlData[i + 5] === 'T' &&
         xmlData[i + 6] === 'Y' &&
         xmlData[i + 7] === 'P' &&
         xmlData[i + 8] === 'E')
    {    
        i = i+9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for(;i<xmlData.length;i++){
            if (xmlData[i] === '<') {
                if( hasBody && 
                     xmlData[i+1] === '!' &&
                     xmlData[i+2] === 'E' &&
                     xmlData[i+3] === 'N' &&
                     xmlData[i+4] === 'T' &&
                     xmlData[i+5] === 'I' &&
                     xmlData[i+6] === 'T' &&
                     xmlData[i+7] === 'Y'
                ){
                    i += 7;
                    entity = true;
                }else if( hasBody && 
                    xmlData[i+1] === '!' &&
                     xmlData[i+2] === 'E' &&
                     xmlData[i+3] === 'L' &&
                     xmlData[i+4] === 'E' &&
                     xmlData[i+5] === 'M' &&
                     xmlData[i+6] === 'E' &&
                     xmlData[i+7] === 'N' &&
                     xmlData[i+8] === 'T'
                ){
                    //Not supported
                    i += 8;
                }else if( hasBody && 
                    xmlData[i+1] === '!' &&
                    xmlData[i+2] === 'A' &&
                    xmlData[i+3] === 'T' &&
                    xmlData[i+4] === 'T' &&
                    xmlData[i+5] === 'L' &&
                    xmlData[i+6] === 'I' &&
                    xmlData[i+7] === 'S' &&
                    xmlData[i+8] === 'T'
                ){
                    //Not supported
                    i += 8;
                }else if( hasBody && 
                    xmlData[i+1] === '!' &&
                    xmlData[i+2] === 'N' &&
                    xmlData[i+3] === 'O' &&
                    xmlData[i+4] === 'T' &&
                    xmlData[i+5] === 'A' &&
                    xmlData[i+6] === 'T' &&
                    xmlData[i+7] === 'I' &&
                    xmlData[i+8] === 'O' &&
                    xmlData[i+9] === 'N'
                ){
                    //Not supported
                    i += 9;
                }else if( //comment
                    xmlData[i+1] === '!' &&
                    xmlData[i+2] === '-' &&
                    xmlData[i+3] === '-'
                ){
                    comment = true;
                }else{
                    throw new Error("Invalid DOCTYPE");
                }
                angleBracketsCount++;
                exp = "";
            } else if (xmlData[i] === '>') {
                if(comment){
                    if( xmlData[i - 1] === "-" && xmlData[i - 2] === "-"){
                        comment = false;
                    }else{
                        throw new Error(`Invalid XML comment in DOCTYPE`);
                    }
                }else if(entity){
                    parseEntityExp(exp, entities);
                    entity = false;
                }
                angleBracketsCount--;
                if (angleBracketsCount === 0) {
                  break;
                }
            }else if( xmlData[i] === '['){
                hasBody = true;
            }else{
                exp += xmlData[i];
            }
        }
        if(angleBracketsCount !== 0){
            throw new Error(`Unclosed DOCTYPE`);
        }
    }else{
        throw new Error(`Invalid Tag instead of DOCTYPE`);
    }
    return {entities, i};
}

const entityRegex = RegExp("^\\s([a-zA-z0-0]+)[ \t](['\"])([^&]+)\\2");
function parseEntityExp(exp, entities){
    const match = entityRegex.exec(exp);
    if(match){
        entities[ match[1] ] = {
            regx : RegExp( `&${match[1]};`,"g"),
            val: match[3]
        };
    }
}
module.exports = readDocType;

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


const defaultOptions = {
    preserveOrder: false,
    attributeNamePrefix: '@_',
    attributesGroupName: false,
    textNodeName: '#text',
    ignoreAttributes: true,
    removeNSPrefix: false, // remove NS from tag name or attribute name if true
    allowBooleanAttributes: false, //a tag can have attributes without any value
    //ignoreRootElement : false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true, //Trim string values of tag and attributes
    cdataPropName: false,
    numberParseOptions: {
      hex: true,
      leadingZeros: true
    },
    tagValueProcessor: function(tagName, val) {
      return val;
    },
    attributeValueProcessor: function(attrName, val) {
      return val;
    },
    stopNodes: [], //nested tags will not be parsed even for errors
    alwaysCreateTextNode: false,
    isArray: () => false,
    commentPropName: false,
    unpairedTags: [],
    processEntities: true,
    htmlEntities: false,
    ignoreDeclaration: false,
    ignorePiTags: false,
    transformTagName: false,
};
   
const buildOptions = function(options) {
    return Object.assign({}, defaultOptions, options);
};

exports.buildOptions = buildOptions;
exports.defaultOptions = defaultOptions;

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js":
/*!************************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

///@ts-check

const util = __webpack_require__(/*! ../util */ "./node_modules/fast-xml-parser/src/util.js");
const xmlNode = __webpack_require__(/*! ./xmlNode */ "./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js");
const readDocType = __webpack_require__(/*! ./DocTypeReader */ "./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js");
const toNumber = __webpack_require__(/*! strnum */ "./node_modules/strnum/strnum.js");

const regx =
  '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'
  .replace(/NAME/g, util.nameRegexp);

//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");

class OrderedObjParser{
  constructor(options){
    this.options = options;
    this.currentNode = null;
    this.tagsNodeStack = [];
    this.docTypeEntities = {};
    this.lastEntities = {
      "apos" : { regex: /&(apos|#39|#x27);/g, val : "'"},
      "gt" : { regex: /&(gt|#62|#x3E);/g, val : ">"},
      "lt" : { regex: /&(lt|#60|#x3C);/g, val : "<"},
      "quot" : { regex: /&(quot|#34|#x22);/g, val : "\""},
    };
    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : "&"};
    this.htmlEntities = {
      "space": { regex: /&(nbsp|#160);/g, val: " " },
      // "lt" : { regex: /&(lt|#60);/g, val: "<" },
      // "gt" : { regex: /&(gt|#62);/g, val: ">" },
      // "amp" : { regex: /&(amp|#38);/g, val: "&" },
      // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
      // "apos" : { regex: /&(apos|#39);/g, val: "'" },
      "cent" : { regex: /&(cent|#162);/g, val: "¢" },
      "pound" : { regex: /&(pound|#163);/g, val: "£" },
      "yen" : { regex: /&(yen|#165);/g, val: "¥" },
      "euro" : { regex: /&(euro|#8364);/g, val: "€" },
      "copyright" : { regex: /&(copy|#169);/g, val: "©" },
      "reg" : { regex: /&(reg|#174);/g, val: "®" },
      "inr" : { regex: /&(inr|#8377);/g, val: "₹" },
    };
    this.addExternalEntities = addExternalEntities;
    this.parseXml = parseXml;
    this.parseTextData = parseTextData;
    this.resolveNameSpace = resolveNameSpace;
    this.buildAttributesMap = buildAttributesMap;
    this.isItStopNode = isItStopNode;
    this.replaceEntitiesValue = replaceEntitiesValue;
    this.readStopNodeData = readStopNodeData;
    this.saveTextToParentTag = saveTextToParentTag;
  }

}

function addExternalEntities(externalEntities){
  const entKeys = Object.keys(externalEntities);
  for (let i = 0; i < entKeys.length; i++) {
    const ent = entKeys[i];
    this.lastEntities[ent] = {
       regex: new RegExp("&"+ent+";","g"),
       val : externalEntities[ent]
    }
  }
}

/**
 * @param {string} val
 * @param {string} tagName
 * @param {string} jPath
 * @param {boolean} dontTrim
 * @param {boolean} hasAttributes
 * @param {boolean} isLeafNode
 * @param {boolean} escapeEntities
 */
function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
  if (val !== undefined) {
    if (this.options.trimValues && !dontTrim) {
      val = val.trim();
    }
    if(val.length > 0){
      if(!escapeEntities) val = this.replaceEntitiesValue(val);
      
      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
      if(newval === null || newval === undefined){
        //don't parse
        return val;
      }else if(typeof newval !== typeof val || newval !== val){
        //overwrite
        return newval;
      }else if(this.options.trimValues){
        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
      }else{
        const trimmedVal = val.trim();
        if(trimmedVal === val){
          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
        }else{
          return val;
        }
      }
    }
  }
}

function resolveNameSpace(tagname) {
  if (this.options.removeNSPrefix) {
    const tags = tagname.split(':');
    const prefix = tagname.charAt(0) === '/' ? '/' : '';
    if (tags[0] === 'xmlns') {
      return '';
    }
    if (tags.length === 2) {
      tagname = prefix + tags[1];
    }
  }
  return tagname;
}

//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])([\\s\\S]*?)\\3)?', 'gm');

function buildAttributesMap(attrStr, jPath) {
  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {
    // attrStr = attrStr.replace(/\r?\n/g, ' ');
    //attrStr = attrStr || attrStr.trim();

    const matches = util.getAllMatches(attrStr, attrsRegx);
    const len = matches.length; //don't make it inline
    const attrs = {};
    for (let i = 0; i < len; i++) {
      const attrName = this.resolveNameSpace(matches[i][1]);
      let oldVal = matches[i][4];
      const aName = this.options.attributeNamePrefix + attrName;
      if (attrName.length) {
        if (oldVal !== undefined) {
          if (this.options.trimValues) {
            oldVal = oldVal.trim();
          }
          oldVal = this.replaceEntitiesValue(oldVal);
          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
          if(newVal === null || newVal === undefined){
            //don't parse
            attrs[aName] = oldVal;
          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){
            //overwrite
            attrs[aName] = newVal;
          }else{
            //parse
            attrs[aName] = parseValue(
              oldVal,
              this.options.parseAttributeValue,
              this.options.numberParseOptions
            );
          }
        } else if (this.options.allowBooleanAttributes) {
          attrs[aName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (this.options.attributesGroupName) {
      const attrCollection = {};
      attrCollection[this.options.attributesGroupName] = attrs;
      return attrCollection;
    }
    return attrs;
  }
}

const parseXml = function(xmlData) {
  xmlData = xmlData.replace(/\r\n?/g, "\n"); //TODO: remove this line
  const xmlObj = new xmlNode('!xml');
  let currentNode = xmlObj;
  let textData = "";
  let jPath = "";
  for(let i=0; i< xmlData.length; i++){//for each char in XML data
    const ch = xmlData[i];
    if(ch === '<'){
      // const nextIndex = i+1;
      // const _2ndChar = xmlData[nextIndex];
      if( xmlData[i+1] === '/') {//Closing Tag
        const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.")
        let tagName = xmlData.substring(i+2,closeIndex).trim();

        if(this.options.removeNSPrefix){
          const colonIndex = tagName.indexOf(":");
          if(colonIndex !== -1){
            tagName = tagName.substr(colonIndex+1);
          }
        }

        if(this.options.transformTagName) {
          tagName = this.options.transformTagName(tagName);
        }

        if(currentNode){
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
        }

        jPath = jPath.substr(0, jPath.lastIndexOf("."));
        
        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope
        textData = "";
        i = closeIndex;
      } else if( xmlData[i+1] === '?') {

        let tagData = readTagExp(xmlData,i, false, "?>");
        if(!tagData) throw new Error("Pi Tag is not closed.");

        textData = this.saveTextToParentTag(textData, currentNode, jPath);
        if( (this.options.ignoreDeclaration && tagData.tagName === "?xml") || this.options.ignorePiTags){

        }else{
  
          const childNode = new xmlNode(tagData.tagName);
          childNode.add(this.options.textNodeName, "");
          
          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){
            childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
          }
          currentNode.addChild(childNode);

        }


        i = tagData.closeIndex + 1;
      } else if(xmlData.substr(i + 1, 3) === '!--') {
        const endIndex = findClosingIndex(xmlData, "-->", i+4, "Comment is not closed.")
        if(this.options.commentPropName){
          const comment = xmlData.substring(i + 4, endIndex - 2);

          textData = this.saveTextToParentTag(textData, currentNode, jPath);

          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);
        }
        i = endIndex;
      } else if( xmlData.substr(i + 1, 2) === '!D') {
        const result = readDocType(xmlData, i);
        this.docTypeEntities = result.entities;
        i = result.i;
      }else if(xmlData.substr(i + 1, 2) === '![') {
        const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
        const tagExp = xmlData.substring(i + 9,closeIndex);

        textData = this.saveTextToParentTag(textData, currentNode, jPath);

        //cdata should be set even if it is 0 length string
        if(this.options.cdataPropName){
          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + "." + this.options.cdataPropName, true, false, true);
          // if(!val) val = "";
          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);
        }else{
          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
          if(val == undefined) val = "";
          currentNode.add(this.options.textNodeName, val);
        }
        
        i = closeIndex + 2;
      }else {//Opening tag
        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);
        let tagName= result.tagName;
        let tagExp = result.tagExp;
        let attrExpPresent = result.attrExpPresent;
        let closeIndex = result.closeIndex;

        if (this.options.transformTagName) {
          tagName = this.options.transformTagName(tagName);
        }
        
        //save text as child node
        if (currentNode && textData) {
          if(currentNode.tagname !== '!xml'){
            //when nested tag is found
            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
          }
        }

        if(tagName !== xmlObj.tagname){
          jPath += jPath ? "." + tagName : tagName;
        }

        //check if last tag was unpaired tag
        const lastTag = currentNode;
        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){
          currentNode = this.tagsNodeStack.pop();
        }

        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace
          let tagContent = "";
          //self-closing tag
          if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){
            i = result.closeIndex;
          }
          //boolean tag
          else if(this.options.unpairedTags.indexOf(tagName) !== -1){
            i = result.closeIndex;
          }
          //normal tag
          else{
            //read until closing tag is found
            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
            if(!result) throw new Error(`Unexpected end of ${tagName}`);
            i = result.i;
            tagContent = result.tagContent;
          }

          const childNode = new xmlNode(tagName);
          if(tagName !== tagExp && attrExpPresent){
            childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
          }
          if(tagContent) {
            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
          }
          
          jPath = jPath.substr(0, jPath.lastIndexOf("."));
          childNode.add(this.options.textNodeName, tagContent);
          
          currentNode.addChild(childNode);
        }else{
  //selfClosing tag
          if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){
            if(tagName[tagName.length - 1] === "/"){ //remove trailing '/'
              tagName = tagName.substr(0, tagName.length - 1);
              tagExp = tagName;
            }else{
              tagExp = tagExp.substr(0, tagExp.length - 1);
            }
            
            if(this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }

            const childNode = new xmlNode(tagName);
            if(tagName !== tagExp && attrExpPresent){
              childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode.addChild(childNode);
          }
    //opening tag
          else{
            const childNode = new xmlNode( tagName);
            this.tagsNodeStack.push(currentNode);
            
            if(tagName !== tagExp && attrExpPresent){
              childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
            }
            currentNode.addChild(childNode);
            currentNode = childNode;
          }
          textData = "";
          i = closeIndex;
        }
      }
    }else{
      textData += xmlData[i];
    }
  }
  return xmlObj.child;
}

const replaceEntitiesValue = function(val){

  if(this.options.processEntities){
    for(let entityName in this.docTypeEntities){
      const entity = this.docTypeEntities[entityName];
      val = val.replace( entity.regx, entity.val);
    }
    for(let entityName in this.lastEntities){
      const entity = this.lastEntities[entityName];
      val = val.replace( entity.regex, entity.val);
    }
    if(this.options.htmlEntities){
      for(let entityName in this.htmlEntities){
        const entity = this.htmlEntities[entityName];
        val = val.replace( entity.regex, entity.val);
      }
    }
    val = val.replace( this.ampEntity.regex, this.ampEntity.val);
  }
  return val;
}
function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
  if (textData) { //store previously collected data as textNode
    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0
    
    textData = this.parseTextData(textData,
      currentNode.tagname,
      jPath,
      false,
      currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
      isLeafNode);

    if (textData !== undefined && textData !== "")
      currentNode.add(this.options.textNodeName, textData);
    textData = "";
  }
  return textData;
}

//TODO: use jPath to simplify the logic
/**
 * 
 * @param {string[]} stopNodes 
 * @param {string} jPath
 * @param {string} currentTagName 
 */
function isItStopNode(stopNodes, jPath, currentTagName){
  const allNodesExp = "*." + currentTagName;
  for (const stopNodePath in stopNodes) {
    const stopNodeExp = stopNodes[stopNodePath];
    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;
  }
  return false;
}

/**
 * Returns the tag Expression and where it is ending handling single-dobule quotes situation
 * @param {string} xmlData 
 * @param {number} i starting index
 * @returns 
 */
function tagExpWithClosingIndex(xmlData, i, closingChar = ">"){
  let attrBoundary;
  let tagExp = "";
  for (let index = i; index < xmlData.length; index++) {
    let ch = xmlData[index];
    if (attrBoundary) {
        if (ch === attrBoundary) attrBoundary = "";//reset
    } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
    } else if (ch === closingChar[0]) {
      if(closingChar[1]){
        if(xmlData[index + 1] === closingChar[1]){
          return {
            data: tagExp,
            index: index
          }
        }
      }else{
        return {
          data: tagExp,
          index: index
        }
      }
    } else if (ch === '\t') {
      ch = " "
    }
    tagExp += ch;
  }
}

function findClosingIndex(xmlData, str, i, errMsg){
  const closingIndex = xmlData.indexOf(str, i);
  if(closingIndex === -1){
    throw new Error(errMsg)
  }else{
    return closingIndex + str.length - 1;
  }
}

function readTagExp(xmlData,i, removeNSPrefix, closingChar = ">"){
  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);
  if(!result) return;
  let tagExp = result.data;
  const closeIndex = result.index;
  const separatorIndex = tagExp.search(/\s/);
  let tagName = tagExp;
  let attrExpPresent = true;
  if(separatorIndex !== -1){//separate tag name and attributes expression
    tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
    tagExp = tagExp.substr(separatorIndex + 1);
  }

  if(removeNSPrefix){
    const colonIndex = tagName.indexOf(":");
    if(colonIndex !== -1){
      tagName = tagName.substr(colonIndex+1);
      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
    }
  }

  return {
    tagName: tagName,
    tagExp: tagExp,
    closeIndex: closeIndex,
    attrExpPresent: attrExpPresent,
  }
}
/**
 * find paired tag for a stop node
 * @param {string} xmlData 
 * @param {string} tagName 
 * @param {number} i 
 */
function readStopNodeData(xmlData, tagName, i){
  const startIndex = i;
  // Starting at 1 since we already have an open tag
  let openTagCount = 1;

  for (; i < xmlData.length; i++) {
    if( xmlData[i] === "<"){ 
      if (xmlData[i+1] === "/") {//close tag
          const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
          let closeTagName = xmlData.substring(i+2,closeIndex).trim();
          if(closeTagName === tagName){
            openTagCount--;
            if (openTagCount === 0) {
              return {
                tagContent: xmlData.substring(startIndex, i),
                i : closeIndex
              }
            }
          }
          i=closeIndex;
        } else if(xmlData[i+1] === '?') { 
          const closeIndex = findClosingIndex(xmlData, "?>", i+1, "StopNode is not closed.")
          i=closeIndex;
        } else if(xmlData.substr(i + 1, 3) === '!--') { 
          const closeIndex = findClosingIndex(xmlData, "-->", i+3, "StopNode is not closed.")
          i=closeIndex;
        } else if(xmlData.substr(i + 1, 2) === '![') { 
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
          i=closeIndex;
        } else {
          const tagData = readTagExp(xmlData, i, '>')

          if (tagData) {
            const openTagName = tagData && tagData.tagName;
            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== "/") {
              openTagCount++;
            }
            i=tagData.closeIndex;
          }
        }
      }
  }//end for loop
}

function parseValue(val, shouldParse, options) {
  if (shouldParse && typeof val === 'string') {
    //console.log(options)
    const newval = val.trim();
    if(newval === 'true' ) return true;
    else if(newval === 'false' ) return false;
    else return toNumber(val, options);
  } else {
    if (util.isExist(val)) {
      return val;
    } else {
      return '';
    }
  }
}


module.exports = OrderedObjParser;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { buildOptions} = __webpack_require__(/*! ./OptionsBuilder */ "./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js");
const OrderedObjParser = __webpack_require__(/*! ./OrderedObjParser */ "./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js");
const { prettify} = __webpack_require__(/*! ./node2json */ "./node_modules/fast-xml-parser/src/xmlparser/node2json.js");
const validator = __webpack_require__(/*! ../validator */ "./node_modules/fast-xml-parser/src/validator.js");

class XMLParser{
    
    constructor(options){
        this.externalEntities = {};
        this.options = buildOptions(options);
        
    }
    /**
     * Parse XML dats to JS object 
     * @param {string|Buffer} xmlData 
     * @param {boolean|Object} validationOption 
     */
    parse(xmlData,validationOption){
        if(typeof xmlData === "string"){
        }else if( xmlData.toString){
            xmlData = xmlData.toString();
        }else{
            throw new Error("XML data is accepted in String or Bytes[] form.")
        }
        if( validationOption){
            if(validationOption === true) validationOption = {}; //validate with default options
            
            const result = validator.validate(xmlData, validationOption);
            if (result !== true) {
              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )
            }
          }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;
        else return prettify(orderedResult, this.options);
    }

    /**
     * Add Entity which is not by default supported by this library
     * @param {string} key 
     * @param {string} value 
     */
    addEntity(key, value){
        if(value.indexOf("&") !== -1){
            throw new Error("Entity value can't have '&'")
        }else if(key.indexOf("&") !== -1 || key.indexOf(";") !== -1){
            throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'")
        }else if(value === "&"){
            throw new Error("An entity with value '&' is not permitted");
        }else{
            this.externalEntities[key] = value;
        }
    }
}

module.exports = XMLParser;

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/node2json.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/node2json.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * 
 * @param {array} node 
 * @param {any} options 
 * @returns 
 */
function prettify(node, options){
  return compress( node, options);
}

/**
 * 
 * @param {array} arr 
 * @param {object} options 
 * @param {string} jPath 
 * @returns object
 */
function compress(arr, options, jPath){
  let text;
  const compressedObj = {};
  for (let i = 0; i < arr.length; i++) {
    const tagObj = arr[i];
    const property = propName(tagObj);
    let newJpath = "";
    if(jPath === undefined) newJpath = property;
    else newJpath = jPath + "." + property;

    if(property === options.textNodeName){
      if(text === undefined) text = tagObj[property];
      else text += "" + tagObj[property];
    }else if(property === undefined){
      continue;
    }else if(tagObj[property]){
      
      let val = compress(tagObj[property], options, newJpath);
      const isLeaf = isLeafTag(val, options);

      if(tagObj[":@"]){
        assignAttributes( val, tagObj[":@"], newJpath, options);
      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){
        val = val[options.textNodeName];
      }else if(Object.keys(val).length === 0){
        if(options.alwaysCreateTextNode) val[options.textNodeName] = "";
        else val = "";
      }

      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {
        if(!Array.isArray(compressedObj[property])) {
            compressedObj[property] = [ compressedObj[property] ];
        }
        compressedObj[property].push(val);
      }else{
        //TODO: if a node is not an array, then check if it should be an array
        //also determine if it is a leaf node
        if (options.isArray(property, newJpath, isLeaf )) {
          compressedObj[property] = [val];
        }else{
          compressedObj[property] = val;
        }
      }
    }
    
  }
  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;
  if(typeof text === "string"){
    if(text.length > 0) compressedObj[options.textNodeName] = text;
  }else if(text !== undefined) compressedObj[options.textNodeName] = text;
  return compressedObj;
}

function propName(obj){
  const keys = Object.keys(obj);
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    if(key !== ":@") return key;
  }
}

function assignAttributes(obj, attrMap, jpath, options){
  if (attrMap) {
    const keys = Object.keys(attrMap);
    const len = keys.length; //don't make it inline
    for (let i = 0; i < len; i++) {
      const atrrName = keys[i];
      if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
        obj[atrrName] = [ attrMap[atrrName] ];
      } else {
        obj[atrrName] = attrMap[atrrName];
      }
    }
  }
}

function isLeafTag(obj, options){
  const propCount = Object.keys(obj).length;
  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;
  return false;
}
exports.prettify = prettify;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js":
/*!***************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


class XmlNode{
  constructor(tagname) {
    this.tagname = tagname;
    this.child = []; //nested tags, text, cdata, comments in order
    this[":@"] = {}; //attributes map
  }
  add(key,val){
    // this.child.push( {name : key, val: val, isCdata: isCdata });
    this.child.push( {[key]: val });
  }
  addChild(node) {
    if(node[":@"] && Object.keys(node[":@"]).length > 0){
      this.child.push( { [node.tagname]: node.child, [":@"]: node[":@"] });
    }else{
      this.child.push( { [node.tagname]: node.child });
    }
  };
};


module.exports = XmlNode;

/***/ }),

/***/ "./node_modules/strnum/strnum.js":
/*!***************************************!*\
  !*** ./node_modules/strnum/strnum.js ***!
  \***************************************/
/***/ ((module) => {

const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
// const octRegex = /0x[a-z0-9]+/;
// const binRegex = /0x[a-z0-9]+/;


//polyfill
if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
}
if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
}

  
const consider = {
    hex :  true,
    leadingZeros: true,
    decimalPoint: "\.",
    eNotation: true
    //skipLike: /regex/
};

function toNumber(str, options = {}){
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }

    options = Object.assign({}, consider, options );
    if(!str || typeof str !== "string" ) return str;
    
    let trimmedStr  = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;

    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
    // } else if (options.parseOct && octRegex.test(str)) {
    //     return Number.parseInt(val, 8);
    // }else if (options.parseBin && binRegex.test(str)) {
    //     return Number.parseInt(val, 2);
    }else{
        //separate negative sign, leading zeros, and rest number
        const match = numRegex.exec(trimmedStr);
        if(match){
            const sign = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
            //trim ending zeros for floating number
            
            const eNotation = match[4] || match[6];
            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
            else{//no leading zeros or leading zeros are allowed
                const num = Number(trimmedStr);
                const numStr = "" + num;
                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation
                    if(options.eNotation) return num;
                    else return str;
                }else if(eNotation){ //given number has enotation
                    if(options.eNotation) return num;
                    else return str;
                }else if(trimmedStr.indexOf(".") !== -1){ //floating number
                    // const decimalPart = match[5].substr(1);
                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));

                    
                    // const p = numStr.indexOf(".");
                    // const givenIntPart = numStr.substr(0,p);
                    // const givenDecPart = numStr.substr(p+1);
                    if(numStr === "0" && (numTrimmedByZeros === "") ) return num; //0.0
                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000
                    else if( sign && numStr === "-"+numTrimmedByZeros) return num;
                    else return str;
                }
                
                if(leadingZeros){
                    // if(numTrimmedByZeros === numStr){
                    //     if(options.leadingZeros) return num;
                    //     else return str;
                    // }else return str;
                    if(numTrimmedByZeros === numStr) return num;
                    else if(sign+numTrimmedByZeros === numStr) return num;
                    else return str;
                }

                if(trimmedStr === numStr) return num;
                else if(trimmedStr === sign+numStr) return num;
                // else{
                //     //number with +/- sign
                //     trimmedStr.test(/[-+][0-9]);

                // }
                return str;
            }
            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
            
        }else{ //non-numeric string
            return str;
        }
    }
}

/**
 * 
 * @param {string} numStr without leading zeros
 * @returns 
 */
function trimZeros(numStr){
    if(numStr && numStr.indexOf(".") !== -1){//float
        numStr = numStr.replace(/0+$/, ""); //remove ending zeros
        if(numStr === ".")  numStr = "0";
        else if(numStr[0] === ".")  numStr = "0"+numStr;
        else if(numStr[numStr.length-1] === ".")  numStr = numStr.substr(0,numStr.length-1);
        return numStr;
    }
    return numStr;
}
module.exports = toNumber


/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "?7481":
/*!*******************************************!*\
  !*** @aws-sdk/signature-v4-crt (ignored) ***!
  \*******************************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/@aws-sdk/client-cognito-identity/package.json":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-cognito-identity/package.json ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@aws-sdk/client-cognito-identity","description":"AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native","version":"3.209.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","test:e2e":"ts-mocha test/**/*.ispec.ts && karma start karma.conf.js"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"2.0.0","@aws-crypto/sha256-js":"2.0.0","@aws-sdk/client-sts":"3.209.0","@aws-sdk/config-resolver":"3.209.0","@aws-sdk/credential-provider-node":"3.209.0","@aws-sdk/fetch-http-handler":"3.208.0","@aws-sdk/hash-node":"3.208.0","@aws-sdk/invalid-dependency":"3.208.0","@aws-sdk/middleware-content-length":"3.208.0","@aws-sdk/middleware-endpoint":"3.208.0","@aws-sdk/middleware-host-header":"3.208.0","@aws-sdk/middleware-logger":"3.208.0","@aws-sdk/middleware-recursion-detection":"3.208.0","@aws-sdk/middleware-retry":"3.209.0","@aws-sdk/middleware-serde":"3.208.0","@aws-sdk/middleware-signing":"3.208.0","@aws-sdk/middleware-stack":"3.208.0","@aws-sdk/middleware-user-agent":"3.208.0","@aws-sdk/node-config-provider":"3.209.0","@aws-sdk/node-http-handler":"3.208.0","@aws-sdk/protocol-http":"3.208.0","@aws-sdk/smithy-client":"3.209.0","@aws-sdk/types":"3.208.0","@aws-sdk/url-parser":"3.208.0","@aws-sdk/util-base64":"3.208.0","@aws-sdk/util-body-length-browser":"3.188.0","@aws-sdk/util-body-length-node":"3.208.0","@aws-sdk/util-defaults-mode-browser":"3.209.0","@aws-sdk/util-defaults-mode-node":"3.209.0","@aws-sdk/util-endpoints":"3.209.0","@aws-sdk/util-user-agent-browser":"3.208.0","@aws-sdk/util-user-agent-node":"3.209.0","@aws-sdk/util-utf8-browser":"3.188.0","@aws-sdk/util-utf8-node":"3.208.0","tslib":"^2.3.1"},"devDependencies":{"@aws-sdk/client-iam":"3.209.0","@aws-sdk/service-client-documentation-generator":"3.208.0","@tsconfig/node14":"1.0.3","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^14.14.31","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.19.2","typescript":"~4.6.2"},"overrides":{"typedoc":{"typescript":"~4.6.2"}},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-cognito-identity"}}');

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@aws-sdk/client-s3","description":"AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native","version":"3.209.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","test":"yarn test:unit","test:e2e":"ts-mocha test/**/*.ispec.ts && karma start karma.conf.js","test:unit":"ts-mocha test/**/*.spec.ts"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha1-browser":"2.0.0","@aws-crypto/sha256-browser":"2.0.0","@aws-crypto/sha256-js":"2.0.0","@aws-sdk/client-sts":"3.209.0","@aws-sdk/config-resolver":"3.209.0","@aws-sdk/credential-provider-node":"3.209.0","@aws-sdk/eventstream-serde-browser":"3.208.0","@aws-sdk/eventstream-serde-config-resolver":"3.208.0","@aws-sdk/eventstream-serde-node":"3.208.0","@aws-sdk/fetch-http-handler":"3.208.0","@aws-sdk/hash-blob-browser":"3.208.0","@aws-sdk/hash-node":"3.208.0","@aws-sdk/hash-stream-node":"3.208.0","@aws-sdk/invalid-dependency":"3.208.0","@aws-sdk/md5-js":"3.208.0","@aws-sdk/middleware-bucket-endpoint":"3.209.0","@aws-sdk/middleware-content-length":"3.208.0","@aws-sdk/middleware-endpoint":"3.208.0","@aws-sdk/middleware-expect-continue":"3.208.0","@aws-sdk/middleware-flexible-checksums":"3.208.0","@aws-sdk/middleware-host-header":"3.208.0","@aws-sdk/middleware-location-constraint":"3.208.0","@aws-sdk/middleware-logger":"3.208.0","@aws-sdk/middleware-recursion-detection":"3.208.0","@aws-sdk/middleware-retry":"3.209.0","@aws-sdk/middleware-sdk-s3":"3.209.0","@aws-sdk/middleware-serde":"3.208.0","@aws-sdk/middleware-signing":"3.208.0","@aws-sdk/middleware-ssec":"3.208.0","@aws-sdk/middleware-stack":"3.208.0","@aws-sdk/middleware-user-agent":"3.208.0","@aws-sdk/node-config-provider":"3.209.0","@aws-sdk/node-http-handler":"3.208.0","@aws-sdk/protocol-http":"3.208.0","@aws-sdk/signature-v4-multi-region":"3.208.0","@aws-sdk/smithy-client":"3.209.0","@aws-sdk/types":"3.208.0","@aws-sdk/url-parser":"3.208.0","@aws-sdk/util-base64":"3.208.0","@aws-sdk/util-body-length-browser":"3.188.0","@aws-sdk/util-body-length-node":"3.208.0","@aws-sdk/util-defaults-mode-browser":"3.209.0","@aws-sdk/util-defaults-mode-node":"3.209.0","@aws-sdk/util-endpoints":"3.209.0","@aws-sdk/util-stream-browser":"3.208.0","@aws-sdk/util-stream-node":"3.208.0","@aws-sdk/util-user-agent-browser":"3.208.0","@aws-sdk/util-user-agent-node":"3.209.0","@aws-sdk/util-utf8-browser":"3.188.0","@aws-sdk/util-utf8-node":"3.208.0","@aws-sdk/util-waiter":"3.208.0","@aws-sdk/xml-builder":"3.201.0","fast-xml-parser":"4.0.11","tslib":"^2.3.1"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.208.0","@tsconfig/node14":"1.0.3","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^14.14.31","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.19.2","typescript":"~4.6.2"},"overrides":{"typedoc":{"typescript":"~4.6.2"}},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-s3"}}');

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"version":"1.1","partitions":[{"id":"aws","regionRegex":"^(us|eu|ap|sa|ca|me|af)-\\\\w+-\\\\d+$","regions":{"af-south-1":{},"ap-east-1":{},"ap-northeast-1":{},"ap-northeast-2":{},"ap-northeast-3":{},"ap-south-1":{},"ap-southeast-1":{},"ap-southeast-2":{},"ap-southeast-3":{},"ca-central-1":{},"eu-central-1":{},"eu-north-1":{},"eu-south-1":{},"eu-west-1":{},"eu-west-2":{},"eu-west-3":{},"me-central-1":{},"me-south-1":{},"sa-east-1":{},"us-east-1":{},"us-east-2":{},"us-west-1":{},"us-west-2":{},"aws-global":{}},"outputs":{"name":"aws","dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","supportsFIPS":true,"supportsDualStack":true}},{"id":"aws-us-gov","regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"us-gov-west-1":{},"us-gov-east-1":{},"aws-us-gov-global":{}},"outputs":{"name":"aws-us-gov","dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","supportsFIPS":true,"supportsDualStack":true}},{"id":"aws-cn","regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"cn-north-1":{},"cn-northwest-1":{},"aws-cn-global":{}},"outputs":{"name":"aws-cn","dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","supportsFIPS":true,"supportsDualStack":true}},{"id":"aws-iso","regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","outputs":{"name":"aws-iso","dnsSuffix":"c2s.ic.gov","supportsFIPS":true,"supportsDualStack":false,"dualStackDnsSuffix":"c2s.ic.gov"},"regions":{"us-iso-east-1":{},"us-iso-west-1":{},"aws-iso-global":{}}},{"id":"aws-iso-b","regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","outputs":{"name":"aws-iso-b","dnsSuffix":"sc2s.sgov.gov","supportsFIPS":true,"supportsDualStack":false,"dualStackDnsSuffix":"sc2s.sgov.gov"},"regions":{"us-isob-east-1":{},"aws-iso-b-global":{}}}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!*************************!*\
  !*** ./src/commands.js ***!
  \*************************/
// Load the required clients and packages
const {
  CognitoIdentityClient
} = __webpack_require__(/*! @aws-sdk/client-cognito-identity */ "./node_modules/@aws-sdk/client-cognito-identity/dist-es/index.js");
const {
  fromCognitoIdentityPool
} = __webpack_require__(/*! @aws-sdk/credential-provider-cognito-identity */ "./node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/index.js");
const {
  S3Client,
  ListObjectsCommand
} = __webpack_require__(/*! @aws-sdk/client-s3 */ "./node_modules/@aws-sdk/client-s3/dist-es/index.js");

/**
 * S3 folders and object key names:
 *  https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html
 * 
 * Webpack:
 *  https://webpack.js.org/configuration/mode/
 * 
 */

const ls = async function (prefix) {
  let config = {
    Delimiter: "/",
    Bucket: this.bucket
  };
  if (prefix) {
    config.Prefix = prefix;
  }
  const data = await this.client.send(new ListObjectsCommand(config));
  console.log(data);
  let files = data.Contents || [];
  files = files.filter(file => {
    return file.Key.indexOf("Thumbs.db") === -1;
  });
  files = files.map(obj => {
    obj.Name = decodeURIComponent(obj.Key.replace(prefix, ""));
    let href = "https://s3." + this.region + ".amazonaws.com/";
    let bucketUrl = href + this.bucket + "/";
    let fileKey = obj.Key;
    obj.Url = bucketUrl + encodeURIComponent(fileKey);
    return obj;
  });
  console.log(files);
  let folders = data.CommonPrefixes || [];
  folders = folders.map(folder => {
    folder.Name = decodeURIComponent(folder.Prefix.replace(prefix, ""));
    return folder;
  });
  console.log(folders);
  const message = folders.length ? "Click a folder to view its contents." : "No folders found.";
  return {
    folders,
    files,
    message
  };
};
function S3Desktop(config) {
  this.client = null;
  this.region = config.region;
  this.identityPoolId = config.identityPoolId;
  this.bucket = config.bucket;
  this.currentFolder = null;
  this.client = new S3Client({
    region: this.region,
    credentials: fromCognitoIdentityPool({
      client: new CognitoIdentityClient({
        region: this.region
      }),
      identityPoolId: this.identityPoolId
    })
  });
}
let proto = {
  ls: ls
};
S3Desktop.prototype = proto;
exports.S3Desktop = S3Desktop;
})();

/******/ })()
;